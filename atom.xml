<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>norswap</title>
    <description></description>
    <link>http://norswap.com/</link>
    <atom:link href="http://norswap.com/atom.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Optimism Bedrock vs Arbitrum Nitro</title>
      <description>
&lt;p&gt;This is a really nerdy breakdown of the differences between &lt;a href=&quot;https://github.com/ethereum-optimism/optimism/blob/develop/specs/overview.md&quot;&gt;Optimism Bedrock 🗿&lt;/a&gt; and &lt;a href=&quot;https://github.com/OffchainLabs/nitro&quot;&gt;Arbitrum Nitro 🚀&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This is all sourced from my reading of the &lt;a href=&quot;https://github.com/OffchainLabs/nitro/blob/master/docs/Nitro-whitepaper.pdf&quot;&gt;Nitro whitepaper&lt;/a&gt;, and my intimate sensual knowledge of the Bedrock design.&lt;/p&gt;
&lt;p&gt;This actually started a Twitter thread, but grew way way too big for that.&lt;/p&gt;
&lt;p&gt;This gets very technical. If you want to follow &amp;amp; get confused, I recommend referring to the &lt;a href=&quot;https://github.com/ethereum-optimism/optimism/blob/develop/specs/overview.md&quot;&gt;Bedrock overview&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/norswap/status/1552454352316547076&quot;&gt;my presentation on our Cannon fault proof system&lt;/a&gt;, and of course the &lt;a href=&quot;https://github.com/OffchainLabs/nitro/blob/master/docs/Nitro-whitepaper.pdf&quot;&gt;Nitro whitepaper&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;With this out of the way, let&amp;#39;s dive in!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;First of all, the whitepaper is great and was a pleasure to read. I recommend checking it out for all interested.&lt;/p&gt;
&lt;p&gt;Going into this, my impression was that Bedrock and Nitro share roughly the same architecture, with some smaller differences.&lt;/p&gt;
&lt;p&gt;The paper by and large confirms this. Still, there are quite a few differences, including a few I didn&amp;#39;t expect. These are what this thread is about!&lt;/p&gt;
&lt;h1 id=&quot;a-fixed-vs-variable-block-time&quot;&gt;(A) Fixed vs variable block time&lt;/h1&gt;
&lt;p&gt;One of the most interesting and consequential things is that Nitro will work like the current version of Optimism, which has one block per transaction, and variable time between blocks.&lt;/p&gt;
&lt;p&gt;We moved away from this because it was a departure from how Ethereum works, and a pain point for devs. Bedrock will have &amp;quot;real&amp;quot; blocks with a fixed block time of 2 seconds.&lt;/p&gt;
&lt;p&gt;Irregular block times make quite a few common contracts wonky, because they keep time using blocks instead of the timestamp. This notably includes the Masterchef contract for distributing LP rewards that originated with Sushiswap.&lt;/p&gt;
&lt;p&gt;I&amp;#39;m not sure why these contracts keep the time with blocks instead of timestamps! Ethereum miners have some leeway in manipulating timestamps, but clients will by default not build upon blocks that are too far away from the wallclock time (15s in Geth), so no problem.&lt;/p&gt;
&lt;p&gt;Anyway, on Optimism this caused the &lt;a href=&quot;https://stargate.finance/&quot;&gt;StargateFinance&lt;/a&gt; incentives to run out months ahead of other chains, because they didn&amp;#39;t account for this peculiarity!&lt;/p&gt;
&lt;p&gt;The &amp;quot;one block per transaction&amp;quot; model has other issues. First, it&amp;#39;s a lot of overhead for storing the chain (one block header per tx). Second, it means the state root needs to be updated after each individual transaction.&lt;/p&gt;
&lt;p&gt;Updating the state root is a pretty expensive operation, whose cost is amortized when done over multiple transactions.&lt;/p&gt;
&lt;h1 id=&quot;b-geth-as-a-library-or-as-the-execution-engine&quot;&gt;(B) Geth as a library or as the execution engine&lt;/h1&gt;
&lt;p&gt;Nitro uses Geth &amp;quot;as a library&amp;quot; which is minimally modified with hooks to call the proper functionality.&lt;/p&gt;
&lt;p&gt;In Bedrock, a minimally modified Geth runs standalone as the &amp;quot;execution engine&amp;quot; which receives instructions from the rollup node in the same way the execution layer receives instructions from the consensus layer in Eth2. We even use the exact same API!&lt;/p&gt;
&lt;p&gt;This has some important consequences. First we’re able to use other clients than Geth, applying a similar minimal diff on top of them. This is not just theory, we already have &lt;a href=&quot;https://github.com/protolambda/erigon/tree/optimism&quot;&gt;Erigon&lt;/a&gt; pretty much ready.&lt;/p&gt;
&lt;p&gt;Second, this lets us reuse the whole Geth (or other client) stack, include at the networking layer, which enables things like peer discovery and state sync, without almost any additional dev work.&lt;/p&gt;
&lt;h1 id=&quot;b-state-storage&quot;&gt;(B) State storage&lt;/h1&gt;
&lt;p&gt;Nitro keeps some state (&amp;quot;the state of ArbOS&amp;quot;) inside a special account (itself stored within the Arbitrum&amp;#39;s chain state), using a special memory layout to map keys to storage slots.&lt;/p&gt;
&lt;p&gt;(This is purely architecture, with no user impact.)&lt;/p&gt;
&lt;p&gt;Bedrock doesn&amp;#39;t really have much state in that sense, and what little it has is stored in ordinary EVM contracts (to be fair, you could implement the ArbOS state layout using the EVM, though that&amp;#39;s not what I think they are doing).&lt;/p&gt;
&lt;p&gt;When determining/executing the next L2 block, a Bedrock replica looks at:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the header of the head of the L2 chain&lt;/li&gt;
&lt;li&gt;data read from L1&lt;/li&gt;
&lt;li&gt;some data in EVM contract on the L2 chain, currently only the L1 fee parameters&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In Bedrock, nodes can crash and immediately gracefully restart. They don&amp;#39;t need to maintain an extra databases, because all the necessary information can be found in L1 and L2 blocks. I assume Nitro works the same (the architecture makes this possible).&lt;/p&gt;
&lt;p&gt;It&amp;#39;s however apparent that Nitro does a little more bookkeeping work than Bedrock.&lt;/p&gt;
&lt;h1 id=&quot;c-l1-to-l2-message-inclusion-delay&quot;&gt;(C) L1 to L2 message inclusion delay&lt;/h1&gt;
&lt;p&gt;Nitro processes L1 to L2 messages (what we call &amp;quot;deposited transactions&amp;quot; or just &amp;quot;deposits&amp;quot;) with a 10 minutes delay. On Bedrock, they should usually be with a small confirmation depth of a few blocks (maybe 10 L1 blocks, so about 2 minutes).&lt;/p&gt;
&lt;p&gt;We do also have a parameter called &amp;quot;sequencer drift&amp;quot; that allows the timestamp of an L2 block to drift ahead of its L1 origin (L1 block that marks the end of the L1 block range from which batches and deposits are derived).&lt;/p&gt;
&lt;p&gt;We still have to decide the final value but we&amp;#39;re leaning towards 10 minutes also, meaning the worst case is 10 minutes. However, this parameter is meant to ensure liveness of the L2 chain during temporary loss of connection to L1.&lt;/p&gt;
&lt;p&gt;Usually however, deposits will be included immediately after the confirmation depth.&lt;/p&gt;
&lt;p&gt;The Nitro paper mentions that this 10 minutes delay is to avoid the deposits from disappearing on L1 due to a re-org. This made me curious about an aspect that the paper does &lt;em&gt;not&lt;/em&gt; talk about, and which is: how does the L2 chain handles L1 re-org. I think the answer is it doesn&amp;#39;t.&lt;/p&gt;
&lt;p&gt;This isn&amp;#39;t unreasonable: post-merge there is an L1 finality delay of about 12 minutes. So if it&amp;#39;s okay for deposits to lag 10/12 minutes behind, then this design works.&lt;/p&gt;
&lt;p&gt;Because Bedrock tracks closer to L1, we need to handle L1 re-orgs by re-orging L2 if needed. The confirmation depth should avoid this happening too often.&lt;/p&gt;
&lt;p&gt;Another minor difference there is that if the Nitro sequencer does not include a deposit after 10 minutes, you can &amp;quot;force include&amp;quot; it via an L1 contract call.&lt;/p&gt;
&lt;p&gt;On Bedrock, this is not necessary: it&amp;#39;s invalid to have an L2 block without including the deposits of its L1 origin.&lt;/p&gt;
&lt;p&gt;And because L2 can only be 10 minutes (sequencer drift) ahead of the origin, a chain that does not include deposits after 10 minutes is invalid, will be rejected by validators and challengeable by the fault proof mechanism.&lt;/p&gt;
&lt;h1 id=&quot;d-l1-to-l2-messages-retry-mechanism&quot;&gt;(D) L1-to-L2 messages retry mechanism&lt;/h1&gt;
&lt;p&gt;Nitro implements &amp;quot;retryable tickets&amp;quot; for L1-to-L2 messages. Say you&amp;#39;re bridging, the L1 part of the tx could work (locking your tokens) but the L2 part could fail. So you need to be able to retry the L2 part (maybe with some more gas) or you&amp;#39;ve lost your tokens.&lt;/p&gt;
&lt;p&gt;Nitro implements this in the ArbOS part of the node. In Bedrock, this is all done in Solidity itself.&lt;/p&gt;
&lt;p&gt;If you use our L1 cross-domain messenger contracts to send a transaction to L2, the transaction lands in our L2 cross-domain messenger which will record its hash, making it retryable. Nitro works the same way, it&amp;#39;s just implemented in the node.&lt;/p&gt;
&lt;p&gt;We also expose a lower-level way to do deposits, via our L1 Optimism Portal contract.&lt;/p&gt;
&lt;p&gt;This doesn&amp;#39;t give you the safety net of the L2 cross-domain messenger retry mechanism, but on the flip side, it means you can implement your own app-specific retry mechanism in Solidity. Pretty cool!&lt;/p&gt;
&lt;h1 id=&quot;e-l2-fee-algorithm&quot;&gt;(E) L2 fee algorithm&lt;/h1&gt;
&lt;p&gt;On both systems, fees have an L2 part (the execution gas, similar to Ethereum) and an L1 part (cost of L1 calldata). For its L2 fee, Nitro uses a bespoke system, while Bedrock re-uses EIP-1559. Nitro has to do this because they have the aforementioned 1 tx/block system.&lt;/p&gt;
&lt;p&gt;We still have to tune the EIP-1559 parameters to make it work well with the 2 second block time. Today, Optimism charges a low &amp;amp; flat L2 fee (the L1 fee is 99% of the price anyway). I think we might have surge pricing too, but it never kicks in in practice.&lt;/p&gt;
&lt;p&gt;An advantage of reusing EIP-1559 is that it should make it marginally easier for wallets and other tools to compute fees.&lt;/p&gt;
&lt;p&gt;The Nitro gas-metering formula is pretty elegant though, and they seem to have put a lot of thought in it.&lt;/p&gt;
&lt;h1 id=&quot;f-l1-fee-algorithm&quot;&gt;(F) L1 fee algorithm&lt;/h1&gt;
&lt;p&gt;What about L1 fees? This is a bigger difference. Bedrock uses backward-looking L1 basefee data. This data is pretty fresh, because it is delivered via the same mechanism as deposits (i.e. it&amp;#39;s almost instant).&lt;/p&gt;
&lt;p&gt;Because there&amp;#39;s still a risk that the L1 fee will spike, we charge a small multiplier of the expected cost.&lt;/p&gt;
&lt;p&gt;Fun fact: this multiplier (which we have lowered multiple times since launching the chain) is where all the current sequencer revenue come from! With EIP-4844, this will shrink, and revenues will come from (UX-preserving) MEV extraction instead.&lt;/p&gt;
&lt;p&gt;Nitro does something rather much more complicated. I don&amp;#39;t claim to understand all the intricacies of it, but the basic gist is that they have a control system that gets feedback from how much fees were actually paid on L1.&lt;/p&gt;
&lt;p&gt;This means sending transaction back from L1 to L2 with this data. If the sequencer underpaid, it can start charging users less going forward. If it overpaid, it can start charging users more.&lt;/p&gt;
&lt;p&gt;As an aside, you may wonder why we need to transmit fee data from L1 to L2. It&amp;#39;s because we want the fee scheme to be part of the protocol, and open to challenge by fault proofs. Otherwise, rogue sequencers could DoS the chain by setting arbitrarily high fees!&lt;/p&gt;
&lt;p&gt;Finally, transaction batches are compressed in both systems. Nitro charges the L1 fee based on an estimation of how well the transaction will compress. Bedrock currently doesn&amp;#39;t do this, though we plan to.&lt;/p&gt;
&lt;p&gt;Not doing this worsens the perverse incentive to cache data in L2 storage, leading to problematic state growth.&lt;/p&gt;
&lt;h1 id=&quot;g-fault-proof-instruction-set&quot;&gt;(G) Fault proof instruction set&lt;/h1&gt;
&lt;p&gt;Fault/fraud proofs! Quite a few differences between what Nitro does and how Cannon (the fault proof system we&amp;#39;re currently implementing to sit on top of Bedrock) will work.&lt;/p&gt;
&lt;p&gt;Bedrock compiles to the MIPS instruction set architecture (ISA), Nitro compiles to WASM. They seem to do quite a few more transformation on the output than we do, owing to compiling to a subset of WASM which they call WAVM.&lt;/p&gt;
&lt;p&gt;For instance, they replace floating point (FP) operations by library calls. I suspect that they didn&amp;#39;t want to implement the gnarly FP operations in their on-chain interpreter. We do this too, but the Go compiler takes care of it for us!&lt;/p&gt;
&lt;p&gt;Another example: unlike most ISA that only has jumps, WASM has proper (potentially nested) control flow (if-else, while, etc). The conversion from WASM to WAVM removes this to go back to jumps, again probably for the sake of interpreter simplicity.&lt;/p&gt;
&lt;p&gt;They also compile a mix of Go, C &amp;amp; Rust to WAVM (in different &amp;quot;modules&amp;quot;), while we do Go only. Apparently WAVM allows &amp;quot;the languages&amp;#39; memory management not to interfere&amp;quot;, which I interpret as each WAVM module getting its own heap.&lt;/p&gt;
&lt;p&gt;Something I&amp;#39;m curious about: how they deal with concurrency and garbage collection. We&amp;#39;re able to avoid concurrency fairly easily in minigeth (our stripped down geth) so maybe that part is easy (more on how Bedrock and Nitro use geth at the end of this article).&lt;/p&gt;
&lt;p&gt;However, one of the only transformation we do on MIPS is to patch out garbage collection calls. This is because garbage collection uses concurrency in Go, and concurrency and fault proofs don&amp;#39;t go well together. Does Nitro do the same thing?&lt;/p&gt;
&lt;h1 id=&quot;h-bisection-game-structure&quot;&gt;(H) Bisection game structure&lt;/h1&gt;
&lt;p&gt;The Bedrock fault proof will work on a run of minigeth that verifies the validity of a state root (actually an &lt;a href=&quot;https://github.com/ethereum-optimism/optimism/blob/ab7ed0d43d77d2fd6723d0f4b9b056daca94071f/specs/proposals.md#l2-output-root-proposals-specification&quot;&gt;output root&lt;/a&gt;) posted to L1. Such state roots are not posted frequently, and a such encompass the validation of many blocks/batches.&lt;/p&gt;
&lt;p&gt;The bisection game in Cannon is played on the execution trace of this (long) run.&lt;/p&gt;
&lt;p&gt;In Nitro, on the other hand, state roots are posted with each set of batches (&lt;em&gt;RBlock&lt;/em&gt;) posted to L1.&lt;/p&gt;
&lt;p&gt;The bisection game in Nitro is split in two parts. First find the first state root that challenger and defender disagreee on. Then, find the first WAVM instruction they disagree on in the validator run (which only validates a single transaction).&lt;/p&gt;
&lt;p&gt;The trade-off is more hashing during Nitro execution (see (A) above), but less hashing during the fault proof: each step in the bisection game over an execution trace requires submitting a Merkle root of the memory.&lt;/p&gt;
&lt;p&gt;Structure the fault proof like this also reduces the concern that memory will balloon in the validator, potentialy exceeding the 4G memory limit we currently have for running MIPS.&lt;/p&gt;
&lt;p&gt;This isn&amp;#39;t a hard problem to fix, but we need to be careful in Bedrock, whereas there is probably no chance that validating a single transaction can ever approach the limit.&lt;/p&gt;
&lt;h1 id=&quot;i-preimage-oracle&quot;&gt;(I) Preimage oracle&lt;/h1&gt;
&lt;p&gt;The validator software used for fault proofs need to read data from L1 and L2. Because it will ultimately &amp;quot;run&amp;quot; on L1 (though only a single instruction), the L2 itself needs to be accessed via L1 - via the state roots &amp;amp; block hashes posted to L1.&lt;/p&gt;
&lt;p&gt;How do you read from the state or chain (whether L1 or L2)?&lt;/p&gt;
&lt;p&gt;A Merkle root node is a hash of its children, so if you can request a preimage, you can traverse the whole state tree. Similarly, you can traverse the whole chain backwards by requesting the preimage of a block header. (Each block header contains the hash of its parent.)&lt;/p&gt;
&lt;p&gt;When executing on-chain, these preimages can be presupplied to the WAVM/MIPS interpreter in advance. (When executing off-chain, you can read the L2 state directly!)&lt;/p&gt;
&lt;p&gt;(Note that you only ever need to access one such preimage, because on-chain you only execute one instruction!)&lt;/p&gt;
&lt;p&gt;So that&amp;#39;s how you read from L2, both on Nitro and Bedrock.&lt;/p&gt;
&lt;p&gt;You need to do something similar for L1 however. Because transaction batches are stored in L1 calldata, which is not accessible from L1 smart contracts.&lt;/p&gt;
&lt;p&gt;Nitro stores the hashes of its batches in an L1 contract (which is why their &amp;quot;Sequencer Inbox&amp;quot; is a contract and not an EOA like for Bedrock). So they at least need to do that, I&amp;#39;m not sure why it wasn&amp;#39;t mentionned.&lt;/p&gt;
&lt;p&gt;In Bedrock, we don&amp;#39;t even store the batches hash (leading to some gas savings). Instead, we walk back the L1 chain using the L1 block headers, then walk down the transaction Merkle root to find the batches in the calldata.&lt;/p&gt;
&lt;p&gt;(Again, on-chain, at most a single preimage needs to be supplied.)&lt;/p&gt;
&lt;p&gt;Section 4.1 ends with a paragraph that reminds us that &lt;a href=&quot;https://twitter.com/EdFelten/status/1488632545457618952&quot;&gt;Arbitrum invented the &amp;quot;hash oracle trick&amp;quot;&lt;/a&gt;. Credit where credit is due. Insecurity shouldn&amp;#39;t be a reason to forget about the Arbitrum team&amp;#39;s contributions!&lt;/p&gt;
&lt;h1 id=&quot;j-large-preimages&quot;&gt;(J) Large preimages&lt;/h1&gt;
&lt;p&gt;The paper also tells us that the fixed upper bound for an L2 preimage is 110kb, but does not quote the figure for L1.&lt;/p&gt;
&lt;p&gt;In Cannon, we have something called &amp;quot;the large preimage problem&amp;quot;, because one of the potential preimage to invert is the receipts preimage, which contains all the data emitted by Solidity events (&amp;quot;logs&amp;quot; at the EVM level).&lt;/p&gt;
&lt;p&gt;In the receipts, all the log data is concatenated together. This means an attacker could emit a ton of logs, and create an incredibly large preimage.&lt;/p&gt;
&lt;p&gt;We need to read logs because we use them to store deposits (L2-to-L1 messages). This is not strictly necessary: Nitro avoids the issue by storing a hash of the message (it&amp;#39;s more complicated than this, but the end result is the same).&lt;/p&gt;
&lt;p&gt;We don&amp;#39;t store a hash because of the significant cost to compute and store it. Around 20k gas to store and 6 gas per 32 bytes to compute. An average transaction is about 500 bytes, making a batch of 200 transactions cost about 20k gas to hash as well. At 2k$ ETH and 40 gwei basefee, the extra hashing and storage costs 3.2$. At 5k$ ETH and 100 gwei that&amp;#39;s 20$.&lt;/p&gt;
&lt;p&gt;Our current plan to solve the large preimage problem is to use a simple zk-proof to prove the value of some bytes within the preimage (since that&amp;#39;s all an instruction needs to access in practice).&lt;/p&gt;
&lt;h1 id=&quot;k-batches--state-roots&quot;&gt;(K) Batches &amp;amp; state roots&lt;/h1&gt;
&lt;p&gt;Nitro ties batches with state roots very strongly. They post a set of batches in an &lt;em&gt;RBlock&lt;/em&gt; which also contains a state root.&lt;/p&gt;
&lt;p&gt;Bedrock on the other hands posts its batches separately from the state roots. The key advantage is again reduced cost to posting batches (no need to interact with a contract or store data). This lets us post batches more often, and state roots less often.&lt;/p&gt;
&lt;p&gt;Another consequence is that with Nitro, should an RBlock be challenged, the transactions it contains will not be replayed on the new chain (new correct state roots).&lt;/p&gt;
&lt;p&gt;In Bedrock, we&amp;#39;re currently debating what to do in the case where a state root gets successfully challenged: replay old transactions on top of the new state roots, or full rollback? (The current implementation implies a full rollback, but it’s likely to be changed before fault proofs are rolled out.)&lt;/p&gt;
&lt;h1 id=&quot;l-misc&quot;&gt;(L) Misc&lt;/h1&gt;
&lt;p&gt;Smaller, less consequential differences:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(i)&lt;/strong&gt; Nitro allows individual transactions posted by the sequencer to be &amp;quot;garbage&amp;quot; (invalid signatures, etc). To minimize the changes to Geth, we always throw out batches that contain any garbage.&lt;/p&gt;
&lt;p&gt;The sequencer is always able to find those in advance, so lingering garbage entails either misbheaviour or bug. The sequencer runs the same code as the fault proof, so their definitions of what&amp;#39;s invalid should be identical.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(ii)&lt;/strong&gt; Nitro introduces precompile contracts, notably for L2-to-L1 message passing. We currently don&amp;#39;t use any precompiles, preferring them &amp;quot;pre-deploys&amp;quot;, i.e. actual EVM contracts that exist at special addresses from the genesis block.&lt;/p&gt;
&lt;p&gt;Turns out we can do what we need just fine in the EVM, and this makes the node logic slightly simpler. We&amp;#39;re not religiously opposed to precompiles though, maybe we&amp;#39;ll need one at some point.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(iii)&lt;/strong&gt; The Nitro fault proof does a d-way dissection. The proof-of-concept Cannon implementation uses a bisection, but we&amp;#39;ll probably move to a d-way dissection too.&lt;/p&gt;
&lt;p&gt;There is a very nice formula in the paper that explains the optimal value of &lt;em&gt;d&lt;/em&gt; based on fixed and variable costs. I wish they had included concrete examples of how they estimate these costs in practice however!&lt;/p&gt;
&lt;h1 id=&quot;coda&quot;&gt;Coda&lt;/h1&gt;
&lt;p&gt;No grand conclusion! Or rather: draw your own :)&lt;/p&gt;
&lt;p&gt;If you enjoyed this, follow me &lt;a href=&quot;https://twitter.com/norswap&quot;&gt;on Twitter&lt;/a&gt; for
more of the same and be notified of new articles.&lt;/p&gt;
      </description>
      <pubDate>2022-10-01T22:00:00.000Z</pubDate>
      <link>http://norswap.com/bedrock-vs-nitro</link>
      <guid isPermaLink="true">http://norswap.com/bedrock-vs-nitro</guid>
    </item>
    <item>
      <title>Olympus DAO: An Economic Analysis</title>
      <description>
&lt;p&gt;In my previous post — &lt;a href=&quot;https://norswap.com/olympus&quot;&gt;Olympus DAO from Primary Sources&lt;/a&gt; — we looked at
exactly how &lt;a href=&quot;https://www.olympusdao.finance/&quot;&gt;OlympusDAO&lt;/a&gt; worked by digging into the smart contracts implementing
it.&lt;/p&gt;
&lt;p&gt;If you&amp;#39;re jumping aboard this wagon, OlympusDAO is a decentralized app that
turned quite a few heads due to the high promised APY, sharp price increase, and
even sharper market cap increase.&lt;/p&gt;
&lt;p&gt;Last time we looked at what the protocol did mechanistically (the findings will
be recapped shortly). This time, we&amp;#39;re looking at the consequence of the
mechanisms for price, market cap, valuation, etc.&lt;/p&gt;
&lt;p&gt;(It goes without saying that all of this is a fun educational analysis, and none
of it is financial advice.)&lt;/p&gt;
&lt;h2 id=&quot;the-bottom-line&quot;&gt;The Bottom Line&lt;/h2&gt;
&lt;p&gt;I won&amp;#39;t tease you further, here are the basic conclusions (presented
out-of-order compared to the main text):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;OHM (Olympus&amp;#39; token) has extremely high programmed inflation, but the staking
product protects stakers against dilution.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;At first look, it looks like staking also increases ownership over the total
OHM supply when less than 100% of the supply is staked. In practice, it seems
likely that most of the unstaked supply is made out of liquidity pool
reserves owned by the protocol, meaning any increase in ownership is
compensated by a dilution of the treasury (which underpins the value of
owning the protocol!).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;As a result staking is very much useless (economically neutral) as a
mechanic, besides as a way to drive narrative and hype (high APYs!!).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;As a first approximation, the treasury value offers a floor price on OHM&amp;#39;s
market cap — however this notion is thwarted by the fact that the OHM
treasury contain OHM tokens (in the liquidity pools underlying the LP
tokens). So when the price of OHM goes down, so the does the market value of
the treasury.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In reality, there exists a price &lt;code&gt;&amp;gt; 1$&lt;/code&gt; such that the OHM market cap is equal
to the market value of the treasury. Let&amp;#39;s call the treasury value at that
price the &lt;em&gt;sustainable value&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The sustainable treasury value must exist becau&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The treasury value decreases slower than the market cap (notably because
it contains stablecoins), so if the price keeps dipping, at some point the
market cap &amp;quot;catches up&amp;quot; with the treasury value.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Part of the treasury is denominated in stablecoins, and these were
collected when the OHM price was much higher than 1$. Meaning the
equilibrium (sustainable) price is &lt;code&gt;&amp;gt; 1$&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In any case, the &amp;quot;backing per OHM&amp;quot; advertised by Olympus and the &amp;quot;treasury
value&amp;quot; advertised by Wonderland are misleading since these value go down when
the price goes down.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If the high inflation (rebase) rate persists, OHM will eventually go down to
1$, at which point a backstop in the inflation logic prevents further
inflation until the price increases again.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Bond sales are the real interesting mechanism. They are a programmed way to
raise funds for the treasury via further inflation. Wether this is inflation
is dilutive to OHM stakers depends on whether the bond sales discount is
lower or higher than the current price premium (see below).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When discussing Olympus valuation, it will be much more useful to use gOHM
(indexed OHM — i.e. wrapped staked OHMs that do not dilute due to rebases)
as a reference.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A useful model to value Olympus&amp;#39; market cap is to assume it should trade at
a premium to the sustainable treasury value. This premium is justified by
the fact that gOHM is essentially (a) a voucher for ownership of part of the
treasury + (b) a call option on the gOHM price. The call option part is the
premium.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The premium essentially depends on the &lt;em&gt;sustainable&lt;/em&gt; backing per gOHM + the
expected future premium.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The backing could increase for multiple reasons: yield farming with the
treasury, VC-like investments with the treasury, or new products that
increase the treasury, like Olympus Pro.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The backing also naturally increases through bond sales, as long as the bond
sales discount is lower than the current premium.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Because the current premium depends on the expected future premium, the
process is reflexive (it&amp;#39;s a &amp;quot;Keynesian beauty context&amp;quot; or &amp;quot;a fixed-point
calculation&amp;quot;). Each participant must try to guess how every other
participant will value OHM.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ignoring this issue for now, what price should you be willing to purchase
OHM at. i.e. what premium are you willing to accept?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I propose the formula: &lt;code&gt;maximum_purchase_price = expected_sustainable_treasury_backing * (1 + expected_premium) - current_price * (risk_free_rate + risk_premium)&lt;/code&gt; (We already discussed all
terms except the risk-free rate and the risk premium.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The risk-free rate is the return rate you could get without taking risk. No
such thing as &amp;quot;risk-free&amp;quot; in crypto, but you could set that to the lending
rate on Aave or Compound for instance. (Or just use the US bonds rate!)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The risk premium is the return rate you demand to be compensated for the
risk that you are taking.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;See the article for an example of thow this computation can be borne out in
practice.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I also briefly discuss the relationship between the premium and the treasury
size. Mostly, as the treasury grows, it&amp;#39;s natural to expect that the premium
should decrease: the team doesn&amp;#39;t scale linearly with capital, and
investment opportunities become scarcer.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It&amp;#39;s important to note that the Olympus team is aware of some of these
issues. See this &lt;a href=&quot;https://hackmd.io/@HMyg0dxkQ96YOMpI30o8PA/mbga&quot;&gt;whitepaper&lt;/a&gt; by Zeus and Indigo, which proposes
&amp;quot;an evolution from the existing staking-centric model in favor of a
bond-centric model&amp;quot;. The goal are to truly lock away part of the supply
(which staking doesn&amp;#39;t do) and enable selling &amp;quot;internal&amp;quot; OHM-OHM bonds (just
like US treasury bonds but with OHM instead of USD) at high volume without
adversely affecting the OHM price.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The team also came up with &lt;a href=&quot;https://olympusdao.medium.com/olympus12-building-a-strong-ecosystem-around-a-web3-native-reserve-currency-416f58175e74&quot;&gt;the Olympus12 roadmap&lt;/a&gt;, which
outlines a strong (imho) and extremely interesting action plan for
bolstering the economics of OlympusDAO going forward. I do think the success
of the plan hinges on whether they will manage to convince projects and
people to effectively treat OHM (more like gOHM) as a token to put on the
balance sheet / in their long-term portfolio, and not just speculation &amp;amp;
arbitrage. With the right mix of incentives and interesting use cases, they
might be able to.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://norswap.com/olympus-econ/#the-bottom-line&quot;&gt;The Bottom Line&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://norswap.com/olympus-econ/#how-olympus-works-recap&quot;&gt;How Olympus Works: Recap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://norswap.com/olympus-econ/#example&quot;&gt;Example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://norswap.com/olympus-econ/#olympusdao-valuation&quot;&gt;OlympusDAO Valuation&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://norswap.com/olympus-econ/#olympus-assets&quot;&gt;Olympus&amp;#39; Assets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://norswap.com/olympus-econ/#treasury-as-market-cap-floor&quot;&gt;Treasury as Market Cap Floor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://norswap.com/olympus-econ/#sustainable-value&quot;&gt;Sustainable Value&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://norswap.com/olympus-econ/#the-floor-in-practice&quot;&gt;The Floor in Practice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://norswap.com/olympus-econ/#the-premium-risk-free-rate-and-riks-premium&quot;&gt;The Premium, Risk-Free Rate and Risk Premium&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://norswap.com/olympus-econ/#pricing-gohm&quot;&gt;Pricing gOHM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://norswap.com/olympus-econ/#evolution-of-the-backing-per-gohm&quot;&gt;Evolution of the backing per gOHM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://norswap.com/olympus-econ/#modelling-the-premium&quot;&gt;Modelling the Premium&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://norswap.com/olympus-econ/#olympus-in-the-long-run&quot;&gt;Olympus in the Long Run&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://norswap.com/olympus-econ/#on-the-uselessness-of-staking&quot;&gt;On the Uselessness of Staking&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://norswap.com/olympus-econ/#on-the-usefulness-of-bonding&quot;&gt;On the Usefulness of Bonding&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://norswap.com/olympus-econ/#coda&quot;&gt;Coda&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;how-olympus-works-recap&quot;&gt;How Olympus Works: Recap&lt;/h2&gt;
&lt;p&gt;If you missed &lt;a href=&quot;https://norswap.com/olympus&quot;&gt;the previous article&lt;/a&gt;, here is a copy of my (fairly
detailed) summary of OHM&amp;#39;s mechanisms. This should be all you need to follow
along!&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The total supply of $OHM inflates at the &lt;em&gt;staking reward rate&lt;/em&gt; every ~8
hours. This inflation is redistributed among stakers. The inflation
distribution event that happens every 8 hours is called &lt;em&gt;a rebase&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The staking reward rate is set by the OlympusDAO policy team. For the longest
time, this reward rate was 0.35%. It is currently 0.2%, on its way down to a
target of 0.16%. At 0.35%, this implies an inflation of 4487%. This is also
the minimum staking APY in OHM (if 100% of the OHM is staked, otherwise it
will be higher). At 0.16%, this implies a 475% inflation (yup — exponentials
are weird).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;OlympusDAO has a treasury composed of stablecoins and OHM-stablecoin
[liquidity pool (LP) tokens][lp-tokens]. The treasury is constituted by
selling bonds (see below).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A central concept is the &amp;quot;risk-free value&amp;quot; (RFV) of the treasury. This is simply
1$ for stablecoin. For LP tokens, it is the price the token would take if the
OHM price fell to 1$. Controversially, this means that part of the RFV of the
treasury is made of OHM tokens (in the liquidity pools).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Rebases can only go through if there is 1$ of risk-free value in the treasury
for each OHM in existence including the newly-minted ones. This sets a
soft-floor if 1$ on the OHM price, assuming that the OHM market cap should
always be at least as large as the risk-free value of the OHM treasury.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The protocol maintains a metric called &amp;quot;the index&amp;quot; which is how much OHM you
would own if you staked a single OHM on the day the protocol launched
(currenty 74). Recently, Olympus launched the gOHM (&amp;quot;governance OHM&amp;quot;) which
&amp;quot;wraps&amp;quot; the indexed amount of staked OHM. The main avowed purpose was to
enable the trading of staked OHM on other chains.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Staking comes with an optional warm-up period (currently disabled) which
forces people to wait a configurable amount of time before their OHM tokens
are staked.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;At any time, people can purchase OHM bonds using various stablecoins and
OHM-stablecoin &lt;a href=&quot;https://www.google.com/search?hl=en&amp;amp;q=lp%20tokens&quot;&gt;LP tokens&lt;/a&gt;. The policy team can add, remove or tweak these
bond markets. The bonds are usually sold as a small discount to
the OHM market price. The bonds grant newly minted OHM tokens to the buyer.
These tokens vest over a configurable period, which has always been 5 days.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The DAO takes a (configurable) fee over every bond sale, although this is
currently set to 0, and it&amp;#39;s rather hard to search historical state to see if
it was ever set differently.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Bond pricing uses a notion of risk-free value (RFV). The risk-free value of
stablecoins is equivalent to their market value. For LP tokens however,
Olympus assumes a worst-case scenario where OHM is worth 1$, and prices the
LP tokens accordingly.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Bonds are priced differently depending on the token used to purchase the
bonds. The bond price is determined by the formula &lt;code&gt;bondPrice = min(BCV * debtRatio + 1, minimumPrice)&lt;/code&gt;, where:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;One bond grants one OHM after the vesting period.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For simplicity, I ignore the decimals on &lt;code&gt;minimumPrice&lt;/code&gt; and &lt;code&gt;bondPrice&lt;/code&gt;
(assume those are infinite precision numbers), and assume that &lt;code&gt;debtRatio&lt;/code&gt;
is a value between 0 and 1.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;BCV&lt;/code&gt; is the bond control variable, set by the policy team for each token&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;debtRatio&lt;/code&gt; is a ratio between (a) the risk-free value of all tokens used for
bond purchases (tallied at the moment of purchase) scaled by the remaining
vesting time; and (b) the total OHM supply.&lt;/p&gt;
&lt;p&gt;Note that the numerator and the denominator have different units (risk-free
USD and OHM), and consequently, the debt ratio rises faster when the OHM
price is high.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;minimumPrice&lt;/code&gt; — as the name indicates. However, once a bond purchases occurs
above the minimum price, it is then set to 0, allowing subsequent purchases
to occur below the bond price.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; There is maximum amount of debt (denominated in risk-free value) allowed
 per token, preventing the emission of too many bonds, and offering some
 protection against attacks (e.g. if a stablecoin was to lose his peg).&lt;/p&gt;
&lt;p&gt; Because the formula is not based on the market price of OHM, the bond price
 can occasionally exceed the market price!&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;example&quot;&gt;Example&lt;/h2&gt;
&lt;p&gt;To make things more concrete, I&amp;#39;m also copying verbatim the example from last
time in this section. This will help you have a better sense of the mechanisms
that we are discussing.&lt;/p&gt;
&lt;p&gt;Let&amp;#39;s assume that&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OHM is worth 70$ (as it was when I wrote this example)&lt;/li&gt;
&lt;li&gt;the OHM-DAI liquidity pool contains 100 OHM (and therefore
7000 DAI, which we&amp;#39;ll write 7000$ for convenience)&lt;/li&gt;
&lt;li&gt;the ownership of the pool is split accross 100 LP tokens, each of which is
worth &lt;code&gt;0.01 * 2 * 7000 = 140&lt;/code&gt; $&lt;/li&gt;
&lt;li&gt;the current debt ratio for the OHM-DAI bond depository contract is 5%&lt;/li&gt;
&lt;li&gt;the bond control variable (BCV) for the OHM-DAI contract is 207 (as it is at
the time for writing)&lt;/li&gt;
&lt;li&gt;the (thrice-daily) rebase rate is 0.24% (as it was when I wrote this)&lt;/li&gt;
&lt;li&gt;the DAO fee is 1%. This is currently 0% in both v1 and v2 bonds, and it&amp;#39;s
particularly difficult to find historical values (you&amp;#39;d have to run your own
node and re-execute transactions, since value changes are not even logged).&lt;/li&gt;
&lt;li&gt;the RFV backing per OHM is about 26$ (as it was ...)&lt;/li&gt;
&lt;li&gt;the market-rate backing per OHM is about 60$ (as it was ...)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Under these condtions, the risk-free value (RFV) of such a DAI-OHM LP token is
&lt;code&gt;0.01 * 2 * sqrt(100 * 7000) ~= 16.73&lt;/code&gt; $.&lt;/p&gt;
&lt;p&gt;If a user uses a single LP token to purchase bonds, he would get back bonds that
would grant &lt;code&gt;(16.73 * 100) / (100 + 5 * 207) == 2.32&lt;/code&gt; OHM. This represents a
&amp;quot;premium&amp;quot; of 0.73 OHM compared to the market price, which is equivalent of an
effective OHM price of &lt;code&gt;140 / 2.32 = 60.34&lt;/code&gt; $, or an effective discount rate of
14% compared to the market price.&lt;/p&gt;
&lt;p&gt;A more realistic discount assessment would also consider that during the vesting
period of 5 days, the OHM supply will inflate by around 3.7% (&lt;code&gt;1.0024^(3*5) ~= 1.037&lt;/code&gt;), so the effective discount is closer to 10%, assuming the buyer redeems
at the end of the vesting period (of course, Ethereum transaction prices makes
the amounts we&amp;#39;re discussing completely unreleastic, but whatever).&lt;/p&gt;
&lt;p&gt;We&amp;#39;ll note that &lt;a href=&quot;https://olympusdao.medium.com/introducing-olympus-v2-c4ade14e9fe&quot;&gt;v2 bonds&lt;/a&gt; solve this issue by staking the granted amount
immediately, and so there is no loss due to inflation.&lt;/p&gt;
&lt;p&gt;So in this example, 2.343 OHM are emitted (&lt;code&gt;1.01 * 2.32&lt;/code&gt; to account for the DAO
fee), backed by 140$ of market value and 16.73$ of risk-free value (7.14$ per
OHM).&lt;/p&gt;
&lt;p&gt;In this case, the RFV backing per minted OHM (7.14$) is significantly less than
the current RFV backing per OHM (which is 26$). This means that each OHM emitted
in bonding decreases the backing per OHM.&lt;/p&gt;
&lt;p&gt;This is an inherent property of LP bond sales. Stablecoin bond sales, on the
other hand, tend to increase the RFV backing per OHM.&lt;/p&gt;
&lt;h2 id=&quot;olympusdao-valuation&quot;&gt;OlympusDAO Valuation&lt;/h2&gt;
&lt;p&gt;The central question in our analysis is going to be &amp;quot;how should OlympusDAO be
valued?&amp;quot;. Meaning: what should the market cap on the OHM supply be?&lt;/p&gt;
&lt;p&gt;As we shall see, this is not an easy question, given that on one hand the
treasury value is in flux, and the highly dilutive nature of the token on the
other hand.&lt;/p&gt;
&lt;p&gt;There is of course no definitive answer to that question, but we can give many
clues as to what an answer can look like.&lt;/p&gt;
&lt;p&gt;A lot of the data I&amp;#39;m going to use in this analysis, come from the excelent
&lt;a href=&quot;https://dune.xyz/shadow&quot;&gt;Dune dashboards&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/sh4dowlegend&quot;&gt;shadow&lt;/a&gt; (Olympus&amp;#39; policy lead), in particular the
&lt;a href=&quot;https://dune.xyz/shadow/Olympus-(OHM)&quot;&gt;Olympus dashboard&lt;/a&gt; and the Olympus Policy dashboard.&lt;/p&gt;
&lt;h3 id=&quot;olympus-assets&quot;&gt;Olympus&amp;#39; Assets&lt;/h3&gt;
&lt;p&gt;OlympusDAO has three &amp;quot;assets&amp;quot;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the treasury&lt;/li&gt;
&lt;li&gt;the DAO funds&lt;/li&gt;
&lt;li&gt;its &amp;quot;team members&amp;quot; (i.e. the people paid by the DAO to develop OlympusDAO, either by
means of code, marketing, business development, ...)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;First, let&amp;#39;s precise the difference between the treasury and the DAO funds.&lt;/p&gt;
&lt;p&gt;The treasury is by design a reserve that backs the value of OHM. There is no
peg, and so this reserve is allowed to be less than the market cap of OHM (as it
has been for most of its history), or even greater (though this should only be a
temporary aberration, as we&amp;#39;ll argue shortly).&lt;/p&gt;
&lt;p&gt;The DAO funds are accrued via the DAO fee perceived during a bond sale. They are
managed by the DAO&amp;#39;s &lt;a href=&quot;https://docs.olympusdao.finance/main/contracts/dao&quot;&gt;multisig signatories&lt;/a&gt;, which used to be the de facto leaders
of the project. With the introduction of the gOHM token, token governance now
has a purview on how the DAO spends those funds.&lt;/p&gt;
&lt;p&gt;Although I haven&amp;#39;t looked into it, DAO funds are traditionally used to pay the
team and perform other interventions (e.g. usage incentives, strategic token
acquisition, such as CRV or TOKE, etc...).&lt;/p&gt;
&lt;p&gt;However, if the DAO pulls in enough fees to properly fund development, it is
perfectly possible that it could redistribute part of the fee cashflows to users
in various ways (dividends, token buybacks, or a combination of both *).&lt;/p&gt;
&lt;p&gt;*) In Olympus&amp;#39; case, there is an extremely elegant way to do this: use DAO
funds to purchase bonds, then deposit the received OHM in the staking contract
where it will automatically be distributed amongst all stakers (cf. &lt;a href=&quot;https://norswap.com/olympus&quot;&gt;previous
article&lt;/a&gt; to see how this distribution works on a nuts-and-bolt level).&lt;/p&gt;
&lt;p&gt;The team members should only be considered an asset insofar that users are
confident that they are working to accrue value to token holder, whether by
growing the treasury, accruing DAO fees to be redistributed, or other mechanisms
like airdrops.&lt;/p&gt;
&lt;h3 id=&quot;treasury-as-market-cap-floor&quot;&gt;Treasury as Market Cap Floor&lt;/h3&gt;
&lt;p&gt;So, how do we value this?&lt;/p&gt;
&lt;p&gt;Well, Olympus must at least be worth as much as the treasury + the portion of
DAO funds that hasn&amp;#39;t been yet earmarked for a specific use. The DAO fee percent
is currently 0, and though I don&amp;#39;t have the data, I don&amp;#39;t believe it was ever
very high. We&amp;#39;ll thus make the simplifying assumption that its value is
negligible compared to the treasury.&lt;/p&gt;
&lt;p&gt;The project must be worth at least as much as the treasury because, in the worst
case, token holders can vote to dissolve the treasury and compensate OHM and
sOHM holders in proportion of their holdings.&lt;/p&gt;
&lt;p&gt;However, things are not &lt;em&gt;entirely&lt;/em&gt; as simple as this, because the treasury does
contain OHM tokens (underlying half the value of the LP token). &lt;strong&gt;So when the
price of OHM goes down, so the does the market value of the treasury.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The market value doesn&amp;#39;t work as a price floor, but neither does the risk-free
value (RFV, the value when OHM is priced at 1$). That price is actually too
pessimistic.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;In reality, there exists a price &amp;gt; 1$ such that the OHM market cap is equal to
the market value of the treasury.&lt;/strong&gt; Let&amp;#39;s call the treasury value at that price
the &lt;em&gt;sustainable value&lt;/em&gt;.&lt;/p&gt;
&lt;h3 id=&quot;sustainable-value&quot;&gt;Sustainable Value&lt;/h3&gt;
&lt;p&gt;In this section, I will show why the sustainable value exists. We&amp;#39;ll illustrate
how a decreasing OHM price decreases the market value of the treasury, then show
that this decrease is less than the price decrease, meaning that at some point,
the market cap falls below the market value of the treasury. The market value of
the treasury at this point is what we call the sustainable value.&lt;/p&gt;
&lt;p&gt;(If you accept this premise and are not interested in getting more supporting
intuition as to why it is true, feel free to skip this section.)&lt;/p&gt;
&lt;p&gt;The Olympus treasury comprises a lot of LP tokens. The market value of those is
made by half by OHM tokens. This means that as the OHM price drops, so does the
market treasury value.&lt;/p&gt;
&lt;p&gt;Even simple &lt;code&gt;x*y=k&lt;/code&gt; AMMs are not intuitive, so I&amp;#39;ll avoid off on giving a full
exposition. However, to give some intutition, as the price falls and people sell
OHM into the liquidity pool, these three things happen:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The market value of the OHM reserve of the liquidity pool drops.&lt;/li&gt;
&lt;li&gt;The OHM reserves of the pool increase.&lt;/li&gt;
&lt;li&gt;The stablecoin reserves of the pool decrease, by the amount of OHM sold to the
pool at some &amp;quot;average&amp;quot; price between the old OHM price and the new OHM price.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So that&amp;#39;s not great: not only does the value of the whole OHM part decrease, but
the stable reserves also decreases, and decreases more than compensated by the
increase in OHM reserves valued at the new market price.&lt;/p&gt;
&lt;p&gt;Let&amp;#39;s do a simple example for illustration&amp;#39;s sake.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Assume a liquidity pool with 100 OHM valued at $69 each.&lt;/li&gt;
&lt;li&gt;The pool is thus worth (&lt;code&gt;2*100*69 == 13,800$&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Using the &lt;code&gt;x*y = k&lt;/code&gt; AMM formula, we get &lt;code&gt;k == 690,000&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now assume someone sells 10 OHM into the pool.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We have 110 OHM, so to preserve the value of &lt;code&gt;k&lt;/code&gt;, the new amount of
stablecoin becomes &lt;code&gt;690,000 / 110 == 6,272,72&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The new value of the pool is the double of this, i.e 12,544.44.&lt;/li&gt;
&lt;li&gt;The new token price is &lt;code&gt;6,272,72 / 110 == 57.022&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Consequently:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The token price dropped 17.36%&lt;/li&gt;
&lt;li&gt;The pool&amp;#39;s total value dropped by 9%.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that the relationship between those things is not linear and depends on the
parameters (e.g. the impact of a 10 OHM sale would have been smaller on a bigger
pool, although the impact of a sale 10% the size of the pool would have been the
same).&lt;/p&gt;
&lt;p&gt;Using the &lt;a href=&quot;https://dune.xyz/shadow/Olympus-(OHM)&quot;&gt;Olympus Dune dashboard&lt;/a&gt;, we can see that (at the time
of writing) the treasury market value is $484,110,067, while the risk-free
market value is $237,941,247.&lt;/p&gt;
&lt;p&gt;The dashboard does warn that the values might not be accurate because of
the v2 migration. There is some discrepancy from the Olympus app. For
instance, the market cap on dashboard is $710M while it is $680M on the app. The
app seems to put the market value of the treasury (as determined form the
backing per OHM seems a few 10s of % higher).&lt;/p&gt;
&lt;p&gt;So let&amp;#39;s be conservative and say that the RFV of the treasury is 2-4x lower than
its market value.&lt;/p&gt;
&lt;p&gt;So as the OHM price decreases so does the market value of the treasury, albeit
potentially slower than the price.&lt;/p&gt;
&lt;p&gt;Also, the treasury also contains stablecoins in addition to LP tokens, which
means it will fall even slower percentage-wise than the OHM price.&lt;/p&gt;
&lt;p&gt;Because this market value of the treasury decreases slower than the price, it
means there must necessarily exist a price (the &lt;em&gt;sustainable price&lt;/em&gt;) such that
the OHM market cap is equal to the market value of the treasury.&lt;/p&gt;
&lt;p&gt;Because part of the treasury is denominated in stablecoins, and these were
collected the OHM price was much higher than 1$, it does mean that the
sustainable price is higher than 1$, and hence the sustainable value is higher
than the RFV.&lt;/p&gt;
&lt;p&gt;As simple way to see that is that this is like solving the equation &lt;code&gt;100 + 10x = 100x&lt;/code&gt; (e.g. imagine the treasury holds 100$ and 10 OHM and the market cap is 100
OHM, and &lt;code&gt;x&lt;/code&gt; is the OHM price). In this case &lt;code&gt;x = 100 / 90 &amp;gt; 1&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;What this analysis shows is that the &amp;quot;backing per OHM&amp;quot; advertised by Olympus (as
well as the &amp;quot;treasury value&amp;quot; advertised by Wonderland) are misleading since
these value go down when the price goes down. However, the RFV value of the
treasury is too pessimistic as a floor price, since there exist an intermediate
&amp;quot;floor price&amp;quot; where the market cap is equal to the market value of the treasury.&lt;/p&gt;
&lt;h3 id=&quot;the-floor-in-practice&quot;&gt;The Floor in Practice&lt;/h3&gt;
&lt;p&gt;Interestingly, the theory that the market cap should never dip below the market
price (the point at which it dips below being the sustainable price) has been
put to the test recently, as OlympusDAO and its forks experience an accelerating
crash over the past few weeks.&lt;/p&gt;
&lt;p&gt;OlympusDAO is currently hovering at 25% over the market value of the treasury.
&lt;a href=&quot;https://www.wonderland.money/&quot;&gt;Wonderland&lt;/a&gt;, Olympus&amp;#39; biggest and most famous fork, actually &lt;a href=&quot;https://www.coindesk.com/markets/2022/01/18/defis-wonderland-is-buying-time/&quot;&gt;dipped under the
market value of its treasury&lt;/a&gt; and &lt;a href=&quot;https://archive.is/1Av9l&quot;&gt;a vote was held to dissolve the
treasury&lt;/a&gt;, which failed narrowly, but with a majority of holders
against dissolution.&lt;/p&gt;
&lt;p&gt;For context, in addition to the price crash, Wonderland was shaken by the
revelation that &amp;quot;Sifu&amp;quot; — its treasury manager — was a former convicted scammer.&lt;/p&gt;
&lt;p&gt;(As an aside, I consider this vote rational and see it as mostly a vote of
confidence. Since Sifu was removed, as long as you trust the rest of the team
with the treasury, there is no reason to not wait to recapture a premium over
the treasury value. Such rebounds are common in crypto if the project does not
immediately implode. If things don&amp;#39;t improve, the treasury can still be unwound
later — there is a no-cost upside in waiting a little bit.)&lt;/p&gt;
&lt;h3 id=&quot;the-premium-risk-free-rate-and-risk-premium&quot;&gt;The Premium, Risk-Free Rate and Risk Premium&lt;/h3&gt;
&lt;p&gt;If the &lt;em&gt;sustainable value&lt;/em&gt; of the treasury represents a floor for the market
cap, what causes it to rise above that level? This is what we&amp;#39;ll call &lt;em&gt;the
premium&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Basically, in the case of OlympusDAO, a big part of the premium comes from the
team and the possibility of future earnings. If team members roll out new
features or new products that will accrue value to token holders, this
possibility should be captured in the token price.&lt;/p&gt;
&lt;p&gt;The easiest way to think about the premium is that when you buy the token, you
really buy two things: (a) a voucher for a slice of the treasury at its
&lt;strong&gt;current&lt;/strong&gt; (not sustainable) value; and (b) a call option representing the
potential for the sustainable value of the treasury to increase. This call
option part is the premium.&lt;/p&gt;
&lt;p&gt;In particular, the call option part represent the expectation that the treasury
backing per inflation-indexed token (gOHM) will increase. It&amp;#39;s important to only
consider gOHM, not OHM, because there is no expected backing increase per OHM —
since it inflates so much due to the rebases.&lt;/p&gt;
&lt;p&gt;There are a few ways the backing per gOHM could increase:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;new initiatives increase the value of the treasury without dilution&lt;/li&gt;
&lt;li&gt;yield farming with the treasury&lt;/li&gt;
&lt;li&gt;venture capital investments with the treasury&lt;/li&gt;
&lt;li&gt;bond sales, as long as the current premium is higher than the bond discount&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Olympus actually rolled out an initiative that increased the treasury value at
no cost or dilution to token holders, in the form of &lt;a href=&quot;https://www.olympusdao.finance/pro&quot;&gt;OlympusPro&lt;/a&gt;, a side
product that allowed other protocols to conduct their own bond sales based on
the Olympus model. The Olympus treasury captures a 3.3% fees on every bond sale
conducted on Olympus Pro.&lt;/p&gt;
&lt;p&gt;Another potential source of premium is the utilization of treasury funds to
generate yield.&lt;/p&gt;
&lt;p&gt;Here we need to be careful, because it wouldn&amp;#39;t make sense to say that the
treasury funds can be used for yield farming (e.g. lending on Aave for a 5% APY)
and thus the premium should increase accordingly.&lt;/p&gt;
&lt;p&gt;The idea here is that the yield farming opportunity is also open to you. Say you
have stablecoins sitting around, instead of buying gOHM (or equivalently, buying
and staking OHM), you could yield farm yourself. &lt;strong&gt;The premium should only
capture returns in excess of that yield.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In traditional finance, this notion is known as the &amp;quot;risk-free rate&amp;quot; and is
typically given by the yield on AAA-rated treasury bonds, in particular the US
treasury bonds.&lt;/p&gt;
&lt;p&gt;(If you&amp;#39;re interested in treasury bonds and how they behave, see my previous
article on the topic: &lt;a href=&quot;https://norswap.com/bonds/&quot;&gt;one&lt;/a&gt;, &lt;a href=&quot;https://norswap.com/bonds-2/&quot;&gt;two&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;This is not to say Olympus shouldn&amp;#39;t yield farm. Quite the opposite: it&amp;#39;s much
easier to produce excess return on the risk-free rate if you just happen to have
funds that you can yield farm with to produce this rate in the first place.&lt;/p&gt;
&lt;p&gt;In fact, &lt;a href=&quot;https://twitter.com/quasicypher1/status/1486737670088896517&quot;&gt;Olympus &lt;em&gt;is&lt;/em&gt; yield farming&lt;/a&gt; (see also &lt;a href=&quot;https://twitter.com/ohmzeus/status/1486744382825017349&quot;&gt;this
remark&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Now, there is nothing such as a &lt;em&gt;risk-free&lt;/em&gt; return in crypto. You&amp;#39;re always at
least taking smart contract risk (bugs, hacks).&lt;/p&gt;
&lt;p&gt;However it&amp;#39;s fair to consider that buying OHM high abvoe the sustainable rate is
riskier than yield farming on Aave. If we consider that both projects have been
extremely well audited, then OHM additionally exposes you to price (premium!)
volatility. You need to be compensate for that risk, and that is the &lt;em&gt;risk
premium&lt;/em&gt; (not the same thing as the OHM price premium over the sustainable
price!).&lt;/p&gt;
&lt;p&gt;Finally, another source of premium would be to conduct venture capital (VC)
investments using the treasury. Here the premium stems from a few factor:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The treasury is large, which makes OlympusDAO a privileged partner compared to
poorer individual investors.&lt;/li&gt;
&lt;li&gt;The treasury is also large enough that it can diversify by betting on numerous
projects, which is central to the sustainability of the venture capital model
(where you only have a few winners that make up for all your losers).&lt;/li&gt;
&lt;li&gt;The OlympusDAO team is talented and probably better able to determine a
project&amp;#39;s odds of success than the average OHM holder.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Though it has been discussed online, there is no indication at the moment that
the Olympus team intends to engage in venture capital investments.&lt;/p&gt;
&lt;p&gt;Last, but not least, the sustainable backing per OHM increases naturally via
bond sales, as long as the discount price is lower then the current premium,
i.e. as long a bonds are sold for more than the sustainable backing per OHM.&lt;/p&gt;
&lt;p&gt;This mechanism is the main driver of treasury growth, and we will revisit it
&lt;a href=&quot;https://norswap.com/olympus-econ/#evolution-of-the-backing-per-gohm&quot;&gt;below&lt;/a&gt;. Unlike the previous mechanisms, it
is &amp;quot;dilutive&amp;quot; in the sense that it mints new tokens — although if the backing
per gOHM increases, this is not really a problem.&lt;/p&gt;
&lt;h3 id=&quot;pricing-gohm&quot;&gt;Pricing gOHM&lt;/h3&gt;
&lt;p&gt;Let&amp;#39;s put all the pieces from the last section (premium, risk-free rate and risk
premium) together and attempt to see if we can come with a &amp;quot;fair&amp;quot; price for
gOHM, given our assumptions as investors.&lt;/p&gt;
&lt;p&gt;Let&amp;#39;s assume, for simplicity sake, that the sustainable price of gOHM is 100$ at
present, and you expect the sustainable price to increase by 50$ over your
investment horizon (say one year). How much should be willing to buy gOHM for?&lt;/p&gt;
&lt;p&gt;A naive (and wrong) answer to this would be to say that any price under 150$ is
fine, as it will net you a you profit. This is wrong for a two reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;At your point of reference in the future, gOHM should still trade at a
premium, so if the sustainable value is 150$, the price of gOHM will be higher
than that.&lt;/li&gt;
&lt;li&gt;If on the other hand, if we assume that the premium will be 0, it&amp;#39;s still
wrong to purchase at say 149$, because you&amp;#39;re only making a &lt;code&gt;1/149 = 0.6%&lt;/code&gt;
return. This is much less than the risk-free rate (e.g. 5%).&lt;/li&gt;
&lt;li&gt;But buying so that you make exactly the risk-free rate is also wrong. You&amp;#39;re
taking significantly more risk by buying OHM, therefore you should expect
higher returns to compensate you for that risk (the &lt;em&gt;risk premium&lt;/em&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Therefore your buy price should be any price under:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;expected_sustainable_treasury_backing * (1 + expected_premium) - current_price * (risk_free_rate + risk_premium)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Where &lt;code&gt;expected_premium&lt;/code&gt;, &lt;code&gt;risk_free_rate&lt;/code&gt; and
&lt;code&gt;risk_premium&lt;/code&gt; are percentages (quantities between 0 and 1).&lt;/p&gt;
&lt;p&gt;Therefore, to value gOHM, you need to make the following predictions/decisions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How much will the (sustainable) treasury backing per gOHM increase?&lt;/li&gt;
&lt;li&gt;How will the premium change?&lt;/li&gt;
&lt;li&gt;What are my &amp;quot;risk-free&amp;quot; alternatives? i.e., what do I use as risk-free rate?&lt;/li&gt;
&lt;li&gt;How risky is the investment? i.e., what risk premium do I demand in order to
feel like the potential upside is worth the risk?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let&amp;#39;s plug in some numbers. Say the current premium is 25% (so the price is
125$) and I expect this to remain stable. Say I consider 5% to be my risk-free
rate, and I&amp;#39;d like to be compensated at 10% for the risk I&amp;#39;m taking. Then you
get:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;150 * (1 + 0.25) - 125 * (0.05 + 0.1) = 168.75&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Since the current price (125$) is less than 168.75$, you should buy gOHM, and if
all your predictions are uncannily accurate, the token will be worth &lt;code&gt;150 * 1.25 = 187.5$&lt;/code&gt; in a year. You will sell for a 62.5$ profit, which is a 50% return
rate — as expected since the backing increased 50% and the premium didn&amp;#39;t
change. This is higher than your desired 15% return rate (5% risk-free rate +
10% risk premium).&lt;/p&gt;
&lt;h3 id=&quot;evolution-of-the-backing-per-gohm&quot;&gt;Evolution of the Backing per gOHM&lt;/h3&gt;
&lt;p&gt;The formula above asks you to predict the future sustainable backing per gOHM.
Let&amp;#39;s now look at how you could do that. The value actually depends on a couple
of factors:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The percentage of the OHM supply staked (this has been fairly stable at &lt;a href=&quot;https://dune.xyz/shadow/Olympus-(OHM)&quot;&gt;90%
for most of of Olympus&amp;#39; history&lt;/a&gt;, though it has dipped to
the low 80s over the last month. The lower the percentage of the supply
staked, the faster stakers (hence gOHM holder) accrue ownership over the
total supply at the expense of non-stakers. At 90%, the return rate is 6.6%.&lt;/li&gt;
&lt;li&gt;The dilution incurred by LP bond sales.&lt;/li&gt;
&lt;li&gt;The amount of bond token sales, and their discount rate.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;One big question to solve here is &amp;quot;who are the non-stakers?&amp;quot;. I actually expect
that a significant part of the non-staked supply is made of the OHM token
backing the LP tokens owned by the treasury!&lt;/p&gt;
&lt;p&gt;This explanation fits perfectly the fact that the staking percentage decreased
over the last month: as OHM price decreased, the amount of OHM underlying the LP
token naturally increased (as OHM was traded in in exchange for stablecoins)!&lt;/p&gt;
&lt;p&gt;This means that even the increased ownership for stakers comes at the expense of
the treasury (whose OHM tokens keep diluting). I think it&amp;#39;s fair to model the
return on staking as essentially nil, but preventing rebase-induced dilution.&lt;/p&gt;
&lt;p&gt;So we&amp;#39;re left with bonding.&lt;/p&gt;
&lt;p&gt;The sustainable backing by gOHM can either increase or decrease from bond sales,
depending on whether the increase in the sustainable treasury value compensates
the dilution incurred by the bond sale.&lt;/p&gt;
&lt;p&gt;It depends on the current premium and the bond discount: if the discount is
smaller than the premium, then the backing per newly minted OHM is higher than
the current sustainable backing per OHM (therefore very slightly increasing to
total backing per OHM). If on the other hand the discount is higher than the
discount, then the backing per OHM decreases.&lt;/p&gt;
&lt;h3 id=&quot;modelling-the-premium&quot;&gt;Modelling the Premium&lt;/h3&gt;
&lt;p&gt;There is one question that all of the above doesn&amp;#39;t really answer directly — how
large should the premium be?&lt;/p&gt;
&lt;p&gt;Well, imagine all investors run the above calculation. Each of them will come up
with their own &amp;quot;acceptable&amp;quot; premium. In our example that would have been 68.5%
(&lt;code&gt;(168.5 - 100) / 100&lt;/code&gt;). The actual premium will be the premium such that no one
will sell any investor OHM with a premium lower than their premium of choice.&lt;/p&gt;
&lt;p&gt;In (the messy and complex) reality, investors will need to try to anticipate
what this premium will be in order to price their own premium of choice. This
makes the whole market pricing affair a reflective process known as a &lt;a href=&quot;https://en.wikipedia.org/wiki/Keynesian_beauty_contest&quot;&gt;Keynesian
beauty contest&lt;/a&gt;. If you&amp;#39;re more mathematically inclined, you could also
say the market price is the result of a &lt;a href=&quot;https://en.wikipedia.org/wiki/Fixed_point_(mathematics)&quot;&gt;fixed-pointed computation&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Now, we could also look at the premium from another angle. And that is: how is
the premium expected to change as the treasury increases or decreases?&lt;/p&gt;
&lt;p&gt;The key question is whether the premium should be flat (since the team&amp;#39;s ability
to deliver new successful projects is only very weakly correlated with the size
of the treasury), or proportional to the treasury size (in the case of venture
capital investments).&lt;/p&gt;
&lt;p&gt;Since both of these make sense, a simple model of the premium would be one where
the premium decreases as the treasury grow. In this model, the excess value
incurred by the premium (i.e. &lt;code&gt;premium * sustainable_treasury&lt;/code&gt;) grows along with
the treasury, but at a decreasing rate. Think of square-root like functions.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://norswap.com/olympus-econ/square_root.svg&quot; alt=&quot;square root function&quot;&gt;&lt;/p&gt;
&lt;p&gt;This decrease in growth represents the fact that the team&amp;#39;s potential does not
increase linearly with the treasury (you could hire more people, but it&amp;#39;s well
established that company productivity does not scale linearly with the number of
hires). It also represents the fact that there are diminishing returns when you
sling around a large amount of capital: the yield farming returns tend to be
lower, which decreases your edge on the &amp;quot;risk-free&amp;quot; rate. Similarly, quality
venture capital opportunities might dry up.&lt;/p&gt;
&lt;p&gt;A more complete model should probably take into account that if the treasury
value is low, then the premium should grow faster than the treasury (as it
enables new essential hires, new venture capital opportunities, etc). However,
Olympus&amp;#39; treasury is already large ($484M), so we&amp;#39;ll eschew this part of the
model.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Ok. All good and fair, but concretely, what would a good premium be for Olympus
today?&lt;/p&gt;
&lt;p&gt;One answer to that is that you just run the price calculation from above. But to
do that, you need to estimate what the premium will be!&lt;/p&gt;
&lt;p&gt;Well, I&amp;#39;m a bit of a loss here.&lt;/p&gt;
&lt;p&gt;First of all, investors are not rational, and I feel fairly confident to say
many (most?) of them never really did understood how Olympus worked. The price
is still a reflective process of investor&amp;#39;s willingness to pay, but without
common knowledge (such as this blogpost! though at this point I have to wonder
how many investors will read this novel I have written), it&amp;#39;s hard to know what
investors will think — more likely their willingness to pay will be ruled by
momentum, hype, FOMO and FUD.&lt;/p&gt;
&lt;p&gt;The current premium of 25% over the market rate doesn&amp;#39;t feel particularly
extreme to me, neither does it feel particularly low. Note that this is a
premium over the &lt;em&gt;market value&lt;/em&gt;, not the &lt;em&gt;sustainable value&lt;/em&gt; (which I haven&amp;#39;t
computed — reach out if you feel like doing that!).&lt;/p&gt;
&lt;p&gt;Looking at Olympus Pro, it has so far yield about $2M in fees, or about 0.5% of
the treasury size. Since it was introduced 4 months ago, we can extrapolate that
it will yield about 1.5% of the treasury value over a year. If the Olympus team
introduces some new products, these returns could start adding up.&lt;/p&gt;
&lt;p&gt;Additionally, one should look at the returns that OlympusDAO is getting on its
&lt;a href=&quot;https://twitter.com/quasicypher1/status/1486737670088896517&quot;&gt;yield farming activities&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you have opinions on this (backed with data) — I&amp;#39;d be interested to talk to
you!&lt;/p&gt;
&lt;h2 id=&quot;olympus-in-the-long-run&quot;&gt;Olympus in the Long Run&lt;/h2&gt;
&lt;p&gt;How can we expect Olympus to behave in the long run?&lt;/p&gt;
&lt;p&gt;Well, the fact of the matter is that OHM is designed to inflate until its price
drops to 1$. This path could however be stretched indifinitely if the team
decides to drastically lower the rebase rate. If they lower this rate enough,
then the earnings from fees on bond sales (both from Olympus and Olympus Pro),
the treasury value could increase faster than OHM dilutes.&lt;/p&gt;
&lt;p&gt;In the case where the rebase rate stays high, then OHM will decrease in price
until it reaches 1$. This is not super relevant: as I&amp;#39;ve argued before, it&amp;#39;s the
price of gOHM (indexed, inflation-protected OHM) that is relevant!&lt;/p&gt;
&lt;p&gt;When the price of OHM reaches 1$, a backstop prevents any further inflation,
whether via discounted bounding or via rebasing. This would be rather crippling
for the protocol so I would expect the team to take some measures before that
happens (whether that&amp;#39;s curbing the rebase rate, or something else).&lt;/p&gt;
&lt;p&gt;Other than that... it could continue chugging along and raising money via bond
sales. At the end of the day, gOHM is a voucher to a portion of the underlying
treasury and a call option to speculate on the fluctuation of the premium.&lt;/p&gt;
&lt;p&gt;The real question for Olympus and OHM holders is what the team is going to come
out with next! The team has plans, see the &lt;a href=&quot;https://norswap.com/olympus-econ/#further-reading&quot;&gt;Further Reading&lt;/a&gt;
section!&lt;/p&gt;
&lt;p&gt;As for questions of price, there are two questions of interest:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;How fast can the sustainable treasury value increase?&lt;/li&gt;
&lt;li&gt;How will the premium evolve?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;At present, the answer to (2) is purely a question of market psychology, meaning
keeping a finger on the pulse of the hype. Crypto markets are not super mature
yet, and Olympus is still relatively niche amongst crypto markets.&lt;/p&gt;
&lt;p&gt;More surprisingly, (1) similarly depends and on the premium, and thus on hype.
When the premium is high, the sustainable treasury value increases rapidly.
Similarly, I would expect more bonds to be sold when the hype is high and the
price is on the uptrend.&lt;/p&gt;
&lt;h2 id=&quot;on-the-uselessness-of-rebases&quot;&gt;On the Uselessness of Rebases&lt;/h2&gt;
&lt;p&gt;At this point, I want to emphasize something that has been implied, but hasn&amp;#39;t
been made crystal clear at this point: staking and rebases are absolutely
useless in Olympus, and serve no purpose besides creating hype and a narrative
based on widespread misunderstanding of Olympus&amp;#39; mechanics.&lt;/p&gt;
&lt;p&gt;As an Olympus dev &lt;a href=&quot;https://twitter.com/_nd_go/status/1488060799096696833&quot;&gt;says&lt;/a&gt;: &amp;quot;I think one of the biggest mistakes the
DAO made was allowing the APY become the focus of anything.&amp;quot;&lt;/p&gt;
&lt;p&gt;Basically, staking protects the inflation created by rebases. It&amp;#39;s both the
poison and the cure.&lt;/p&gt;
&lt;p&gt;Since not 100% of the supply is staked, staking does entail a transfer of
ownership from non-stakers to stakers. But as mentionned before, it&amp;#39;s likely
that most of the unstaked supply lives in LP pools whose tokens are owned by the
Olypus treasury. Which means the small ownership increase gets cancelled by a
loss of value of the treasury.&lt;/p&gt;
&lt;p&gt;One thing this achieves, however is to disincentivize anyone but Olympus to
provide liquidity. I&amp;#39;m not sure how good or bad that is... On the one hand,
Olympus can monopolize the transfer fees, on the other hand, that&amp;#39;s just less
liquidity period.&lt;/p&gt;
&lt;p&gt;This last point is also moot with the introduction of gOHM since you can now
provide liquidity for gOHM which wraps staked OHM.&lt;/p&gt;
&lt;p&gt;In general, the whole existance of gOHM calls the usefulness of rebases into
question, since it abstracts away the whole rebase/staking mechanic.&lt;/p&gt;
&lt;p&gt;I think rebases (inherited from &lt;a href=&quot;https://www.ampleforth.org/&quot;&gt;Ampleforth&lt;/a&gt;) were included because OHM was
envisioned as some kind of stablecoin. But at present, Olympus doesn&amp;#39;t perform
rebases that lower user balances (which would be necessary to let the price dip
below 1$ and bring it back to that level).&lt;/p&gt;
&lt;h2 id=&quot;on-the-usefulness-of-bonding&quot;&gt;On The Usefulness of Bonding&lt;/h2&gt;
&lt;p&gt;We haven&amp;#39;t talked about this much, but one of Olympus&amp;#39; big idea was &amp;quot;buy
liquidity, don&amp;#39;t rent it&amp;quot;.&lt;/p&gt;
&lt;p&gt;This is based on the observation that liquidity providers can be quite
mercenary, and will move their liquidity elsewhere once incentivization stops.
Hence you&amp;#39;re only ever &amp;quot;renting liquidity&amp;quot;. And as we all know, in the long
term, renting is more expensive than buying outright.&lt;/p&gt;
&lt;p&gt;The idea makes a lot of sense, and for projects where you can expect a high
enough premium, bonding can make a lot of sense.&lt;/p&gt;
&lt;p&gt;It solves two fundamental problems:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Raising all the capital upfront means good project get a bad deal. Since your
project is completely unproven, it will necessarily be valued with a lot of
circonspection. (Although sometimes, the opposite is true, where project is
overvalued on the basis of hype...) Raising money as you go with bonds, in a
way that is not (or not very) dilutive to token holders can make a lot of
sense for growth-oriented projects.&lt;/li&gt;
&lt;li&gt;It removes the problem of deciding when, how, how much, and from who to raise.
(Olympus&amp;#39; founder Zeus made &lt;a href=&quot;https://twitter.com/ohmzeus/status/1479888653304303617&quot;&gt;this very same point&lt;/a&gt;). Instead, the
decision is made by a pre-determined algorithm. An hybrid mode is possible,
where a project decides on a number of bonds to be sold, and lets the
algorithm figure out the execution.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now, some caveats.&lt;/p&gt;
&lt;p&gt;First of all, not every project is shaped as Olympus, i.e. as a big pot of
money. Many project pass their revenues directly to the users, and only keep a
small amount in the treasury (which are equivalent to the Olympus&amp;#39;s DAO funds).
The model can still work for these project, but the premium has to be modelled
on the basis of return on capital instead.&lt;/p&gt;
&lt;p&gt;Second, it&amp;#39;s not quite clear that the way Olympus does bond sales (on the basis
of the bond control value and the debt ratio) is necessarily the best way. I can
imagine much simpler mechanisms to achieve the same goals (e.g. a &lt;a href=&quot;https://en.wikipedia.org/wiki/Dutch_auction&quot;&gt;Dutch
auction&lt;/a&gt; where each successful purchase bumps the price back up). The model is
not obviously wrong either, it&amp;#39;s just not obvious (to me) that it is the best.&lt;/p&gt;
&lt;p&gt;I do expect that Olympus Pro offers more flexibility on this matter, but I
haven&amp;#39;t reviewed that codebase.&lt;/p&gt;
&lt;h2 id=&quot;further-reading&quot;&gt;Further Reading&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://fbifemboy.substack.com/p/a-correct-model-of-olympus-dao&quot;&gt;A correct model of OlympusDAO&lt;/a&gt;: A harsher (but oh so much
terser) criticism of OlympusDAO than I make, to which I nevertheless subscribe
excepted for valuation purposes. The memes criticized here are not dead
though, as evidenced by &lt;a href=&quot;https://twitter.com/ishaheen10/status/1495286382964576256&quot;&gt;this presentation&lt;/a&gt; of OHM (which isn&amp;#39;t bad,
but parrots the kool-aid a bit too much).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://twitter.com/ohmzeus/status/1486886116598890498&quot;&gt;Zeus on Healthy Debt&lt;/a&gt;: the cascading liquidations of loans
secured against an OHM collateral was a big driver in the OHM price crash.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://hackmd.io/@HMyg0dxkQ96YOMpI30o8PA/mbga&quot;&gt;Liquid Interest Rate Markets through Olympus Bonds&lt;/a&gt; (+ &lt;a href=&quot;https://forum.olympusdao.finance/d/1061-exploring-a-bond-centric-future&quot;&gt;governance
discussion&lt;/a&gt;): A whitepaper by Zeus and Indigo from the Olympus team.
It proposes &amp;quot;an evolution from the existing staking-centric model in favor of
a bond-centric model&amp;quot;, showing that the OlympusDAO leadership is aware of the
issues raised in this piece. I&amp;#39;m under the impression they willingly downplay
(or maybe are still deluded about) the uselessness of staking while at the
same time phasing it out in favour of &amp;quot;internal OHM bonds&amp;quot; which are
fixed-term bonds purchased in OHM that give a return in OHM (just like US
treasury bonds, but using OHM instead of USD). The big advantage there is
locking away the part of the supply used to purchase bonds (whereas staking if
fully liquid — users can stake and unstake instantly). Another one is that you
can emit many more bonds (and thus grow the treasury faster), because it turns
out most bond purchasers unstake &amp;amp; sell OHM to buy bonds (I had no idea!),
essentially arbitraging bonding against staking. This whitepaper covers much
more and honestly deserves its own article!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://olympusdao.medium.com/olympus12-building-a-strong-ecosystem-around-a-web3-native-reserve-currency-416f58175e74&quot;&gt;Olympus12: Building a Strong Ecosystem Around a Web3-Native Reserve
Currency&lt;/a&gt;: outlines a strong (imho) and extremely interesting
action plan for bolstering the economics of OlympusDAO going forward. I do
think the success of the plan hinges on whether they will manage to convince
projects and people to effectively treat OHM (more like gOHM) as a token to
put on the balance sheet / in their long-term portfolio, and not just
speculation &amp;amp; arbitrage. With the right mix of incentives and interesting use
cases, they might be able to.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;coda&quot;&gt;Coda&lt;/h2&gt;
&lt;p&gt;And that&amp;#39;s a wrap! Thanks for following this far! If you&amp;#39;ve liked this, you
might like some of my other &lt;a href=&quot;https://norswap.com/finance&quot;&gt;finance writings&lt;/a&gt;. If you want to keep up with my
new stuff, subscribe to the RSS feed or &lt;a href=&quot;https://twitter.com/norswap&quot;&gt;follow me on Twitter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I hope that after reading this, you&amp;#39;ll understand a bit better how Olympus
behaves economically and how it can be valued.&lt;/p&gt;
&lt;p&gt;To conclude with some more personal opinions, I think OlympusDAO was a project
whose theory was pretty ill-conceived. You can tell by the confused discourse
around it (including the official discourse), and the uselessness of staking as
a mechanic. Ironically, this confusion and the high APY hype allowed it to be
successful.&lt;/p&gt;
&lt;p&gt;Nevertheless, the bonding mechanism is pretty solid and interesting. And am I
impressed by the humility of the team and the plan they are making to further
improve the project. I would be surprised is this is the last we heard of
OlympusDAO.&lt;/p&gt;
      </description>
      <pubDate>2022-02-27T23:00:00.000Z</pubDate>
      <link>http://norswap.com/olympus-econ</link>
      <guid isPermaLink="true">http://norswap.com/olympus-econ</guid>
    </item>
    <item>
      <title>Olympus DAO from Primary Sources</title>
      <description>
&lt;p&gt;If you&amp;#39;re following &lt;a href=&quot;https://ethereum.org/en/defi/&quot;&gt;decentralized finance (aka DeFi)&lt;/a&gt;, you&amp;#39;ve probably heard
about &lt;a href=&quot;https://www.olympusdao.finance/&quot;&gt;OlympusDAO&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;OlympusDAO describes itself as a &amp;quot;decentralized reserve currency&amp;quot;. In the
non-crypto worlds, a &lt;a href=&quot;https://en.wikipedia.org/wiki/Reserve_currency&quot;&gt;reserve currency&lt;/a&gt; is a foreign currency held by other
governments to back and stabilized their own currency. Interestingly, OHM is
itself a currency backed by a reserve (&amp;quot;the treasury&amp;quot;) of other assets (mostly
stablecoin and OHM-stable &lt;a href=&quot;https://www.google.com/search?hl=en&amp;amp;q=lp%20tokens&quot;&gt;LP tokens&lt;/a&gt;, but also some ETH). I don&amp;#39;t think Olympus
works as a reserve currency at all, but I will defer this discussion to another
article.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;In this article, I want to look at what Olympus actually does, and I want to
do so by digging straight into the code.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I&amp;#39;m doing this because OlympusDAO has been the subject of a lot of talk over its
short history, but I never really manage to understand how it works. There is a
lot of narrative to be found, but very little mechanistic explanations — at
least not enough to answer most of my question. What I read about it also didn&amp;#39;t
seem to make sense from an economic standpoint, but this was impossible to
determine without establish ground truth on OlympusDAO&amp;#39;s inner workings.&lt;/p&gt;
&lt;p&gt;So why were people talking about Olympus you ask? First, look at this chart:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://norswap.com/olympus/ohm-price.png&quot; alt=&quot;OHM price chart&quot;&gt;&lt;/p&gt;
&lt;p&gt;Quite volatile (up 4x, down 6x, up 6x, down 12x), but nothing extraordinary for
crypto. No, what is incredible is that this is while OlympusDAO was offering
&lt;a href=&quot;https://hackernoon.com/earning-passive-income-with-defi-staking-an-overview-4a1y3720&quot;&gt;stakers&lt;/a&gt; interest rates (aka &lt;a href=&quot;https://www.investopedia.com/terms/a/apy.asp&quot;&gt;APY&lt;/a&gt;) of thousands of percents (&amp;gt; 1700% as we
speak). These interest rates are, importantly, denominated in OHM. Who wouldn&amp;#39;t
be enticed?&lt;/p&gt;
&lt;p&gt;However, all of this comes with a caveat, in a word: inflation.&lt;/p&gt;
&lt;p&gt;Over the last week, OlympusDAO (and its forks, most notably &lt;a href=&quot;https://www.wonderland.money/&quot;&gt;Wonderland&lt;/a&gt;) have
come under fire for the massive drop in prices they have experienced, putting
the market cap of OHM very close to the value of its treasury (which logically
is the smallest possible price, just how a company should at least be worth at
least at much as its assets minus its debts). Wonderland even periodically
dipped under its treasury value.&lt;/p&gt;
&lt;p&gt;The market capitalization chart (which is in many ways much more relevant than
the price charts, because of inflation) for OHM tells of its meteoric rise, and
recent fall:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://norswap.com/olympus/ohm-market-cap.png&quot; alt=&quot;OHM market capitalization chart&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;In a subsequent article, I will dive deep into the economics of OlympusDAO and
how the current situation is not all that surprising.&lt;/strong&gt; I will say right now
that I do not think Olympus is a scam or a ponzi scheme (which many people
accuse it of being). I do think the communication about the project has been
somewhat deceitful. At the very least, impressive elements — like the
OHM-denominated APY — have been emphasized, while immense caveats have been
ommitted from the discourse.&lt;/p&gt;
&lt;h2 id=&quot;summary-of-findings&quot;&gt;Summary of Findings&lt;/h2&gt;
&lt;p&gt;This is going to be a long and technical article. For those that are just
interested in the take aways, here they are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The total supply of $OHM inflates at the &lt;em&gt;staking reward rate&lt;/em&gt; every ~8
hours. This inflation is redistributed among stakers. The inflation
distribution event that happens every 8 hours is called &lt;em&gt;a rebase&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;The staking reward rate is set by the OlympusDAO policy team. For the longest
time, this reward rate was 0.35%. It is currently 0.2%, on its way down to a
target of 0.16%. At 0.35%, this implies an inflation of 4487%. This is also
the minimum staking APY in OHM (if 100% of the OHM is staked, otherwise it
will be higher). At 0.16%, this implies a 475% inflation (yup — exponentials
are weird).&lt;/li&gt;
&lt;li&gt;OlympusDAO has a treasury composed of stablecoins and OHM-stablecoin
&lt;a href=&quot;https://www.gemini.com/cryptopedia/what-is-a-liquidity-pool-crypto-market-liquidity&quot;&gt;liquidity pool (LP) tokens&lt;/a&gt;. The treasury is constituted by
selling bonds (see below).&lt;/li&gt;
&lt;li&gt;A central concept is the &amp;quot;risk-free value&amp;quot; (RFV) of the treasury. This is simply
1$ for stablecoin. For LP tokens, it is the price the token would take if the
OHM price fell to 1$. Controversially, this means that part of the RFV of the
treasury is made of OHM tokens (in the liquidity pools).&lt;/li&gt;
&lt;li&gt;Rebases can only go through if there is 1$ of risk-free value in the treasury
for each OHM in existence including the newly-minted ones. This sets a
soft-floor if 1$ on the OHM price, assuming that the OHM market cap should
always be at least as large as the risk-free value of the OHM treasury.&lt;/li&gt;
&lt;li&gt;The protocol maintains a metric called &amp;quot;the index&amp;quot; which is how much OHM you
would own if you staked a single OHM on the day the protocol launched
(currenty 74). Recently, Olympus launched the gOHM (&amp;quot;governance OHM&amp;quot;) which
&amp;quot;wraps&amp;quot; the indexed amount of staked OHM. The main avowed purpose was to
enable the trading of staked OHM on other chains.&lt;/li&gt;
&lt;li&gt;Staking comes with an optional warm-up period (currently disabled) which
forces people to wait a configurable amount of time before their OHM tokens
are staked.&lt;/li&gt;
&lt;li&gt;At any time, people can purchase OHM bonds using various stablecoins and
OHM-stablecoin &lt;a href=&quot;https://www.google.com/search?hl=en&amp;amp;q=lp%20tokens&quot;&gt;LP tokens&lt;/a&gt;. The policy team can add, remove or tweak these
bond markets. The bonds are usually sold as a small discount to
the OHM market price. The bonds grant newly minted OHM tokens to the buyer.
These tokens vest over a configurable period, which has always been 5 days.&lt;/li&gt;
&lt;li&gt;The DAO takes a (configurable) fee over every bond sale, although this is
currently set to 0, and it&amp;#39;s rather hard to search historical state to see if
it was ever set differently.&lt;/li&gt;
&lt;li&gt;Bond pricing uses a notion of risk-free value (RFV). The risk-free value of
stablecoins is equivalent to their market value. For LP tokens however,
Olympus assumes a worst-case scenario where OHM is worth 1$, and prices the
LP tokens accordingly.&lt;/li&gt;
&lt;li&gt;Bonds are priced differently depending on the token used to purchase the
bonds. The bond price is determined by the formula &lt;code&gt;bondPrice = min(BCV * debtRatio + 1, minimumPrice)&lt;/code&gt;, where:&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;One bond grants one OHM after the vesting period.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For simplicity, I ignore the decimals on &lt;code&gt;minimumPrice&lt;/code&gt; and &lt;code&gt;bondPrice&lt;/code&gt;
(assume those are infinite precision numbers), and assume that &lt;code&gt;debtRatio&lt;/code&gt;
is a value between 0 and 1.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;BCV&lt;/code&gt; is the bond control variable, set by the policy team for each token&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;debtRatio&lt;/code&gt; is a ratio between (a) the risk-free value of all tokens used for
bond purchases (tallied at the moment of purchase) scaled by the remaining
vesting time; and (b) the total OHM supply.&lt;/p&gt;
&lt;p&gt;Note that the numerator and the denominator have different units (risk-free
USD and OHM), and consequently, the debt ratio rises faster when the OHM
price is high.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;minimumPrice&lt;/code&gt; — as the name indicates. However, once a bond purchases occurs
above the minimum price, it is then set to 0, allowing subsequent purchases
to occur below the bond price.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;   There is maximum amount of debt (denominated in risk-free value) allowed per
   token, preventing the emission of too many bonds, and offering some
   protection against attacks (e.g. if a stablecoin was to lose his peg).&lt;/p&gt;
&lt;p&gt;   Because the formula is not based on the market price of OHM, the bond price
   can occasionally exceed the market price!&lt;/p&gt;
&lt;p&gt;I tried to explicitly stay away from the economical implications. As said
before, these will be the subject of a subsequent article!&lt;/p&gt;
&lt;p&gt;In what follows, I will dive into the contracts themselves. Together, we&amp;#39;ll
learn where all of the above functionality is implemented, and how.&lt;/p&gt;
&lt;h2 id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://norswap.com/olympus/#&quot;&gt;Top&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://norswap.com/olympus/#summary-of-findings&quot;&gt;Summary of Findings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://norswap.com/olympus/#olympus-v11-vs-olympus-v2&quot;&gt;Olympus v1.1 vs Olympus v2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://norswap.com/olympus/#contracts&quot;&gt;Contracts&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://norswap.com/olympus/#v11-contracts&quot;&gt;v1.1 Contracts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://norswap.com/olympus/#v2-contracts&quot;&gt;v2 Contracts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://norswap.com/olympus/#upgrade-paths&quot;&gt;Upgrade Paths&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://norswap.com/olympus/#basics--staking&quot;&gt;Basics &amp;amp; Staking&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://norswap.com/olympus/#intro-to-rebases--sohm-balances&quot;&gt;Intro to Rebases &amp;amp; sOHM Balances&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://norswap.com/olympus/#staking--unstaking&quot;&gt;Staking &amp;amp; Unstaking&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://norswap.com/olympus/#rebases-in-depth&quot;&gt;Rebases in Depth&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://norswap.com/olympus/#locker&quot;&gt;Locker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://norswap.com/olympus/#sohm-index&quot;&gt;sOHM Index&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://norswap.com/olympus/#bonding&quot;&gt;Bonding&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://norswap.com/olympus/#stablecoin-bond-pricing&quot;&gt;Stablecoin Bond Pricing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://norswap.com/olympus/#liquidity-token-bond-pricing&quot;&gt;Liquidity Token Bond Pricing&lt;/a&gt;
(This section explains the Risk-Free Value computation for bonds.)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://norswap.com/olympus/#bonding-in-depth&quot;&gt;Bonding in Depth&lt;/a&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://norswap.com/olympus/#1-checking-against-the-maximum-debt&quot;&gt;Checking against the maximum debt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://norswap.com/olympus/#2-calculate-the-bond-price&quot;&gt;Calculate the bond price&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://norswap.com/olympus/#3-calculate-the-market-value-USD-bond-price&quot;&gt;Calculate the market-value USD bond price&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://norswap.com/olympus/#4-calculate-the-payout-and-dao-fee&quot;&gt;Calculate the payout and DAO fee&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://norswap.com/olympus/#5-mint-ohm-for-payout-and-dao-fee&quot;&gt;Mint OHM for payout and DAO fee&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://norswap.com/olympus/#6-pay-the-dao-and-perform-book-keeping&quot;&gt;Pay the DAO and perform book-keeping&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://norswap.com/olympus/#example&quot;&gt;Example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;olympus-v11-vs-olympus-v2&quot;&gt;Olympus v1.1 vs Olympus v2&lt;/h2&gt;
&lt;p&gt;The present investigation was on conducted on the 1.1 version of the protocol.
This is because I started this a long time ago in mid-December, and didn&amp;#39;t
realize that the &lt;a href=&quot;https://olympusdao.medium.com/introducing-olympus-v2-c4ade14e9fe&quot;&gt;v2 of the protocol&lt;/a&gt; was already launched, &lt;em&gt;excepted&lt;/em&gt; the v2
bonds (which are now live too).&lt;/p&gt;
&lt;p&gt;Olympus v1.1 was apparently intended as an intermediary milestone to facilitate
the deployment of v2.&lt;/p&gt;
&lt;p&gt;The particular code I investigated is &lt;a href=&quot;https://github.com/OlympusDAO/olympus-contracts/tree/Version-1.1/&quot;&gt;the 1.1 codebase&lt;/a&gt; as can be
found in the &lt;code&gt;Version-1.1&lt;/code&gt; branch on Github.&lt;/p&gt;
&lt;p&gt;Annoyingly, it looks like not all the code of that repository was deployed as
such. For instance, the OHM contract is not identical to &lt;a href=&quot;https://etherscan.io/address/0x383518188c0c6d7730d91b2c03a03c837814a899#code&quot;&gt;its first
deployment&lt;/a&gt; (verified in March 2021) nor to &lt;a href=&quot;https://etherscan.io/address/0x64aa3364F17a4D01c6f1751Fd97C2BD3D7e7f1D5#code&quot;&gt;its second
deployment&lt;/a&gt; (verified in December 2021 and matching the v2
code).&lt;/p&gt;
&lt;p&gt;If you want to investigate the latest deployed v2 codebase, check out &lt;a href=&quot;https://github.com/OlympusDAO/olympus-contracts/tree/542c215c57e213ed82a98ffc052ebaa9ee4f1ce9&quot;&gt;the tree
at this commit&lt;/a&gt;, which merges in the v2 bonds.&lt;/p&gt;
&lt;p&gt;That being said, as far as I was able to determine, &lt;strong&gt;the protocol did not change
significantly between v1.1 and v2&lt;/strong&gt;. The major change seems to be that bonds no
longer vest linearly but immediately stake OHM which can be redeemed at expiry
(this will be repeated below, in the appropriate context).&lt;/p&gt;
&lt;p&gt;The other change is the start of on-chain governance via the gOHM token
(representing an indexed amount of sOHN, as mentionned in the take-aways). This
doesn&amp;#39;t affect the behaviour of contracts, however.&lt;/p&gt;
&lt;p&gt;If you follow throught this article, you&amp;#39;ll have a thorough enough understanding
that understanding the v2 contracts should be a breeze.&lt;/p&gt;
&lt;p&gt;The v2 codebase seems vastly improved, and most likely assuages some of the
complaints I make below!&lt;/p&gt;
&lt;p&gt;You might also want to read &lt;a href=&quot;https://blog.oighty.com/olympus-v2-bonds&quot;&gt;this deep dive on Olympus v2 bonds&lt;/a&gt;
for an alternative analysis, focused on v2.&lt;/p&gt;
&lt;h2 id=&quot;contracts&quot;&gt;Contracts&lt;/h2&gt;
&lt;p&gt;Before we dig into the protocol&amp;#39;s internals, let&amp;#39;s inventorize the contracts,
both for v1.1 and v2 deployments. In particular, &lt;a href=&quot;https://docs.olympusdao.finance&quot;&gt;the OlympusDAO
documentation&lt;/a&gt; is not yet updated to list the addresses of the v2
contracts.&lt;/p&gt;
&lt;p&gt;If you consult the doc, you&amp;#39;ll note that some contracts have many versions which
are dubbed v1, v2, v3, v4, ... It goes without saying that these version bear no
relationship to the protocol versions (v1.1, v2, ...).&lt;/p&gt;
&lt;p&gt;As said earlier, the v1.1 source does not always match the deployment (some
contracts were tweaked that were not deployed), so it may happen that the source
file I link does not match the deployed contract. You can check this by
comparing the verified source code in the contract/code tab agains the GitHub
source.&lt;/p&gt;
&lt;h3 id=&quot;v11-contracts&quot;&gt;v1.1 Contracts&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://etherscan.io/address/0x383518188c0c6d7730d91b2c03a03c837814a899#code&quot;&gt;OlympusERC20.sol&lt;/a&gt; (&lt;a href=&quot;https://github.com/OlympusDAO/olympus-contracts/blob/Version-1.1/contracts/OlympusERC20.sol&quot;&gt;source&lt;/a&gt;)&lt;ul&gt;
&lt;li&gt;Owned by &lt;a href=&quot;https://etherscan.io/address/0x763a641383007870ae96067818f1649e5586f6de&quot;&gt;this EOA address&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://etherscan.io/address/0x04f2694c8fcee23e8fd0dfea1d4f5bb8c352111f#code&quot;&gt;sOlympusERC20.sol&lt;/a&gt; (&lt;a href=&quot;https://github.com/OlympusDAO/olympus-contracts/blob/Version-1.1/contracts/sOlympusERC20.sol&quot;&gt;source&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://etherscan.io/address/0xFd31c7d00Ca47653c6Ce64Af53c1571f9C36566a#code&quot;&gt;Staking.sol&lt;/a&gt; (&lt;a href=&quot;https://github.com/OlympusDAO/olympus-contracts/blob/Version-1.1/contracts/Staking.sol&quot;&gt;source&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://etherscan.io/address/0xC8C436271f9A6F10a5B80c8b8eD7D0E8f37a612d#code&quot;&gt;StakingHelper.sol&lt;/a&gt; (&lt;a href=&quot;https://github.com/OlympusDAO/olympus-contracts/blob/Version-1.1/contracts/StakingHelper.sol&quot;&gt;source&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://etherscan.io/address/0x2882a5cd82ac49e06620382660f5ed932607c5f1#code&quot;&gt;StakingWarmup.sol&lt;/a&gt; (&lt;a href=&quot;https://github.com/OlympusDAO/olympus-contracts/blob/Version-1.1/contracts/StakingWarmup.sol&quot;&gt;source&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://etherscan.io/address/0xC58E923bf8A00E4361FE3f4275226a543D7D3ce6#code&quot;&gt;StakingDistributor.sol&lt;/a&gt; (&lt;a href=&quot;https://github.com/OlympusDAO/olympus-contracts/blob/Version-1.1/contracts/StakingDistributor.sol&quot;&gt;source&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://etherscan.io/address/0x31F8Cc382c9898b273eff4e0b7626a6987C846E8#code&quot;&gt;Treasury.sol&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In v1.1, there is one bonding contract per token that can be used to purchase
bonds. I will only list the DAI and OHM-DAI contracts, to serve as examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://archive.fo/KkeeN&quot;&gt;List of Bond Contracts&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;e.g. &lt;a href=&quot;https://etherscan.io/address/0x575409F8d77c12B05feD8B455815f0e54797381c#code&quot;&gt;DAI Bond&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;e.g. &lt;a href=&quot;https://etherscan.io/address/0x956c43998316b6a2F21f89a1539f73fB5B78c151#code&quot;&gt;OHM/DAI LP Bond&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Bond Calculator Contract&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://etherscan.io/address/0xcaaa6a2d4b26067a391e7b7d65c16bb2d5fa571a#code&quot;&gt;older deployment used by the newest OHM/DAI LP bond&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://etherscan.io/address/0x7b1a5649145143f4fad8504712ca9c614c3da2ae#code&quot;&gt;newer deployment used by the newest OHM/FRAX LP bond&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;the code in those two are exactly identical!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are also some contracts related to governance and operations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://etherscan.io/address/0x245cc372c84b3645bf0ffe6538620b04a217988b#code&quot;&gt;DAO&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Proxied to &lt;a href=&quot;https://etherscan.io/address/0x34cfac646f301356faa8b21e94227e3583fe3f5f#code&quot;&gt;Gnosis Safe&lt;/a&gt; (&lt;a href=&quot;https://github.com/gnosis/safe-contracts/blob/v1.1.1/contracts/GnosisSafe.sol&quot;&gt;github source&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.olympusdao.finance/main/contracts/dao&quot;&gt;List of signers&lt;/a&gt; (4 of 7)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://etherscan.io/address/0x0cf30dc0d48604a301df8010cdc028c055336b2e#code&quot;&gt;Policy&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Also proxied to &lt;a href=&quot;https://etherscan.io/address/0x34cfac646f301356faa8b21e94227e3583fe3f5f#code&quot;&gt;Gnosis Safe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.olympusdao.finance/main/contracts/policy&quot;&gt;List of signers&lt;/a&gt; (3 of 5)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;v2-contracts&quot;&gt;v2 Contracts&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://etherscan.io/address/0x1c21f8ea7e39e2ba00bc12d2968d63f4acb38b7a#code&quot;&gt;OlympusAuthority.sol&lt;/a&gt; (&lt;a href=&quot;https://github.com/OlympusDAO/olympus-contracts/blob/542c215c57e213ed82a98ffc052ebaa9ee4f1ce9/contracts/OlympusAuthority.sol&quot;&gt;source&lt;/a&gt;)&lt;ul&gt;
&lt;li&gt;This replaces the &amp;quot;Policy&amp;quot; from v1.1 and also owns the ERC-20 contract.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://etherscan.io/address/0x64aa3364f17a4d01c6f1751fd97c2bd3d7e7f1d5#code&quot;&gt;OlympusERC20.sol&lt;/a&gt; (&lt;a href=&quot;https://github.com/OlympusDAO/olympus-contracts/blob/542c215c57e213ed82a98ffc052ebaa9ee4f1ce9/contracts/OlympusERC20.sol&quot;&gt;source&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://etherscan.io/address/0x04906695D6D12CF5459975d7C3C03356E4Ccd460#code&quot;&gt;sOlympusERC20.sol&lt;/a&gt; (&lt;a href=&quot;https://github.com/OlympusDAO/olympus-contracts/blob/542c215c57e213ed82a98ffc052ebaa9ee4f1ce9/contracts/sOlympusERC20.sol&quot;&gt;source&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://etherscan.io/address/0xb63cac384247597756545b500253ff8e607a8020#code&quot;&gt;Staking.sol&lt;/a&gt; (&lt;a href=&quot;https://github.com/OlympusDAO/olympus-contracts/blob/542c215c57e213ed82a98ffc052ebaa9ee4f1ce9/contracts/Staking.sol&quot;&gt;source&lt;/a&gt;)&lt;ul&gt;
&lt;li&gt;v2 does not have separate warmup &amp;amp; helper contracts — instead the
functionality is merged in &lt;code&gt;Staking.sol&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://etherscan.io/address/0xeeeb97a127a342656191e0313df33d58d06b2e05#code&quot;&gt;StakingDistributor.sol&lt;/a&gt; (&lt;a href=&quot;https://github.com/OlympusDAO/olympus-contracts/blob/542c215c57e213ed82a98ffc052ebaa9ee4f1ce9/contracts/StakingDistributor.sol&quot;&gt;source&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://etherscan.io/address/0x9a315bdf513367c0377fb36545857d12e85813ef#code&quot;&gt;Treasury.sol&lt;/a&gt; (&lt;a href=&quot;https://github.com/OlympusDAO/olympus-contracts/blob/542c215c57e213ed82a98ffc052ebaa9ee4f1ce9/contracts/Treasury.sol&quot;&gt;source&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://etherscan.io/address/0x9025046c6fb25fb39e720d97a8fd881ed69a1ef6#code&quot;&gt;BondingDepository.sol&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://etherscan.io/address/0x0ab87046fbb341d058f17cbc4c1133f25a20a52f#code&quot;&gt;gOHM&lt;/a&gt; (&lt;a href=&quot;https://github.com/OlympusDAO/olympus-contracts/blob/542c215c57e213ed82a98ffc052ebaa9ee4f1ce9/contracts/governance/gOHM.sol&quot;&gt;source&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;The DAO contract is the same as before.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A big difference in v2 is that there is a single deployed bonding contract,
which handles all tokens (unlike v1.1, which has one deployed contract per
token).&lt;/p&gt;
&lt;p&gt;v2 has also other contracts, but I haven&amp;#39;t reviewed those, so I&amp;#39;ll limit myself
to establish this mapping will the old contracts. Also note that the &lt;a href=&quot;https://github.com/OlympusDAO/olympus-contracts/tree/542c215c57e213ed82a98ffc052ebaa9ee4f1ce9&quot;&gt;v2
codebase&lt;/a&gt; splits interface and imports away from the main contract
to be deployed, unlike 1.1.&lt;/p&gt;
&lt;h3 id=&quot;upgrade-paths&quot;&gt;Upgrade Paths&lt;/h3&gt;
&lt;p&gt;Olympus uses very few proxy (only for the DAO and the v1.1 policy contract). Yet
they were able to deploy many new versions of contracts.&lt;/p&gt;
&lt;p&gt;These upgrade paths are not explicit in the code (which is a shame), but I do
believe some thoughts went into them.&lt;/p&gt;
&lt;p&gt;Often, upgrades entails co-existence. For instance, the v1.1 staking contract
still &amp;quot;works&amp;quot; if you staked your OHM in it and haven&amp;#39;t migrated to v2. However,
the old contract does not accept new stakers anymore (this can be achieved by
setting some configurable values (e.g. addresses) so that new attempts to stake
on the old contract revert).&lt;/p&gt;
&lt;p&gt;In the future, it&amp;#39;s possible that Olympus might be able to &amp;quot;disable&amp;quot; some old
contracts. For instance, it could suspend rebases in the old staking contract
(by modifying the address of the distributor), forcing people to migrate if they
want to keep earning yield.&lt;/p&gt;
&lt;p&gt;That being said, the lack of proxys does not mean that the protocol is
&amp;quot;decentralized&amp;quot;. In fact, the policy/authority multisig has the ability to
change a lot of variables, including contract addresses!&lt;/p&gt;
&lt;h2 id=&quot;basics--staking&quot;&gt;Basics &amp;amp; Staking&lt;/h2&gt;
&lt;p&gt;Let&amp;#39;s begin our dive into the contracts! First, let&amp;#39;s get the easy stuff out of
the way:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The &lt;a href=&quot;https://etherscan.io/address/0x383518188c0c6d7730d91b2c03a03c837814a899#code&quot;&gt;OlympusERC20.sol&lt;/a&gt; contract is a straightforward &lt;a href=&quot;https://eips.ethereum.org/EIPS/eip-20&quot;&gt;ERC-20&lt;/a&gt; token
contract implementation. It is owned by an &lt;a href=&quot;https://etherscan.io/address/0x763a641383007870ae96067818f1649e5586f6de&quot;&gt;EOA&lt;/a&gt; (Externally Owned
Account). This is not very secure, but is fixed in Olympus v2, where the owner
is remplaced by the Olympus authority contract, which is in turn controlled by
a &lt;a href=&quot;https://help.gnosis-safe.io/en/articles/3876456-what-is-gnosis-safe&quot;&gt;multisig Gnosis safe&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Minting privileges are given to the &amp;quot;vault&amp;quot; which is the
&lt;a href=&quot;https://etherscan.io/address/0x31F8Cc382c9898b273eff4e0b7626a6987C846E8#code&quot;&gt;Treasury.sol&lt;/a&gt; contract.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;a href=&quot;https://etherscan.io/address/0x245cc372c84b3645bf0ffe6538620b04a217988b#code&quot;&gt;DAO&lt;/a&gt; contract is simply a &lt;a href=&quot;https://help.gnosis-safe.io/en/articles/3876456-what-is-gnosis-safe&quot;&gt;Gnosis safe&lt;/a&gt;, which lets a majority of
&lt;a href=&quot;https://docs.olympusdao.finance/main/contracts/dao&quot;&gt;signers&lt;/a&gt; do whatever with the funds held by the DAO contract.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;intro-to-rebases--sohm-balances&quot;&gt;Intro to Rebases &amp;amp; sOHM Balances&lt;/h3&gt;
&lt;p&gt;The &lt;a href=&quot;https://etherscan.io/address/0x04f2694c8fcee23e8fd0dfea1d4f5bb8c352111f#code&quot;&gt;sOlympusERC20.sol&lt;/a&gt; contract is also an &lt;a href=&quot;https://eips.ethereum.org/EIPS/eip-20&quot;&gt;ERC-20&lt;/a&gt; implementation, this
time for the staked OHM token (&lt;em&gt;sOHM&lt;/em&gt;, which you receive in exchange for your
OHMs after you stake). However, the contract also implements part of the
&amp;quot;rebase&amp;quot; logic.&lt;/p&gt;
&lt;p&gt;In Olympus parlance, a &lt;em&gt;rebase&lt;/em&gt; is the thrice-daily inflation event. It used to
be set at 0.35% for a long time, but is now &lt;a href=&quot;https://dune.xyz/shadow/Olympus-Policy&quot;&gt;sitting at 0.2%&lt;/a&gt;,
subject to changes by the Olympus policy team. During each rebase, the newly
minted tokens are auto-staked and distributed to the stakers proportionally to
their existing stake.&lt;/p&gt;
&lt;p&gt;Because of the frequent rebases, sOHM balances are constantly in flux. They
change automatically, without users needed to submit transactions to claim.&lt;/p&gt;
&lt;p&gt;The way this is implemented is rather ingenious. The contract does not maintain
sOHM balances: this would be too expensive, as every rebase would need to touch
every single balance. Instead it maintains a balance of &amp;quot;gons&amp;quot; (I don&amp;#39;t know
where the term comes from). Whenever a rebase occur, the gon balance does not
change — only the total pot of OHM owned by the &lt;a href=&quot;https://etherscan.io/address/0xFd31c7d00Ca47653c6Ce64Af53c1571f9C36566a#code&quot;&gt;staking contract&lt;/a&gt; is
increased. A user&amp;#39;s sOHM balance is the fraction of the OHM pot equal to its gon
balance divided by the total gon supply. This is also the amount of OHM the user
would receive if unstaking his whole sOHM balance (one sOHM always corresponds
1-1 to one OHM in the staking contract).&lt;/p&gt;
&lt;p&gt;The sOHM contract itself defines only part of that logic. It has a
&lt;code&gt;rebase(uint256 profit_, uint epoch_)&lt;/code&gt; function, callable only by the staking
contract. The &lt;code&gt;profit_&lt;/code&gt; here is the amount of sOHM that is to be distributed in
the rebase. The logic in that function ensures that the sum of the balances of
all stakers is increased by this amount.&lt;/p&gt;
&lt;p&gt;Now we must tackle a peculiarity in the contract code I cannot quite explain.
Instead of letting the staking contract mint the sOHM whenever it receives OHM,
the sOHM contract allocates &lt;code&gt;5*10^15&lt;/code&gt; (or 5 million billion) sOHM to the staking
contract. Whenever the staking contract receives OHM, it sends a corresponding
amount of sOHM from his own balance to the staker. I assume there must be a
reason for this, but it is not obvious. The contract also calls sOHM
&amp;quot;fragments&amp;quot;, though I&amp;#39;m not quite sure why. (It could be to better differentiate
them from gons, and avoid using ambiguous terms like &lt;em&gt;amount&lt;/em&gt;, but the contract
does that sometimes anyway.)&lt;/p&gt;
&lt;p&gt;EDIT: &lt;a href=&quot;https://twitter.com/_nd_go&quot;&gt;iND1G0&lt;/a&gt; points out the terminology is
inherited from &lt;a href=&quot;https://www.ampleforth.org/&quot;&gt;Ampleforth&lt;/a&gt;, an algorithm
stablecoin. This explanation from the home page is pretty eloquent:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When Price &amp;gt; $1, wallet balances Increase proportionally
When Price &amp;lt; $1, wallet balances Decrease proportionally&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This sOHM allocation to the staking contract also means that the sOHM contract
must distinguish between the total supply and the &lt;em&gt;circulating supply&lt;/em&gt; (which
excludes the staking contract&amp;#39;s balance), and that the &lt;code&gt;rebase&lt;/code&gt; function must
inflate the total supply by more than the &lt;code&gt;profit_&lt;/code&gt; parameter, in order for the
circulating supply to be inflated by &lt;code&gt;profit_&lt;/code&gt; and be effectively accrued to the
stakers. The staking contract balance inflation is irrelevant (since it&amp;#39;s only
ever exchange for OHM that was staked, or to reward lockers — see later).&lt;/p&gt;
&lt;p&gt;An interesting thing to note is that the staking contract&amp;#39;s sOHM balance is not
backed by underlying OHM. This is fine because (a) when staking, users exchange
OHM for sOHM 1-1 with the staking contract and (b) when rebasing, the
&lt;a href=&quot;https://etherscan.io/address/0xC58E923bf8A00E4361FE3f4275226a543D7D3ce6#code&quot;&gt;distributor contract&lt;/a&gt; mints OHM for the staking contract 1-1 with
the reward (see later).&lt;/p&gt;
&lt;h3 id=&quot;staking--unstaking&quot;&gt;Staking &amp;amp; Unstaking&lt;/h3&gt;
&lt;p&gt;The abstract idea of staking is pretty easy: you send X OHM to the &lt;a href=&quot;https://etherscan.io/address/0xFd31c7d00Ca47653c6Ce64Af53c1571f9C36566a#code&quot;&gt;staking
contract&lt;/a&gt;, and the staking contract sends you X sOHM in return.
Unstaking is the same, but in reverse.&lt;/p&gt;
&lt;p&gt;In pratice, it&amp;#39;s a bit more involved because the contracts introduce a notion of
&lt;em&gt;warmup&lt;/em&gt;, which is not currently used.&lt;/p&gt;
&lt;p&gt;To stake, you call the &lt;code&gt;stake(uint _amount, address _recipient)&lt;/code&gt; function, which
receives your OHM, and sends sOHM to the &lt;a href=&quot;https://etherscan.io/address/0x2882a5cd82ac49e06620382660f5ed932607c5f1#code&quot;&gt;StakingWarmup.sol&lt;/a&gt; contract on
your behalf. Then, after the warmup period (&lt;code&gt;warmupPeriod&lt;/code&gt;, currently 0), you
can call &lt;code&gt;claim (address _recipient)&lt;/code&gt; to transfer the sOHM locked in the warmup
contract to your own balance.&lt;/p&gt;
&lt;p&gt;Because the warmup period is currently 0, you could do both calls in a single
transaction. For this purpose, Olympus has deployed the
&lt;a href=&quot;https://etherscan.io/address/0xC8C436271f9A6F10a5B80c8b8eD7D0E8f37a612d#code&quot;&gt;StakingHelper.sol&lt;/a&gt; contract whose &lt;code&gt;stake(uint _amount)&lt;/code&gt; function
does exactly this. Additionally, the recipient is implicitly the sender.&lt;/p&gt;
&lt;p&gt;You can cancel the warmup period and reclaim your OHM with the &lt;code&gt;forfeit()&lt;/code&gt;
function, and you can prevent other people from staking OHM for you using
&lt;code&gt;toggleDepositLock()&lt;/code&gt; (my best guess is that this is just for extra protection,
so that a contract that you&amp;#39;ve authorized to handle your OHM can&amp;#39;t unstake your
sOHM).&lt;/p&gt;
&lt;h2 id=&quot;rebases-in-depth&quot;&gt;Rebases in Depth&lt;/h2&gt;
&lt;p&gt;Rebases are initiated by calling the &lt;code&gt;rebase()&lt;/code&gt; function of the &lt;a href=&quot;https://etherscan.io/address/0xFd31c7d00Ca47653c6Ce64Af53c1571f9C36566a#code&quot;&gt;staking
contract&lt;/a&gt;. Anybody can call the function, as long as a rebase is due.
The function is also automatically called when someone stakes some OHM!&lt;/p&gt;
&lt;p&gt;&lt;code&gt;rebase()&lt;/code&gt; does four things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Check if a rebase is due via the &lt;em&gt;current epoch&lt;/em&gt; (see below), otherwise
return.&lt;/li&gt;
&lt;li&gt;Call &lt;code&gt;sOHM.rebase(uint256 profit_, uint epoch_)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Call &lt;code&gt;distributor.distribute()&lt;/code&gt; (if &lt;code&gt;distributor&lt;/code&gt; != 0)&lt;/li&gt;
&lt;li&gt;Update the current epoch.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The &lt;em&gt;current epoch&lt;/em&gt;, held in the &lt;code&gt;epoch&lt;/code&gt; variable tracks the length of the
epoch, its number, its deadline &lt;code&gt;endBlock&lt;/code&gt; (indicating when &lt;code&gt;rebase()&lt;/code&gt; can be
called), and &lt;code&gt;distribute&lt;/code&gt; (the amount of sOHM to be distributed during the
rebase).&lt;/p&gt;
&lt;p&gt;In the first step, we simply check &lt;code&gt;epoch.endBlock &amp;lt;= block.number&lt;/code&gt;. If that&amp;#39;s
alright, we call &lt;code&gt;sOHM.rebase(epoch.distribute, epoch.number)&lt;/code&gt;, which works as
described above.&lt;/p&gt;
&lt;p&gt;Then we (possibly) call &lt;code&gt;distribute()&lt;/code&gt; on the &lt;a href=&quot;https://etherscan.io/address/0xC58E923bf8A00E4361FE3f4275226a543D7D3ce6#code&quot;&gt;distributor
contract&lt;/a&gt;. Here is how the documentation misleadingly describes it:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The distributor contract receives minted OHM from the treasury in order to
drip-feed rewards to stakers. The reward rate target as of time of writing is
set to 3500, which translates to 0.35% of total supply, since the reward rate
is defined in tens of thousands. Note that the reward rate determines the
rebase rate and that the rebase rate determines the APY. Below are listed
distributor contracts by version, where the latest version represents the
currently active contract.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This makes it sound like the distributor is the one that gives out rebasing
reward. As we&amp;#39;ve seen before, this would be too expensive, and it&amp;#39;s actually
done by the sOHM contract.&lt;/p&gt;
&lt;p&gt;In reality, the role of the distributor is to send OHM to the staking contract
in a way that is commensurate with the rebase amount (&lt;code&gt;profit_&lt;/code&gt; from above).
However this mechanism is fully generic and does not encode a direct dependency
on the staking contract. Let&amp;#39;s see how it works briefly.&lt;/p&gt;
&lt;p&gt;Skipping over the fine details, what &lt;code&gt;distribute()&lt;/code&gt; does is distribute OHM
rewards (minted from the &lt;a href=&quot;https://etherscan.io/address/0x31F8Cc382c9898b273eff4e0b7626a6987C846E8#code&quot;&gt;Treasury contract&lt;/a&gt; via its
&lt;code&gt;mintRewards(address _recipient, uint _amount)&lt;/code&gt; function) to &amp;quot;recipients&amp;quot; which
are added/removed through the &lt;code&gt;addRecipient&lt;/code&gt; and &lt;code&gt;removeRecipient&lt;/code&gt; functions.
These functions are only callable by the &lt;a href=&quot;https://etherscan.io/address/0x0cf30dc0d48604a301df8010cdc028c055336b2e#code&quot;&gt;policy&lt;/a&gt; multisig (which is the current
value of &lt;code&gt;_policy&lt;/code&gt; in the distributor contract). &lt;code&gt;addRecipient&lt;/code&gt; also takes an
individualized reward rate for every recipient.&lt;/p&gt;
&lt;p&gt;If you query the &lt;a href=&quot;https://etherscan.io/address/0xeeeb97a127a342656191e0313df33d58d06b2e05/advanced#readContract&quot;&gt;latest version of the distributor contract on
Etherscan&lt;/a&gt;, you&amp;#39;ll see that the (latest version of the) staking
contract is currently the only recipient.&lt;/p&gt;
&lt;p&gt;An important detail about &lt;code&gt;mintRewards&lt;/code&gt; is that it will refuse to mint OHM if
the risk-free USD value of the reserves is inferior to the OHM supply
(denominated in OHM), effectively setting a lower bound price of 1$ on OHM,
fully backed by the treasury. Fun fact: &lt;code&gt;mintRewards&lt;/code&gt; reverts in that case,
which means any attempt to trigger further rebases or to stake more OHM will
revert too. (This could be sidestepped by removing the staking contract as
distribution recipient, but it would be useless to stake in the absence of
rebases anyhow.)&lt;/p&gt;
&lt;p&gt;Is the staking &lt;code&gt;profit_&lt;/code&gt; connected in any way with the treasury&amp;#39;s reward?
Actually yes. This is done during step 4 of the rebse, when updating the current
epoch.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;distribute&lt;/code&gt; field of the epoch is set to the OHM balance of the staking
contract minus the circulating supply of sOHM (remember the circulating excludes
the staking contract&amp;#39;s own sOHM balance). This ensures that we can only
distribute staking rewards if there is more OHM in the staking contract than
owned by users, guaranteeing that every sOHM can be redeemed for an OHM.&lt;/p&gt;
&lt;p&gt;As a consequence of calling &lt;code&gt;distribute()&lt;/code&gt; earlier, this OHM balance of the
staking contract increased, &lt;code&gt;distribute&lt;/code&gt; will be set to the the OHM reward from
the distributor, and will be distributed as sOHM during the next epoch.&lt;/p&gt;
&lt;p&gt;The distributor contract also has logic handling what it calls &amp;quot;adjustments&amp;quot;
which are a way to smooth a reward rate transition from the current rate to a
target rate, with the reward rate being updated incrementally during each epoch
(when &lt;code&gt;distribute()&lt;/code&gt; is called) until the target rate is reached.&lt;/p&gt;
&lt;h3 id=&quot;locker&quot;&gt;Locker&lt;/h3&gt;
&lt;p&gt;A little mystery lives in the v2 staking contract (the one from Olympus v1.1
that we are considering here): the notion of &amp;quot;locker&amp;quot;.&lt;/p&gt;
&lt;p&gt;The contract has a function &lt;code&gt;giveLockBonus(uint _amount)&lt;/code&gt; which transfers a sOHM
&amp;quot;bonus&amp;quot; to a &amp;quot;locked staking contract&amp;quot; (the &lt;code&gt;locker&lt;/code&gt; contract variable). This
function is only callable by the locker, which can also ostensibly return the
bonus via &lt;code&gt;returnLockBonus(uint _amount)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The locker does not appear in either the v1 or v3 contract, and is now set to
the zero address in the v2 contract. My best guess is that it is a crutch used
to upgrade the Olympus deployment, though I&amp;#39;m not sure how and why.&lt;/p&gt;
&lt;h3 id=&quot;sohm-index&quot;&gt;sOHM Index&lt;/h3&gt;
&lt;p&gt;If you go to the &lt;a href=&quot;https://app.olympusdao.finance&quot;&gt;Olympus DAO App&lt;/a&gt;, you can see it features the &amp;quot;current
index&amp;quot; (74 at the time of writing), with the description:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The current index tracks the amount of sOHM accumulated since the beginning of
staking. Basically, how much sOHM one would have if they staked and held a
single OHM from day 1.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This notion also appears in the sOHM contract. The index is set once (via
&lt;code&gt;setIndex(uint _INDEX)&lt;/code&gt;), to an initial sOHM amount, which is converted to a gon
balance and stored internaly as &lt;code&gt;INDEX&lt;/code&gt;. (Remember, gon balances do not change
when rebasing and are used to track fractional ownership of all the sOHM.)&lt;/p&gt;
&lt;p&gt;Calling &lt;code&gt;index()&lt;/code&gt; returns the amount of sOHM now controlled by this initial sOHM
amount, if it was staked at contract inception.&lt;/p&gt;
&lt;p&gt;During the first sOHM contract deployment, the initial &lt;code&gt;INDEX&lt;/code&gt; was the gon value
for 1 sOHM. Each time the sOHM contract is upgraded, the value returned by
&lt;code&gt;index()&lt;/code&gt; needs to carried over as the new &lt;code&gt;INDEX&lt;/code&gt; value in the new contract.&lt;/p&gt;
&lt;h2 id=&quot;bonding&quot;&gt;Bonding&lt;/h2&gt;
&lt;p&gt;The goal of bonding is to sell OHM at a small discount (at least, usually) in
the form of bonds that vests linearly over a small period of time (currently 5
days).&lt;/p&gt;
&lt;p&gt;&amp;quot;Linear vesting&amp;quot; means that after one day you can already withdraw 1/5 of the
OHM, etc (at the time resolution of blocks ~= 13s).&lt;/p&gt;
&lt;p&gt;The bond purchaser makes a small profit, but takes on price risk. More on the
purpose of bonding in the economic analysis part.&lt;/p&gt;
&lt;p&gt;In &amp;quot;bonds v2&amp;quot;, there is no longer linear vesting. Instead the purchased OHM is
staked and can be claimed at the end of the period. This increases risk for bond
holder who can&amp;#39;t dump at least part of their OHM before expiry, but solves the
problem that the discount rate is actually misleading because the OHM supply
inflates during the vesting period (by about 3% at the current rebase reward
rate).&lt;/p&gt;
&lt;p&gt;Bonds are sold for various assets (called &lt;code&gt;principle&lt;/code&gt; or sometimes &lt;code&gt;reserve&lt;/code&gt; in
the contracts), which are either stablecoin or OHM-stablecoin LP tokens. There
is one contract for each asset, instantiated from the &lt;code&gt;BondDepository.sol&lt;/code&gt; file.
For instance:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://etherscan.io/address/0x575409F8d77c12B05feD8B455815f0e54797381c#code&quot;&gt;DAI Bond Contract&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://etherscan.io/address/0x956c43998316b6a2F21f89a1539f73fB5B78c151#code&quot;&gt;OHM/DAI LP Bond Contract&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;v2 only has a single contract to handle all bonds.&lt;/p&gt;
&lt;p&gt;We&amp;#39;ll look at how bond prices are determined, starting with stablecoins, then
moving on the more complex pricing of LP tokens, then looking at what the
bonding process actually does (hint: more inflation!).&lt;/p&gt;
&lt;p&gt;For a given bonding contract, the bond price is computed by the view
&lt;code&gt;bondPrice()&lt;/code&gt; method. There is also the &lt;code&gt;_bondPrice()&lt;/code&gt; method, which is the one
actually called during bond purchases. The difference is that the &lt;code&gt;_bondPrice()&lt;/code&gt;
can modify the minimum bond price, as we&amp;#39;ll see.&lt;/p&gt;
&lt;h3 id=&quot;stablecoin-bond-pricing&quot;&gt;Stablecoin Bond Pricing&lt;/h3&gt;
&lt;p&gt;First of all, bonds are fractional, i.e. you get a claim on OHM proportional to
the value of the tokens you use to purchase bonds, without unit limitation.&lt;/p&gt;
&lt;p&gt;This means that &amp;quot;one bond&amp;quot; maps to 1 OHM. However, it can also appear that &amp;quot;one
bond&amp;quot; maps to 100 OHM because bonds are represented with 2 extra digits of
precision: the &lt;code&gt;payoutFor(uint _value)&lt;/code&gt; function of the depository contract
divides the value by the bond price, obtaining a number with 36 digits of
precision, but dividing only by 10^16, hence 100 times more than the expected 18
digits precision. The reason for the extra precision is that the bond price is
expressed in risk-free USD with 2 digits precision (though it&amp;#39;s not clear why
that particular choice was made).&lt;/p&gt;
&lt;p&gt;I must say that dealing with significant digits was by FAR the most tricky and
painful part of reading the contracts. It almost completly threw me for a loop
multiple times, and the devs did an horrendous job at documenting the
assumptions. In fact, I even found what I must assume is a mistake in one of the
comments.&lt;/p&gt;
&lt;p&gt;The formula to determine the bond price (with two digits precision, so the
obtained number will be 100x the price) is &lt;code&gt;bondPrice = min(BCV * debtRatio + 100, terms.minimumPrice)&lt;/code&gt;, where:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;BCV&lt;/code&gt; is the &amp;quot;bond control variable&amp;quot; (&lt;code&gt;terms.controlVariable&lt;/code&gt; in the code).
This value is tweaked for every principle by the Olympus DAO policy team, and
can change over time.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;debtRatio&lt;/code&gt; is the ratio (in percent) of the total bond debt (the OHM to be
paid out for bonds still have to vest) over the total OHM supply. It&amp;#39;s a bit
weird however, because it&amp;#39;s actually a ratio between the &amp;quot;risk-free&amp;quot; value of
the debt in USD (we&amp;#39;ll explain this in the next section) and the supply in
OHM! A consequence of this is that the debt ratio increases faster when the
OHM price is high.&lt;/p&gt;
&lt;p&gt;The debt ratio can be obtained by calling &lt;code&gt;debtRatio()&lt;/code&gt; which returns the
ratio with 9 significant digits of precision (so 1B = 100%). This debt ratio
is different for each bond contract (i.e. for each token).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;terms.minimumPrice&lt;/code&gt; is a minimum price for the bonds. This is useful as
otherwise the first bond sales would be done at a very steep discount, as
&lt;code&gt;debtRatio&lt;/code&gt; is effectively 0. The minimum price is &lt;strong&gt;only&lt;/strong&gt; intended for this
ramp-up: the first time the price exceeds the minimum price in &lt;code&gt;_bondPrice&lt;/code&gt;,
&lt;code&gt;terms.minimumPrice&lt;/code&gt; is set to 0.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As the debt ratio increases, so does the bond price, and vice-versa. This
automatically throttles the rate of bond emission, and incentivizes bond
purchase when few bonds are being sold.&lt;/p&gt;
&lt;p&gt;As a side-note, the Olympus DAO glossary defines BCV as follows:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Bond Control Variable, is the scaling factor at which bond prices change. A
higher BCV means a lower discount for bonders and higher inflation by the
protocol. A lower BCV means a higher discount for bonders and lower inflation
by the protocol.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I find this statement frankly puzzling, since you would expect that when the
discount is higher, more bonds are sold, and so inflation is higher. I think the
explanation here is that &amp;quot;inflation&amp;quot; doesn&amp;#39;t refer to the increase in supply,
but to the loss of value: when more bonds are sold, each bond sale tends to
increase the backing per OHM, which means that OHM will decrease in value more
slowly. More on this in the economic analysis part.&lt;/p&gt;
&lt;h3 id=&quot;liquidity-token-bond-pricing&quot;&gt;Liquidity Token Bond Pricing&lt;/h3&gt;
&lt;p&gt;The formula for determining the bond price when purchasing using liquidity
tokens (with two significant digits) is the same as before: &lt;code&gt;bondPrice = min(BCV * debtRatio + 100, terms.minimumPrice)&lt;/code&gt; (see previous sections for
important details). &lt;strong&gt;This expresses an amount of USD, not an amount of
liquidity tokens.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;But not so fast! When purchasing bonds using LP tokens, Olympus first converts
bonds to their risk-free value (RFV) and then only uses this RFV to determine
the number of bonds purchased.&lt;/p&gt;
&lt;p&gt;The RFV assumes a &amp;quot;worst-case scenario&amp;quot; where 1 OHM is worth 1$. This is a
worst-case scenario because the &lt;code&gt;mintRewards&lt;/code&gt; function of the &lt;a href=&quot;https://etherscan.io/address/0x31F8Cc382c9898b273eff4e0b7626a6987C846E8#code&quot;&gt;treasury
contract&lt;/a&gt; ensures a minimum backing per OHM of 1$.&lt;/p&gt;
&lt;p&gt;(This computation is slightly sketchy because at 1$ it means OHM is partly
backed LP tokens whose value is made up in half of OHM valued at 1$. Close
enough.)&lt;/p&gt;
&lt;p&gt;The RFV is computed by the &lt;code&gt;valueOf(address _token, uint _amount )&lt;/code&gt; method of
the &lt;a href=&quot;https://etherscan.io/address/0x31F8Cc382c9898b273eff4e0b7626a6987C846E8#code&quot;&gt;treasury contract&lt;/a&gt;, both for stablecoins and LP token. For
stablecoins the RFV value is trivially computed as the amount of stables. For LP
tokens, the function defers the computation to the &lt;code&gt;valuation(address _pair, uint amount_)&lt;/code&gt; function of an instance of the &lt;code&gt;StandardBondingCalculator.sol&lt;/code&gt;
contract (e.g. &lt;a href=&quot;https://etherscan.io/address/0xcaaa6a2d4b26067a391e7b7d65c16bb2d5fa571a#code&quot;&gt;the instance used by the OHM-DAI contract&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;The formula to compute the RFV of the whole liquidity pool is &lt;code&gt;2 * sqrt(k)&lt;/code&gt;,
where &lt;code&gt;k = ohmInPool * stableInPool&lt;/code&gt; (this is the classical &lt;code&gt;x * y = k&lt;/code&gt;
&lt;a href=&quot;https://docs.uniswap.org/protocol/V2/concepts/protocol-overview/how-uniswap-works&quot;&gt;equation of Uniswap v2 pools&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;This makes sense: at 1$ = 1 OHM, &lt;code&gt;ohmInPool == stableInPool == sqrt(k)&lt;/code&gt;, hence
&lt;code&gt;ohmInPool + stableInPool == 2 * sqrt(k)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To compute the RFV of any amount of LP tokens, you simply multiply the liquidity
pool RFV by the fraction of the pool controlled by the tokens.&lt;/p&gt;
&lt;p&gt;The bonding calculator also has a &lt;code&gt;markdown&lt;/code&gt; function which indicates how
discounted the RFV is compared to the actual price. The actual price for the
whole pool is the amounts of stable times 2 (since by definition the values of
one side of the pool equals the value of the other side). Then to get the
markdown, you divide this by the RFV value of the whole pool.&lt;/p&gt;
&lt;h3 id=&quot;bonding-in-depth&quot;&gt;Bonding in Depth&lt;/h3&gt;
&lt;p&gt;To purchase a bond, you call the &lt;code&gt;deposit(uint _amount, uint _maxPrice, address _depositor)&lt;/code&gt; method of the &lt;code&gt;BondDepository.sol&lt;/code&gt; instance of your choice (e.g.
[the DAI bond contract][dai-bound]).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;_amount&lt;/code&gt; is the amount of tokens (stable or LP) you&amp;#39;re sending for your
purchase&lt;/li&gt;
&lt;li&gt;&lt;code&gt;maxPrice&lt;/code&gt; is the maximum &lt;strong&gt;USD&lt;/strong&gt; price (using the decimal precision of your
stablecoin (*), usually 18) you&amp;#39;re willing to pay per bond. This is intended to
protect against &lt;a href=&quot;https://www.investopedia.com/terms/s/slippage.asp&quot;&gt;slippage&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_depositor&lt;/code&gt; is the address of the depositor (this is useful in case a
contract is calling this method on your behalf).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(*) If purchasing a bond with LP tokens, this will be the precision of
stablecoin in the pair.&lt;/p&gt;
&lt;p&gt;Here are the various steps taken by the function:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Verify that the max &amp;quot;debt&amp;quot; is not exceeded, as set by &lt;code&gt;terms.maxDebt&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Calculate &lt;code&gt;nativePrice&lt;/code&gt; — the bond price in &amp;quot;risk-free USD&amp;quot;, with two digits
of precision.&lt;/li&gt;
&lt;li&gt;Calculate &lt;code&gt;priceInUSD&lt;/code&gt; — the bond price in &amp;quot;market-price USD&amp;quot;, using the
stablecoin&amp;#39;s decimals.&lt;/li&gt;
&lt;li&gt;Calculate the payout (amount of OHM the bonds can be redeemed for) and the
DAO fee.&lt;/li&gt;
&lt;li&gt;Call the &lt;code&gt;deposit(uint _amount, address _token, uint _profit)&lt;/code&gt; function of
the &lt;a href=&quot;https://etherscan.io/address/0x31F8Cc382c9898b273eff4e0b7626a6987C846E8#code&quot;&gt;treasury contract&lt;/a&gt; to mint the OHM for the payout and for the
DAO fee.&lt;/li&gt;
&lt;li&gt;Pay the DAO fee, and perform book-keeping: update bond info, total debt and
perform adjustments.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let&amp;#39;s go over some  these things in more details.&lt;/p&gt;
&lt;h4 id=&quot;1-checking-against-the-maximum-debt&quot;&gt;1. Checking against the maximum debt&lt;/h4&gt;
&lt;p&gt;The variable &lt;code&gt;terms.maxDebt&lt;/code&gt; indicates the maximum allowable debt for the
contract. Intuitively, the debt is the amount of granted OHM yet to be vested.
However, &lt;code&gt;terms.maxDebt&lt;/code&gt; is denominated in risk-free USD (&amp;quot;RFV USD&amp;quot;) instead.&lt;/p&gt;
&lt;p&gt;First the total debt held in the variable &lt;code&gt;totalDebt&lt;/code&gt; is decayed by calling
&lt;code&gt;debtDecay()&lt;/code&gt; removing the value of the tokens that have vested since the last
time the debt was decayed.&lt;/p&gt;
&lt;p&gt;Decaying it is done on a proportional basis: for instance if 50% of the vesting
period (so 2.5 days) have passed since the last decay, the &lt;code&gt;totalDebt&lt;/code&gt; is split
in half.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;totalDebt&lt;/code&gt; is also denominated in RFV USD. As we&amp;#39;ve already mentionned, this
makes the &lt;code&gt;debtRatio&lt;/code&gt; a ratio between a value in RFV USD and OHM, which is
peculiar, but has the effect of increasing the debt ratio (and hence the bond
price) faster when the OHM price is high.&lt;/p&gt;
&lt;h4 id=&quot;2-calculate-the-bond-price&quot;&gt;2. Calculate the bond price&lt;/h4&gt;
&lt;p&gt;As explained earlier, the bond price is computed by using the formula
&lt;code&gt;rfvBondPrice = BCV * debtRatio + 100&lt;/code&gt;, where &lt;code&gt;debtRatio&lt;/code&gt; is a whole integer
representing a percentage (so for 5%, we&amp;#39;d multiply BCV by 5).&lt;/p&gt;
&lt;p&gt;The bond price, held in the variable &lt;code&gt;nativePrice&lt;/code&gt; inside the function, is
denominated in USD, but the RFV of the tokens will be used to &amp;quot;pay&amp;quot; for this
price. Hence I will say it is denominated in &amp;quot;risk-free USD&amp;quot; or &amp;quot;RFV USD&amp;quot;.&lt;/p&gt;
&lt;p&gt;I will refer to this value as &lt;code&gt;rfvBondPrice&lt;/code&gt; to be clearer.&lt;/p&gt;
&lt;p&gt;As we have said earlier, &lt;code&gt;rfvBondPrice&lt;/code&gt; is a value with two significant digit
(instead of the usual 18).&lt;/p&gt;
&lt;h4 id=&quot;3-calculate-the-market-value-usd-bond-price&quot;&gt;3. Calculate the market-value USD bond price&lt;/h4&gt;
&lt;p&gt;Since &lt;code&gt;rfvBondPrice&lt;/code&gt; is a risk-free amount, the function also computes the
market price of a bond. This will later (see section on boo-keeping) be recorded
in the bond information.&lt;/p&gt;
&lt;p&gt;Since bond sales affect bond prices, this value — as well as the RFV bond price
— will be recomputed later and included in an event called &lt;code&gt;BondPriceChanged&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For LP bonds, the value is computed as &lt;code&gt;rfvBondPrice * markdown / 100&lt;/code&gt; (cf.
section on LP token pricing for info on the markdown). Here, unlike in many
other places, I&amp;#39;ve included the &lt;code&gt;/ 100&lt;/code&gt; which adjusts the digits. If you&amp;#39;re
thinking of amounts as real numbers, feel free to ignore it.&lt;/p&gt;
&lt;h4 id=&quot;4-calculate-the-payout-and-dao-fee&quot;&gt;4. Calculate the payout and DAO fee&lt;/h4&gt;
&lt;p&gt;First, the &lt;code&gt;deposit&lt;/code&gt; function (of the bonding depository contract) computes the
payout, the amount of OHM to grant. This is obtained by computing the RFV value
of the amount deposited (using the &lt;code&gt;valueOf&lt;/code&gt; of the &lt;a href=&quot;https://etherscan.io/address/0x31F8Cc382c9898b273eff4e0b7626a6987C846E8#code&quot;&gt;treasury
contract&lt;/a&gt;) and dividing this by the bond price.&lt;/p&gt;
&lt;p&gt;The DAO receives an OHM-denominated payout equal to a percentage of the payout,
set by &lt;code&gt;terms.fee&lt;/code&gt;.&lt;/p&gt;
&lt;h4 id=&quot;5-mint-ohm-for-payout-and-dao-fee&quot;&gt;5. Mint OHM for payout and DAO fee&lt;/h4&gt;
&lt;p&gt;Next, the the &lt;code&gt;deposit(uint _amount, address _token, uint _profit)&lt;/code&gt; function of
the &lt;a href=&quot;https://etherscan.io/address/0x31F8Cc382c9898b273eff4e0b7626a6987C846E8#code&quot;&gt;treasury contract&lt;/a&gt; is called. This function&amp;#39;s purpose is to mint
OHM for the payout and for the DAO fee.&lt;/p&gt;
&lt;p&gt;The function takes a &lt;code&gt;_profit&lt;/code&gt; parameter, which is completely different from the
rebase &amp;quot;profit&amp;quot; that we talked about before. In this case, the profit is
computed as &lt;code&gt;profit = rfvValue - payout - fee&lt;/code&gt;. The only purpose of this
&lt;code&gt;_profit&lt;/code&gt; is that the treasury &lt;code&gt;deposit&lt;/code&gt; function will subtract it from the RFV
values of the tokens to obtain a &lt;code&gt;_send&lt;/code&gt; value: &lt;code&gt;_send = rfValue - profit = payout + fee&lt;/code&gt;. This determines the amount of OHM minted to the bond depository
contract, to be paid to the DAO and to be granted by the emitted bonds. If you
think it would have been immensely simpler to sent something like &lt;code&gt;_mint = payout + fee&lt;/code&gt;... you would be right. It makes very little sense, given for
instance that &lt;code&gt;rfvValue&lt;/code&gt; is denominated in USD while the payout and the fee are
denominated in OHM.&lt;/p&gt;
&lt;h4 id=&quot;6-pay-the-dao-and-perform-book-keeping&quot;&gt;6. Pay the DAO and perform book-keeping&lt;/h4&gt;
&lt;p&gt;The book-keeping part is important: this is where we actually record that the
user is entitled to redeem the payout!&lt;/p&gt;
&lt;p&gt;We also increase the total debt by the RFV value of the tokens supplied. This is
necessary to check the maximum debt and compute the debt ratio.&lt;/p&gt;
&lt;p&gt;Finally, just like the distributor contract, bond depository contracts have some
&amp;quot;adjustment&amp;quot; logic, used to smooth a transition in the value of the BCV. Unlike
the distributor, which adjusts during each rebase epoch, a depository contract
adjusts during every bond sale, which means changes can be relatively fast if
many bond sales occur in rapid succession.&lt;/p&gt;
&lt;h3 id=&quot;example&quot;&gt;Example&lt;/h3&gt;
&lt;p&gt;To make things hopefully a little bit clearer, let&amp;#39;s work through a bonding
example.&lt;/p&gt;
&lt;p&gt;Let&amp;#39;s assume that&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OHM is worth 70$ (as it was when I wrote this example)&lt;/li&gt;
&lt;li&gt;the OHM-DAI liquidity pool contains 100 OHM (and therefore
7000 DAI, which we&amp;#39;ll write 7000$ for convenience)&lt;/li&gt;
&lt;li&gt;the ownership of the pool is split accross 100 LP tokens, each of which is
worth &lt;code&gt;0.01 * 2 * 7000 = 140&lt;/code&gt; $&lt;/li&gt;
&lt;li&gt;the current debt ratio for the OHM-DAI bond depository contract is 5%&lt;/li&gt;
&lt;li&gt;the bond control variable (BCV) for the OHM-DAI contract is 207 (as it is at
the time for writing)&lt;/li&gt;
&lt;li&gt;the (thrice-daily) rebase rate is 0.24% (as it was when I wrote this)&lt;/li&gt;
&lt;li&gt;the DAO fee is 1%. This is currently 0% in both v1 and v2 bonds, and it&amp;#39;s
particularly difficult to find historical values (you&amp;#39;d have to run your own
node and re-execute transactions, since value changes are not even logged).&lt;/li&gt;
&lt;li&gt;the RFV backing per OHM is about 26$ (as it was ...)&lt;/li&gt;
&lt;li&gt;the market-value backing per OHM is about 60$ (as it was ...)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Under these condtions, the risk-free value (RFV) of such a DAI-OHM LP token is
&lt;code&gt;0.01 * 2 * sqrt(100 * 7000) ~= 16.73&lt;/code&gt; $.&lt;/p&gt;
&lt;p&gt;If a user uses a single LP token to purchase bonds, he would get back bonds that
would grant &lt;code&gt;(16.73 * 100) / (100 + 5 * 207) == 2.32&lt;/code&gt; OHM. This represents a
&amp;quot;premium&amp;quot; of 0.73 OHM compared to the market price, which is equivalent of an
effective OHM price of &lt;code&gt;140 / 2.32 = 60.34&lt;/code&gt; $, or an effective discount rate of
14% compared to the market price.&lt;/p&gt;
&lt;p&gt;A more realistic discount assessment would also consider that during the vesting
period of 5 days, the OHM supply will inflate by around 3.7% (&lt;code&gt;1.0024^(3*5) ~= 1.037&lt;/code&gt;), so the effective discount is closer to 10%, assuming the buyer redeems
at the end of the vesting period (of course, Ethereum transaction prices makes
the amounts we&amp;#39;re discussing completely unreleastic, but whatever).&lt;/p&gt;
&lt;p&gt;We&amp;#39;ll note that v2 bonds solve this issue by staking the granted amount
immediately, and so there is no loss due to inflation.&lt;/p&gt;
&lt;p&gt;So in this example, 2.343 OHM are emitted (&lt;code&gt;1.01 * 2.32&lt;/code&gt; to account for the DAO
fee), backed by 140$ of market value and 16.73$ of risk-free value (7.14$ per
OHM).&lt;/p&gt;
&lt;p&gt;In this case, the RFV backing per minted OHM (7.14$) is significantly less than
the current RFV backing per OHM (which is 26$). This means that each OHM emitted
in bonding decreases the backing per OHM.&lt;/p&gt;
&lt;p&gt;I&amp;#39;ll discuss this more in the economic analysis part, but this is an inherent
property of LP bond sales. Stablecoin bond sales, on the other hand, tend to
increase the RFV backing per OHM.&lt;/p&gt;
&lt;h2 id=&quot;coda&quot;&gt;Coda&lt;/h2&gt;
&lt;p&gt;That&amp;#39;s it! This ended up much longer than I expected, and also took longer to
write, but I learned a lot doing the research. I hope you enjoyed the deep dive,
and learned something!&lt;/p&gt;
      </description>
      <pubDate>2022-02-14T23:00:00.000Z</pubDate>
      <link>http://norswap.com/olympus</link>
      <guid isPermaLink="true">http://norswap.com/olympus</guid>
    </item>
    <item>
      <title>The Essence of Blockchains</title>
      <description>
&lt;p&gt;What are blockchains for? Why are they useful?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I contend that the essence of blockchain is that they are decentralized trust
engines.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Decentralized trust has a lot of benefits, but the one I&amp;#39;m personally excited
about is that it enables &lt;strong&gt;permissionless innovation&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Below I explain what the hell I mean by &lt;em&gt;decentralized trust&lt;/em&gt; and
&lt;em&gt;permissionless innovation&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id=&quot;who-do-you-trust&quot;&gt;Who do you trust?&lt;/h2&gt;
&lt;p&gt;Whenever you perform some action online, you&amp;#39;re always implicitly trusting some
entity.&lt;/p&gt;
&lt;p&gt;For instance, if you run a computation on Amazon Web Service (AWS), or even in
Google Sheets, you trust Amazon and Google not to alter the result of the
computation.&lt;/p&gt;
&lt;p&gt;If you host files on Dropbox, you trust Dropbox not to alter their content, and
to not arbitrarily destroy your backup.&lt;/p&gt;
&lt;p&gt;You trust that Google won&amp;#39;t return you completely fabricated search result to
get you to take some specific decision (e.g. a purchase) that is in their
interest. (They certainly influence search results, but they don&amp;#39;t (yet?)
fabricate them.)&lt;/p&gt;
&lt;p&gt;You trust that your bank won&amp;#39;t take your money. You trust that your insurer will
actually compensate you in case of accident.&lt;/p&gt;
&lt;p&gt;You might also trust all of these companies with the privacy of your data.&lt;/p&gt;
&lt;p&gt;Etc, etc...&lt;/p&gt;
&lt;p&gt;You might object that these companies won&amp;#39;t do these shady things. They stand to
lose a lot, including reputation, customers, future revenues, etc! As for banks
and insurances, they are heavily regulated.&lt;/p&gt;
&lt;p&gt;That&amp;#39;s true — although I will say these companies have gotten away with a
surprising number of things. But more importantly it means you can only deal
with entities that either (a) have something to lose or (b) comply with draconic
and time-consuming regulations — and mostly that means big entrenched companies.
We&amp;#39;ll explore this when we talk about &lt;em&gt;permissionless innovation&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Also consider that companies might be &lt;em&gt;forced&lt;/em&gt; to do something, probably by some
government.&lt;/p&gt;
&lt;h2 id=&quot;decentralized-trust&quot;&gt;&amp;quot;Decentralized&amp;quot; trust?&lt;/h2&gt;
&lt;p&gt;The fundamental proposition of blockchains is the following: &lt;strong&gt;What if you did
not have to trust a single entity, a single company?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In blockchains, there is a network of &lt;em&gt;nodes&lt;/em&gt; (aka &lt;em&gt;verifiers&lt;/em&gt;, &lt;em&gt;validators&lt;/em&gt;,
&lt;em&gt;stakers&lt;/em&gt;, &lt;em&gt;miners&lt;/em&gt;, ...) that verify the operations of the blockchains. As long
as a majority of these nodes are honest (e.g. 50% of them, this changes between
blockchains), you can trust that anything that happens on the blockchain follows
the rules of the blockchain. And dishonesty has dire consequences for validators
— because of sunk costs, or because of explicit penalties.&lt;/p&gt;
&lt;p&gt;This changes your trust assumption from trusting a single entity to trusting
that a majority of validators are honest.&lt;/p&gt;
&lt;p&gt;The more validators there are, the less collusion is likely. Said otherwise, the
more decentralized the system is, the less trust you need to put in the system.&lt;/p&gt;
&lt;p&gt;It is also of paramount importance that anyone be able to become a validator of
the network. Otherwise, the network is really controlled by the gatekeeper of
the validation rights. This is less easy than it sounds — you have to make
validation costly enough, otherwise an attacker could just spin a huge number of
nodes and take over the network — a &lt;a href=&quot;https://en.wikipedia.org/wiki/Sybil_attack&quot;&gt;sybil attack&lt;/a&gt;. Preventing sybil attacks is
the main technical breakthrough of blockchain technology. I explain the
solutions (proof-of-work and proof-of-stake) in my article: &lt;a href=&quot;https://norswap.com/blockchain-how&quot;&gt;&lt;strong&gt;Freaking
blockchains: How do they work?&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;applications--trade-offs&quot;&gt;Applications &amp;amp; Trade-Offs&lt;/h2&gt;
&lt;p&gt;Let&amp;#39;s go back to our examples. Am I saying that blockchains will supersede AWS,
Google Sheet, Google Search, Dropbox, banks and insurances?&lt;/p&gt;
&lt;p&gt;Not necessarily.&lt;/p&gt;
&lt;p&gt;In reality, there is a trade-off. Nothing is truly trustless or riskless.
Running most web apps on AWS is really fine, because the risk that Amazon is
going to manipulate your results is close to zero, and the downside if they do
is very low. Even if you&amp;#39;re running with a brand-new competitor, you&amp;#39;re not
risking all that much.&lt;/p&gt;
&lt;p&gt;But for some applications, trust and security are a really big deal. In
particular, where money is concerned. It&amp;#39;s not by accident that finance is
stringently regulated. And similarly, it&amp;#39;s not an accident that most popular
applications of blockchains right now deal with money. It&amp;#39;s doubly important
when you&amp;#39;re dealing with anonymous blockchain developers with no pre-existing
reputation (more on this in the section on permissionless innovation).&lt;/p&gt;
&lt;!--

Since we mentionned Dropbox, I will mention there are a few blockchains
specialized in storage, like [Arweave] and [Filecoin]. These are very useful if
censorship is a concern ([example][hong-kong]).

Privacy-wise, blockchains are not there yet, at least for computation. In most
blockchain, transactions are public! It&#39;s already possible the hide the
transactions using [zero-knowledge proofs][zkp], however the resulting
blockchain state modification is public. you are only &quot;protected&quot; by the
pseudonimity of your blockchain address, but that is a weak kind of protection.
This is a topic of ongoing research.

[Arweave]: https://www.arweave.org/
[Filecoin]: https://filecoin.io/
[hong-kong]: https://www.reuters.com/article/us-hongkong-security-apple-daily-blockch-idCAKCN2E00JP
[zkp]: https://en.wikipedia.org/wiki/Zero-knowledge_proof

--&gt;

&lt;h2 id=&quot;permissionless-innovation&quot;&gt;Permissionless Innovation&lt;/h2&gt;
&lt;p&gt;Finally, we come to what is to me the most exciting consequence of decentralized
trust: &lt;em&gt;permissionless innovation&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;On computation-centric blockchains, like &lt;a href=&quot;https://ethereum.org/en/&quot;&gt;Ethereum&lt;/a&gt;,
the network certifies computation, and the code of the computation is a public
smart contract stored on the blockchain, you can trust the contract to do what
its code says, nothing more and nothing less.&lt;/p&gt;
&lt;p&gt;This means that &lt;em&gt;anybody&lt;/em&gt; can deploy a new smart contract, and other people can
use it as long as they trust the code. The contract author does not need to have
resources, a reputation or even to comply with regulations (1) to deploy his
contract, or for you to trust that the contract will be executed faithfully.&lt;/p&gt;
&lt;p&gt;(1) He &lt;em&gt;has to&lt;/em&gt;, legally speaking, but blockchains being novel, it&amp;#39;s unclear
which rules apply in the first place. Such &lt;a href=&quot;https://en.wikipedia.org/wiki/Fear,_uncertainty,_and_doubt&quot;&gt;FUD&lt;/a&gt; would normally stifle
innovation — but not on the blockchain where the barrier to entry is low, and
many developers are anonymous.&lt;/p&gt;
&lt;p&gt;This is super exciting! It has already led to numerous innovations in the
financial realm, such as &lt;a href=&quot;https://www.paradigm.xyz/2021/04/understanding-automated-market-makers-part-1-price-impact/&quot;&gt;automated market makers&lt;/a&gt; (AMM), as well as many
new forms of clever incentivization mechanisms such as &lt;a href=&quot;https://academy.shrimpy.io/post/what-is-liquidity-mining&quot;&gt;liquidity mining&lt;/a&gt;,
&lt;a href=&quot;https://www.okex.com/academy/en/olympusdao-protocol-owned-liquidity-defi-reserve-currency-ohm&quot;&gt;liquidity purchases via bonding&lt;/a&gt;, and more.&lt;/p&gt;
&lt;p&gt;Besides brand new constructions, it also makes opportunities available to
everyone that were previously available only to a few. Option protocols such as
&lt;a href=&quot;https://docs.lyra.finance/&quot;&gt;Lyra&lt;/a&gt; make it possible for everyone to profit from market-making the option
market: a process where the &lt;em&gt;market maker&lt;/em&gt; sells an option, which is hedged by
the underlying, in order to pocket the option premium. (If this is Chinese to
you, see my articles on &lt;a href=&quot;https://norswap.com/options/&quot;&gt;options&lt;/a&gt; and on &lt;a href=&quot;https://norswap.com/gamestop/&quot;&gt;gamma squeezes&lt;/a&gt;.) Previously, this
lucrative and relatively safe opportunity reserved to big investment banks.
On-chain, everyone can add their money to a pool and participate!&lt;/p&gt;
&lt;p&gt;And this is just an example amongst many. Another one would be &lt;a href=&quot;https://medium.com/coinmonks/what-is-liquidation-in-defi-lending-and-borrowing-platforms-3326e0ba8d0&quot;&gt;lending to
overcollateralized borrowers&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Hopefully, more areas can benefit from this innovative drive besides finance.
One area that looks promising at the moment is gaming. Increasingly, game
development is financed by the sales of in-game assets (skins, character
customizations, convenience features, ...). One could be hesitant to buy into a
relatively unknown game. Using the blockchain to encode these assets incurs many
benefits: it can be made certain that they won&amp;#39;t disappear at the whim of the
developer, that they are tradeable without the developer investing any resources
to make them so. Even better, another developer could decide to reuse the
assets, and give them a function within his own game.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I think the use of blockchain in gaming is at the same stage where
&lt;a href=&quot;https://en.wikipedia.org/wiki/Peer-to-peer&quot;&gt;peer-to-peer&lt;/a&gt; (P2P) technology used to be some 20 years back. P2P had a
terrible reputation as a thing used only to download copyrighted material. Yet
only a few years later it became a common way to distribute big games and their
updates, proving invaluable at handling the load on release day.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Or maybe crypto gaming doesn&amp;#39;t work out. Who knows? There are &lt;strong&gt;many&lt;/strong&gt; other
areas in which people are building on the blockchain at the moment. Most
projects will fail, but those who succeed might create immense value (I&amp;#39;m
talking about usefulness, not money), and these wouldn&amp;#39;t have gotten built
without the blockchain.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I&amp;#39;ll simply recap the thesis: blockchain are decentralized trust engines.
Instead of trusting a single service provider, you trust a majority of the
validators to be honest — and they are incentivized to be.&lt;/p&gt;
&lt;p&gt;On decentralized computation blockchains like Ethereum, this enable anybody to
deploy a smart contract, and anybody else to trust that the code will be
executed faithfully (it still requires reading and understanding the code!).&lt;/p&gt;
&lt;p&gt;This enables permissionless innovation: anybody can innovate, not only big
companies with a reputation, or with government sign-off — even when money is
involved.&lt;/p&gt;
&lt;p&gt;It also enables anybody to port existing constructions to the blockchain, for
all to take advantage of (e.g. option market-making).&lt;/p&gt;
&lt;p&gt;Hopefully, these innovations will spread outside finance in the future.&lt;/p&gt;
&lt;h2 id=&quot;ps&quot;&gt;PS&lt;/h2&gt;
&lt;p&gt;The subject seems to be momentous, and here are two excellent recent pieces that
harp on the value of decentralization:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://mnot.github.io/avoiding-internet-centralization/draft-nottingham-avoiding-internet-centralization.html&quot;&gt;Avoiding Internet Centralization&lt;/a&gt; talks about the importance of
decentralizing the internet&amp;#39;s infrastructure, but many of its arguments are
valid arguments against centralization in general. (It also makes clear that
blockchains aren&amp;#39;t really the solution for low-level internet infrastructure.)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.chris-granger.com/2021/12/09/is-web3-anything/&quot;&gt;Is Web3... anything?&lt;/a&gt; is similar to this post and explains
blockchains as &amp;quot;a protocol/architecture for near-trustless commitments&amp;quot;.&lt;/li&gt;
&lt;/ul&gt;
      </description>
      <pubDate>2021-12-10T23:00:00.000Z</pubDate>
      <link>http://norswap.com/essence-blockchains</link>
      <guid isPermaLink="true">http://norswap.com/essence-blockchains</guid>
    </item>
    <item>
      <title>How rollups scale Ethereum</title>
      <description>
&lt;p&gt;From the &lt;a href=&quot;https://hackmd.io/ZJR05zr-SP-tm1D9aqKJaA&quot;&gt;overview&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Ethereum&amp;#39;s limited resources, specifically bandwidth, computation, and
storage, constrain the number of transactions which can be processed on the
network, leading to extremely high fees. Scaling Ethereum means increasing the
number of useful transactions the Ethereum network can process, by increasing
the supply of these limited resources.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;But how do rollups increase these resources? To understand this, we first need
to give some details about layer-1 (L1) Ethereum.&lt;/p&gt;
&lt;h2 id=&quot;state-in-l1-ethereum&quot;&gt;State in L1 Ethereum&lt;/h2&gt;
&lt;p&gt;The size of the L1 state &lt;a href=&quot;https://youtu.be/LjGPCX2V1qk?t=267&quot;&gt;as per summer 2021&lt;/a&gt; was around 35GB.
However, during execution, the state needs to be stored in a &lt;a href=&quot;https://github.com/norswap/nanoeth/tree/master/src/com/norswap/nanoeth/trees/patricia#readme&quot;&gt;Merkle Patricia
Tree&lt;/a&gt; (MPT), which takes the effective stored size to 100GB. This size is
expected to grow by 50GB per year, assuming the Ethereum &lt;a href=&quot;https://ethereum.org/en/developers/docs/gas/#what-is-gas-limit&quot;&gt;gas limit&lt;/a&gt; stays
constant. These amounts does not even include historical state, some of which
&lt;strong&gt;must&lt;/strong&gt; be kept to be able to process &lt;a href=&quot;https://www.paradigm.xyz/2021/07/ethereum-reorgs-after-the-merge/&quot;&gt;chain reorganizations&lt;/a&gt;. A node
must also keep at least some recent block header data.&lt;/p&gt;
&lt;p&gt;Currently, core developers are not increasing the gas limit because we expect
higher throughput to cause faster state growth.&lt;/p&gt;
&lt;p&gt;Still these numbers are manageable. 4TB SSD drives can be purchased for 400$ or
less. So why don&amp;#39;t we just increase the gas limit?&lt;/p&gt;
&lt;h2 id=&quot;why-not-increase-the-gas-limit&quot;&gt;Why not increase the gas limit?&lt;/h2&gt;
&lt;p&gt;There are two reasons. The first is a commitment to keep Ethereum as
decentralized as possible, which includes making it possible for as many people
as possible to validate the network. We could increase the gas limit and require
every validator to spend a few thousand dollars to participate and this wouldn&amp;#39;t
really decrease the security of the network. However, the same kind of reasoning
could be repeatedly applied to take us to a situation where you&amp;#39;d need to rent
in a data center to validate the network. This is extremely undesirable, because
it would let a small number of majority actors (e.g. staking pools) collude with
very few people noticing.&lt;/p&gt;
&lt;p&gt;Let me give just one possible scenario. A majority cabal of staking pools could
claim to run a jointly-developed custom client, which so happened to have a
&amp;quot;subtle bug&amp;quot; that associates of the pools are able to exploit for profit. The
few remaining honest actors need to detect and then identify the problem — are
the pools or the other validators correct? The pools could make this
investigation difficult, and by the time the &amp;quot;bug&amp;quot; surfaces, the chain has moved
on so far that a fork becomes unthinkable. The pools can maintain plausible
deniability by claiming this was an innocent bug.&lt;/p&gt;
&lt;p&gt;Like a lot of things in the blockchain space, this is a social problem as much
as a technical one. One reason more eyes on the chain is better is because it
can cause more outcry in case of fraud, and give legitimacy to the correct fork.&lt;/p&gt;
&lt;p&gt;The second reason we don&amp;#39;t want to increase the gas limit is &lt;a href=&quot;https://www.parity.io/blog/what-is-a-light-client/&quot;&gt;light clients&lt;/a&gt;.
Light clients are clients that can validate the network but are not required to
store the state. Instead they can request the state from the network and
validate it against state roots stored in recent block headers. Light clients
allow reducing the reliance on centralized state providers like Infura.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Aside: how light clients work&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A light client needs to start with a trusted block header (either coming from
an initial sync or trusted source). Let&amp;#39;s assume that this hash is a
semi-recent block hash, updated each time you use your light-client-enabled
wallet. Then, the next time you use your wallet, you need to get all the block
headers between that trusted header and the current head of the chain. There
are solutions to validate these headers in both proof-of-work and
proof-of-stake, but let&amp;#39;s focus on the latter, as it is Ethereum&amp;#39;s future.&lt;/p&gt;
&lt;p&gt;To verify a block header, you&amp;#39;ll need to determine that the block was indeed
signed by known Ethereum validators (stakers). The validator data is small
enough that it could be kept locally, or you can request it from the network
and validate it against the trusted block header.&lt;/p&gt;
&lt;p&gt;Once you&amp;#39;re caught up with the chain (which should be fast unless you haven&amp;#39;t
opened your wallet in months/years), you can speculatively execute
transactions locally, or even execute whole new blocks yourself. During these
executions, you&amp;#39;ll need to request the state from the network, which you can
again validate against the state Merkle root in the most recent block header.&lt;/p&gt;
&lt;p&gt;This state can even be obtained from a centralized provider. The difference is
that you do not need to trust him anymore: now you can verify the state
against block headers, and you run the computations yourself.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Light clients are expected to run on user&amp;#39;s machines (laptops, cell phones) and
only sporadically (e.g. when using a wallet). Clearly this puts a limit on
storage, computation and bandwidth. The storage is solved by getting the state
from the network, but this further constrains bandwidth.&lt;/p&gt;
&lt;p&gt;Increasing the gas limit too much would overwhelm light-client&amp;#39;s ability to
catch up and keep up with the chain, in terms of bandwidth and computation.&lt;/p&gt;
&lt;p&gt;Finally, light clients help keep Ethereum decentralized by creating more
validators. Light clients associated with wallets are a formidable deterrent
because it means these wallets won&amp;#39;t transact on fraudulent chains, even if they
are supported by a majority of miners/stakers. Vitalik Buterin makes this point
&lt;a href=&quot;https://vitalik.ca/general/2021/05/23/scaling.html#its-crucial-for-blockchain-decentralization-for-regular-users-to-be-able-to-run-a-node&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;enter-rollups&quot;&gt;Enter Rollups&lt;/h2&gt;
&lt;p&gt;I first want to acknowledge the fact that how rollups scale Ethereum — while
preserving its security guarantees — is not as straightforward as it is often
made out to be.&lt;/p&gt;
&lt;p&gt;The scaling property of rollups falls out from two facts:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A rollup needs orders of magnitude less validators than L1 to maintain its
security. As long as a single honest validator does its job, the network will
remain secure.&lt;/li&gt;
&lt;li&gt;State growth can be spread between multiple independent rollups.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let&amp;#39;s look at (1) first. In an &lt;a href=&quot;https://vitalik.ca/general/2021/01/05/rollup.html&quot;&gt;optimistic rollup&lt;/a&gt;, the rollup will be secure if
there is always a validator that can submit a fraud proof for every detected
sequencer fraud. Therefore, it is okay to increase the requirements needed to
run these validators, as long as motivated entities and individuals are able to
run them. Note also that many entities have a vested interest in running these
validators, because they derive value from the rollup: data and insight
providers like Infura, The Graph, Dune Analytics; as well as projects building
on top of the rollup. Unlike in my &amp;quot;evil staking pools&amp;quot; scenario, a majority of
bad actors is no longer able to get away with fraud!&lt;/p&gt;
&lt;p&gt;In a &lt;a href=&quot;https://vitalik.ca/general/2021/01/05/rollup.html&quot;&gt;zk rollup&lt;/a&gt;, you do not need validators at all for security (you might need
them for data availability however, depending on the architecture of the
rollup), but you need to trust the code of the zk verifier smart contract. While
no external validators are needed, the requirements on the prover (the zk
pendant of the sequencer) are extreme, as building the zk proofs is very costly.&lt;/p&gt;
&lt;p&gt;Regarding (2), this lets different validators verify different parts of the
state, hence not imposing the burden of the extra state of every rollup on every
validator. Because of (1), we know that it&amp;#39;s okay for each rollup to have many
less validators than L1. This is also the insight behind &lt;a href=&quot;https://ethereum.org/en/eth2/shard-chains/&quot;&gt;sharding&lt;/a&gt; — though in
this case the reduced validator requirement does not apply and is solved with
&lt;a href=&quot;https://vitalik.ca/general/2021/04/07/sharding.html&quot;&gt;random committee selection&lt;/a&gt; instead.&lt;/p&gt;
&lt;h2 id=&quot;in-summary&quot;&gt;In Summary&lt;/h2&gt;
&lt;p&gt;We can&amp;#39;t just raise the gas limit to scale Ethereum, because that would raise
hardware requirements for validators, and the chain needs to be validated as
broadly as possible to avoid a collusion of majority actors. It would also
preclude the introduction of light clients to break our reliance on centralized
data providers.&lt;/p&gt;
&lt;p&gt;Rollups help scale Ethereum because they require order of magnitude less
validators than L1 to stay secure (via the use of fraud proofs or zero-knowledge
proofs), hence the requirements for validators can be increased. Additionally,
the state growth between multiple rollups that can be validated separately.&lt;/p&gt;
      </description>
      <pubDate>2021-12-03T23:00:00.000Z</pubDate>
      <link>http://norswap.com/rollups-scale</link>
      <guid isPermaLink="true">http://norswap.com/rollups-scale</guid>
    </item>
    <item>
      <title>Life Updates</title>
      <description>
&lt;p&gt;It&amp;#39;s been a crazy year. It was already crazy &lt;a href=&quot;https://norswap.com/ragged&quot;&gt;back in March&lt;/a&gt;, but
against my better judgement, I (thankfully!) doubled down.&lt;/p&gt;
&lt;p&gt;In June, I took a leave from my Job at Oracle to take part in the &lt;a href=&quot;https://blog.ethereum.org/2021/05/13/core-dev-apprenticeship/&quot;&gt;Ethereum Core
Developer Apprenticeship&lt;/a&gt; for four months. I learned a ton — here&amp;#39;s &lt;a href=&quot;https://github.com/ethereum-cdap/cohort-zero/blob/main/showcase/norswap.md&quot;&gt;a
recap&lt;/a&gt; of what I did there.&lt;/p&gt;
&lt;p&gt;By the end of the program, I was sold, and I joined &lt;a href=&quot;https://www.optimism.io/&quot;&gt;Optimism&lt;/a&gt; to work on
scaling the Ethereum blockchain. My first task there will be to help &lt;a href=&quot;https://github.com/ethereum-optimism/optimistic-specs&quot;&gt;specify
and prototype&lt;/a&gt; the new version of the Optimistic Ethereum rollup. It&amp;#39;s
been a blast so far!&lt;/p&gt;
&lt;p&gt;Expect more content soon, especially blockchain-related. If you hate blockchains
— I&amp;#39;m so sorry.&lt;/p&gt;
      </description>
      <pubDate>2021-12-03T23:00:00.000Z</pubDate>
      <link>http://norswap.com/life-updates</link>
      <guid isPermaLink="true">http://norswap.com/life-updates</guid>
    </item>
    <item>
      <title>Reviews 11</title>
      <description>
&lt;p&gt;Part of the &lt;a href=&quot;https://norswap.com/reviews&quot;&gt;Reviews Series&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;cobra-kai&quot;&gt;Cobra Kai&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;TV&lt;/li&gt;
&lt;li&gt;Season 3&lt;/li&gt;
&lt;li&gt;previously: &lt;a href=&quot;https://norswap.com/reviews-10#cobra-kai&quot;&gt;Season 1 &amp;amp; 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In my review of the first season, I said the show was constantly toeing the line
of overuse on its narrative ropes. I really enjoyed the third season too, but
it&amp;#39;s clearly the season where the line gets crossed.&lt;/p&gt;
&lt;p&gt;Rest of the review behind the spoiler tag!&lt;/p&gt;
&lt;details&gt;&lt;summary&gt;Click for spoilerful review.&lt;/summary&gt;

&lt;p&gt;There&amp;#39;s good and there&amp;#39;s bad in the storylines and character development arcs.&lt;/p&gt;
&lt;p&gt;Last time, I said I would be interested in how they handled Tory and Kreese.
Tory is very much in the background. Her difficult background is briefly
glimpsed, but mostly that doesn&amp;#39;t make her more relatable. Instead of being a
crazy bitch, she&amp;#39;s now a crazy bitch in a difficult situation — but that
happens, and it&amp;#39;s not necessarily bad.&lt;/p&gt;
&lt;p&gt;Kreese gets a lot of attention, in particular through the flashback fleshing his
background. The issue is it doesn&amp;#39;t work one bit. I reckon the goal of the
flashback is to explain how Kreese got the way he was. But it doesn&amp;#39;t really.
Past Kreese is mostly sympathetic and good-hearted. What he goes through doesn&amp;#39;t
even explain why someone would become angry, bitter, violent, cynical, and
jaded. They could have pulled that off, but they didn&amp;#39;t. But what they really
needed to pull off is to explain how he became a sociopath. Of course, people
don&amp;#39;t really suddenly become sociopaths (barring extremely extravagant plot
events and/or brain damage), so they would have had a hard time pulliing that
one off. The result is that the flashbacks have almost zero tie-in to the rest
of the story (except explaining the origin of the term &amp;quot;Cobra Kai&amp;quot;), which is
weird. Maybe they&amp;#39;ll continue in the next season, but I&amp;#39;m not confident in their
ability to salvage the plot line.&lt;/p&gt;
&lt;p&gt;The biggest missed opportunity of the season lies in a character whose storyline
gets really butchered: Hawk. Since the first season, it&amp;#39;s obvious they are
setting up a redemption/reconciliation arc between Hawk and Demetri. Compared to
the other storylines, this one already felt sluggish. But mostly, things move
along, coming to a head when Hawk breaks Demetri&amp;#39;s arm. This should be the
breaking point (pun intended) for Hawk. Afterwards, it&amp;#39;s just awkward. I get
they wanted him to flip in the final battle, but the timing just makes this
awkward. Triple akward in fact as Demetri immediately welcomes him back (&amp;quot;don&amp;#39;t
worry for my arm bro!&amp;quot;), robbing the whole thing of its emotional payload. They
also just push things way too far with Cobra Kai being assholes I think,
removing a lot of the nuance that made the show great. There&amp;#39;s being an asshole
and then there&amp;#39;s being a caricature of caricature of an asshole.&lt;/p&gt;
&lt;p&gt;Daniel&amp;#39;s Japanese adventure is meh, and feels like a huge wink. The
&amp;quot;Daniel-san!!&amp;quot; cliffhanger is so cringe.&lt;/p&gt;
&lt;p&gt;Aisha went MIA, probably for actor&amp;#39;s reasons.&lt;/p&gt;
&lt;p&gt;Robby&amp;#39;s storyline is retarded, plain and simple. His action don&amp;#39;t really add up,
especially the ending point of &amp;quot;Kreese is cool, he told me to fight — never mind
he just tried to stab you&amp;quot;.&lt;/p&gt;
&lt;p&gt;Okay, so I&amp;#39;m very negative and a bit disappointed — but I actually mostly
enjoyed the thing. I probably couldn&amp;#39;t bring myself to write such a long review
for a thing I didn&amp;#39;t care about anyway.&lt;/p&gt;
&lt;p&gt;Let&amp;#39;s talk about some good things. Johnny and Miguel&amp;#39;s storyline were pretty
good. I was pleasantly surprised that the Amy plotline did not feature some
misunderstanding between Johny &amp;amp; Carmen. Demetri is hilarious as always and
standing up for himself.&lt;/p&gt;
&lt;p&gt;Can season 4 pull an Attack on Titan and turn this ship around?&lt;/p&gt;
&lt;/details&gt;

&lt;hr&gt;
&lt;h2 id=&quot;lupin&quot;&gt;Lupin&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;TV show&lt;/li&gt;
&lt;li&gt;Part 1 (6 episodes)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://norswap.com/reviews-11/lupin.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Lupin is the first French TV show I&amp;#39;ve watched in forever. And, oh shock, it&amp;#39;s
actually pretty good.&lt;/p&gt;
&lt;p&gt;The story centers around Assane Diop (played by the excellent Omar Sy), a
professional thief. When he was young, his father was framed for a theft he
didn&amp;#39;t commit — something Assane only learns at the start of the season. We then
follow his struggle against his mighty enemies, in order to get justice for his
father.&lt;/p&gt;
&lt;p&gt;Assane is inspired and emulates the character of Arsène Lupin — the gentleman
burglar. This leads to a series of clever plans, tricks and deceptions that make
the show quite entertaining.&lt;/p&gt;
&lt;p&gt;Besides the great story, the show also benefits from the insane charisma of Omar
Sy, who really sells the character.&lt;/p&gt;
&lt;p&gt;Truly, a pleasure to watch.&lt;/p&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube-nocookie.com/embed/ga0iTWXCGa0&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;

&lt;hr&gt;
&lt;h2 id=&quot;pragmatic-capitalism&quot;&gt;Pragmatic Capitalism&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Book, by Cullen Roche&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This was a book I enqueued on my read list when I started to learn about
finance. I have mixed feelings about it.&lt;/p&gt;
&lt;p&gt;The book is mostly concerned with discussing the monetary system, with some
investment portfolio advice thrown in the middle. This is not capitalism, it&amp;#39;s
not finance, it&amp;#39;s macro-economics. Fine, but what not what I expected from the
book.&lt;/p&gt;
&lt;p&gt;The description of the monetary system itself is well-meaning, but falls short
for me. I&amp;#39;m not quite sure who the intended audience is. Roche keeps emphasizing
some points — common misconceptions that seem to be his pet peeves — and to his
credit that is very clear, though a little preachy. More advanced topics are
unfortunately not that well-explained and seem to assume some familiarity with
the system already.&lt;/p&gt;
&lt;p&gt;You can tell Roche means well, but its content would have worked better as a
series of blog posts. It would be hard to me to recommend it to anyone. It&amp;#39;s too
long to be an introduction, doesn&amp;#39;t go far enough to be textbook, and doesn&amp;#39;t
explain the advanced concepts well-enough anyway. The portfolio advice is also
well-meaning but all the same, I don&amp;#39;t particularly recommend it.&lt;/p&gt;
&lt;p&gt;It&amp;#39;s not a bad book, but I&amp;#39;m not sure what it&amp;#39;s trying to achieve. Meh.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;fff-class-trashhero&quot;&gt;FFF-Class Trashhero&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Webtoon&lt;/li&gt;
&lt;li&gt;up to chapter 86&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Another entry in the leveling genre. In this one, we join the hero (that has
been summoned to another world to defeat the demon king, nothing unusual) after
he defats the demon king. However, it turns out that his performance is being
graded, and he fails, because he actually murdered his party before confronting
the demon king. So now he has to start all over again.&lt;/p&gt;
&lt;p&gt;Why did he do such a thing? From his point of view, he was being abducted
against his will, and the people in this fantasy land actually mistreated him
pretty badly, beating him to toughen him up, having him run nonsensical errands,
etc.&lt;/p&gt;
&lt;p&gt;The story is fairly comedic in nature, there&amp;#39;s some slapstick humor
à-la-&lt;a href=&quot;https://norswap.com/every-anime/#konosuba&quot;&gt;Konosuba!&lt;/a&gt;, albeit much less charming. But it sits uneasy between its dark
premise and the comedic element. The hero&amp;#39;s character is terrible, but the story
is earnest in telling us that he has good reasons for it — he&amp;#39;s not just being
silly. At the same, the story also depends on its dumb factor. The hero starts
being evil from the get-go in his second attempt, even as that&amp;#39;s obviously not
the correct way to succeed.&lt;/p&gt;
&lt;p&gt;At some point, it also veers into a weird over-the-top power trip, and I&amp;#39;m not
sure how the author will extirpate himself from this mess.&lt;/p&gt;
&lt;p&gt;I enjoyed this, but I would have enjoyed it much more if the comedic element was
dropped and the premise was left to shine. What could a bitter hero have done to
try to pass while being subjected to the rules (or break free in other ways, or
get revenge)? And there are already plenty of elements that could have made that
good (for instance, how good or bad is it to kill a king to avoid a war?).&lt;/p&gt;
&lt;p&gt;Still, everything before the power trip was engaging enough.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;kill-the-hero&quot;&gt;Kill The Hero&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Webtoon&lt;/li&gt;
&lt;li&gt;up to chapter 53&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A fairly classical leveling-genre entry. The setting is very similar to &lt;a href=&quot;https://norswap.com/reviews-9/#solo-leveling&quot;&gt;Solo
Leveling&lt;/a&gt; (modern-day South Korea, dungeons appear, some people get power, and a
whole semi-corrupt industry of &amp;quot;heroes&amp;quot; springs up). The twist is that the
protagonist is also a returnee that was betrayed in his previous life (another
super common trop of the genre). Hence &amp;quot;kill the hero&amp;quot;, where the &amp;quot;hero&amp;quot; is
actually this scheming villain that everybody thinks is good. I was hoping the
title was referring to some story-telling twist or some unusual perspective, but
not really.&lt;/p&gt;
&lt;p&gt;This one is bog-standard, but indubitably well done.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;the-great-mage-returns-after-4000-years&quot;&gt;The Great Mage Returns After 4000 Years&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Webtoon&lt;/li&gt;
&lt;li&gt;up to chapter 82&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Another &amp;quot;leveling&amp;quot; story that takes some of the basic genre building blocks and
arranges them in yet another configuration. In this one, a very powerful mage
(just like in &lt;a href=&quot;https://norswap.com/reviews-10/#i-am-the-sorcerer-king&quot;&gt;I am The Sorcerer King&lt;/a&gt;) dies and returns in the future, this
future is not modern-day South Korea, but instead some kind of medieval fantasy.&lt;/p&gt;
&lt;p&gt;In his previous life, the mage was defeated by a &lt;em&gt;demigod&lt;/em&gt;, some kind of
malevolent super-powerful entity. In his new life, the mage seeks to find out
what happened to his companions and to take on the demigods.&lt;/p&gt;
&lt;p&gt;The story is a bit more earnest than average, and the tone reminded me of &lt;a href=&quot;https://norswap.com/reviews-9/#the-beginning-after-the-end&quot;&gt;The
Beginning After The End&lt;/a&gt;, which is great since that&amp;#39;s one of the best leveling
webtoons out there. Recommended.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;your-throne&quot;&gt;Your Throne&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Webtoon&lt;/li&gt;
&lt;li&gt;up to chapter 67&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Finally, a webtoon that&amp;#39;s not about people powering up! This one follows two
noble lady — Medea and Psyche. The cold ruthless Medea was promised to the crown
prince, before the engagement was broken and he chose to get engaged to the
sweet innocent Psyche. Medea swears to have revenge and retrieve what is
rightfully hers. And then a lot of things happen but I don&amp;#39;t want to spoil you.&lt;/p&gt;
&lt;p&gt;This is pretty well done. One criticism I have is that it&amp;#39;s at times a bit
confusing. Another one is that it departs from the traditional &lt;em&gt;arc&lt;/em&gt; format.
While I applaud initiatives to be less formulaic, arcs are used because they
work, and this works less well. What would have been arcs in other stories
instead blend into one another. And I don&amp;#39;t mean this in the positive, &amp;quot;story
expertly woven&amp;quot; way. Instead, we&amp;#39;re not given the time to breathe, assimilate
what happened, participate in the protagonist&amp;#39;s happiness, sadness, triumph or
defeat and instead we&amp;#39;re immediately trust into the next thing.&lt;/p&gt;
&lt;p&gt;I think saying the story doesn&amp;#39;t breathe enough is maybe clearer. As a result,
it becomes much more emotionally muted than it could be. Its high points don&amp;#39;t
take you that high, and its low points don&amp;#39;t take you that low. Which is too
bad, because the story has potential.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;akudama-drive&quot;&gt;Akudama Drive&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Anime&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I watched on the recommendations of a few friends who said it was one of the
best anime of the Fall 2020 season (this was a particularly dry season for me, I
don&amp;#39;t think I watched a single other anime from it, excepted giving &lt;a href=&quot;https://norswap.com/reviews-9/#jujutsu-kaisen&quot;&gt;Jujutsu
Kaisen&lt;/a&gt; a try).&lt;/p&gt;
&lt;p&gt;I ended up nonplussed. Like, it&amp;#39;s not bad. It&amp;#39;s not that great either. It&amp;#39;s
annoying because there are a lot of great things about it. I really dig the
aesthetic, the character design is top-notch, the animation looks very good, the
music is quite nice. But the story never really got me invested or even
interested. The stakes are not that much, character development is meh-meh-meh,
the ending is unsatisfying.&lt;/p&gt;
&lt;p&gt;I think I&amp;#39;d recommend it if you really dig the outrun/retrowave/neon sci-fi
aesthetic or if you watch anime for the eye candy. If you&amp;#39;re story-driven, this
will leave you hungry.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;unordinary&quot;&gt;unOrdinary&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Webtoon&lt;/li&gt;
&lt;li&gt;up to chapter 235&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://norswap.com/reviews-11/unordinary.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;This one looks straightforward, but I actually found it to be quite weird. In
this world, most people get a special ability (usually fighting-related — I
appreciated how straightforward they all were), and the strong trample on the
weak in a very hierarchical society.&lt;/p&gt;
&lt;p&gt;The story follows John, who doesn&amp;#39;t have any ability, as he has a hard time at
his high school, being unpowered as he is but still rather proud. Many twists
ensue.&lt;/p&gt;
&lt;p&gt;So what makes this weird? Well, first, the society being depicted is despicable.
Unrealistically, and unsustainably so, in fact. By the way, fair warning, if you
don&amp;#39;t want to see kids beat each other meanly and bloodily for 200 chapters, you
probably shouldn&amp;#39;t read this. There&amp;#39;s bullying on every second panel.&lt;/p&gt;
&lt;p&gt;Still, surprisingly, no one ever dies — even after someone uses their head to
bash some concrete. Nobody ever goes for the eyes somehow. In a world so full of
bullying, there also isn&amp;#39;t a single mention of suicide. Honestly, the world is
so bad that you&amp;#39;d expect that to pop up, and also strong people to be murdered
in their sleep.&lt;/p&gt;
&lt;p&gt;But alright, none of that happens, and to enjoy the story you really got to take
as a premise that it is the way of that particular world to be like this.&lt;/p&gt;
&lt;p&gt;This has another awkward consequence, which is that almost everyone in the story
is despicable. Yes, even the main character. There are maybe two main characters
that are not loathsome, but they were strong and uncaring in a world where you
can&amp;#39;t walk through two hallways without finding some bullying, which uhhhm ...
eeeeh. Some people start to improve towards the end, and to the credit of the
writing, this is done in a subtle way.&lt;/p&gt;
&lt;p&gt;You know what else is strangely lacking in a high-school setting? Nobody seems
to have the slightest interest in romance and/or sex.&lt;/p&gt;
&lt;p&gt;Webtoons often shy away from these themes, for what I ignorantly assume must be
weird Korean cultural reasons? Although seeing that K-Drama is a thing, this at
least makes no sense for romance. Often, there is some romance slapstick, like
unreciprocated crushes, tsundere moments, and even the occasional lewd event
where the male MC&amp;#39;s head lands on some woman&amp;#39;s breasts. I really don&amp;#39;t get the
absence of these themes, which are interesting and complex and inherently
interesting to us humans. Someone please enlighten me.&lt;/p&gt;
&lt;p&gt;Anyway, unOrdinary doesn&amp;#39;t even have the slapstick. Nobody expresses even a iota
of romantic intentions or sexual tension. And that&amp;#39;s just weird.&lt;/p&gt;
&lt;p&gt;With all that said, unOrdinary&amp;#39;s story is quite gripping. Despite its characters
being often (or at least initially) loathsome, it&amp;#39;s a character-driven story and
the characters &lt;strong&gt;are&lt;/strong&gt; well-written. They have clear motivations, personalities,
and as alluded earlier, there is real character development. The broader story
is also solid enough that it makes you want to keep reading to know what will
happen and how the characters will end up being implicated in it.&lt;/p&gt;
&lt;p&gt;I&amp;#39;m conflicted about this one. On the one hand, I found it hard to put down once
I got started, and there is objectively a lot that it does well on the
story-telling front. Perhaps my problem with it is a lack of relatability to the
characters, given the problems with the setting.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;second-life-ranker&quot;&gt;Second Life Ranker&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Webtoon&lt;/li&gt;
&lt;li&gt;up to chapter 84&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Yet another formulaic leveling webtoon. A confusingly-named one at that, since
in this one, the MC does not return from his previous life, but instead goes by
the notes left by his deceased brother.&lt;/p&gt;
&lt;p&gt;I don&amp;#39;t have much else to say, it&amp;#39;s fairly classic as an entry, but quite well
done. You&amp;#39;ll like this if you like the other leveling webtoon, and vice-versa.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;raid&quot;&gt;Raid&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Webtoon&lt;/li&gt;
&lt;li&gt;up to chapter 95&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Yep, another level webtoon! This one is of the Solo Leveling &amp;quot;monster gates
spawn all over Korea&amp;quot; persuasion, though with less emphasis on RPG mechanics (no
skill windows!) and less of a fantasy theme (no orcs and goblins and the rest of
the fantastic bestiary, just plain old demons).&lt;/p&gt;
&lt;p&gt;Aaand, it&amp;#39;s okay. Entertaining, but clearly a notch under &lt;a href=&quot;https://norswap.com/reviews-11/#kill-the-hero&quot;&gt;Kill The Hero&lt;/a&gt; and
&lt;a href=&quot;https://norswap.com/reviews-11/#second-life-ranker&quot;&gt;Second Life Ranker&lt;/a&gt; as far as not-particularly-original entries go.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;castlevania&quot;&gt;Castlevania&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Anime&lt;/li&gt;
&lt;li&gt;Season 4&lt;/li&gt;
&lt;li&gt;Previously: &lt;a href=&quot;https://norswap.com/reviews-6/#castlevania-all-3-seasons&quot;&gt;Seasons 1-3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In its final season, Castelevania keeps being good, but imperfect, but damn
entertaining.&lt;/p&gt;
&lt;p&gt;Compared to the previous seasons, I feel like this one steps up the game in
terms of animation. These last few fights are really impressive. On the other
hand, maybe we didn&amp;#39;t need &lt;strong&gt;quite&lt;/strong&gt; that much fighting? When you get 4 fights
back to back, it kind of undermines their weight.&lt;/p&gt;
&lt;p&gt;Story-wise (and you know I&amp;#39;m a story guy), it&amp;#39;s not bad — I was engaged through
— but could have been better. The big conclusion didn&amp;#39;t really feel
woven/foreshadowed. I expected some big reveal, and I guess there was some
reveal, but it fell flat.&lt;/p&gt;
&lt;p&gt;For the final season, I also expected some confluence of the storylines. More
after the spoiler tag.&lt;/p&gt;
&lt;details&gt;&lt;summary&gt;Click for spoilers.&lt;/summary&gt;
The Isaac storyline feels unfinished. I really thought it was going somewhere.
Maybe the spinoff that is reportedly in the works will focus on him?

&lt;p&gt;I also found Lenore&amp;#39;s ending unecessarily melodramatic and unecessary. Most of
all, it does not feel like a conclusion that the story led into.&lt;/p&gt;
&lt;/details&gt;

&lt;p&gt;I&amp;#39;m curious to watch the spinoff.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;overcoming-gravity&quot;&gt;Overcoming Gravity&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Book&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I picked this up as a book about bodyweight exercise. What I got is not what I
expected.&lt;/p&gt;
&lt;p&gt;The book tells less about bodyweight training than I&amp;#39;d hoped. Sure, there are
instructions and cues, etc. But it&amp;#39;s relatively terse. You can easily find more
detailed write-ups on Google, and some good tutorials on YouTube.&lt;/p&gt;
&lt;p&gt;But, on the other hand, it&amp;#39;s an impressive compendium of knowledge of the basic
factors that affect strength and hypertrophy training, of how to setup a workout
routine etc. In fact, this occupies most of the first half of the book — you
only get to details on specific bodyweight exercises at around page 300...&lt;/p&gt;
&lt;p&gt;Despite being well-written and interesting, I wouldn&amp;#39;t recommend the book for
the purpose of creating a routine either. Not unless you have a few years of
training (and crucially, experimentation with your routines) under your belt
and/or are coaching other athletes. It&amp;#39;s written in a very encyclopedic style.
I don&amp;#39;t mean this in a bad way: it&amp;#39;s a presentation of facts. But that means
that the book does not read linearly. Despite the presence of &amp;quot;stop reading,
take action&amp;quot; sections, the book offer little opportunity to actually start
planning a routine until the whole has been read.&lt;/p&gt;
&lt;p&gt;So, it&amp;#39;s not bad, but unless you&amp;#39;re looking for a routine-building reference,
I&amp;#39;d try other places first.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;trading-volatility&quot;&gt;Trading Volatility&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Book&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Trading Volatility is a book, &lt;a href=&quot;https://www.trading-volatility.com/&quot;&gt;available online&lt;/a&gt; for free about trading
in volatility-related products, in particular options.&lt;/p&gt;
&lt;p&gt;I started reading the book as parts of my efforts to learn about &lt;a href=&quot;https://norswap.com/finance&quot;&gt;finance&lt;/a&gt;. In
the end, I decided to drop it after the first chapter, as it becomes too
technical, and not particularly applicable to me.&lt;/p&gt;
&lt;p&gt;A lot of the strategies presented later in the book seem to require stock-based
hedging, for which you need zero commissions and taxes on stock transactions, as
well as some way to automate trading (i.e. a broker with an API). I don&amp;#39;t fit
these conditions. It also discusses instruments that are not readily available
to the retail trader.&lt;/p&gt;
&lt;p&gt;It does look very interesting however, but I currently have much more useful
things to learn, so I shelved it.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;tales-of-demons-and-gods&quot;&gt;Tales of Demons and Gods&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Manga&lt;/li&gt;
&lt;li&gt;Up to chapter 348&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://norswap.com/reviews-11/tales.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;In my quest to find more webtoons in what I&amp;#39;ve dubbed &amp;quot;the leveling genre&amp;quot;, I
came across &lt;em&gt;Tales of Demons and Gods&lt;/em&gt;. The particularity of this one is that
the original is in Chinese.&lt;/p&gt;
&lt;p&gt;How much of a difference does it make? Some. Clearly the tone and the attitudes
of the characters are different. It&amp;#39;s still closer to Korean webtoons than to
anything western I&amp;#39;ve seen however. The tropes of the genre are pretty-well
respected: in this case there is a reincarnation, growable powers, a magic
school, world-threatening elements, ... There are few added cultural element,
e.g. the people grow their &amp;quot;soul power&amp;quot; by &amp;quot;cultivating&amp;quot;, a term I&amp;#39;ve seen
popped up in other Chinese media (notably &lt;a href=&quot;https://norswap.com/reviews-6/#mo-dao-zu-shi&quot;&gt;Mo Dao Zu
Shi&lt;/a&gt;, which I didn&amp;#39;t enjoy so much).&lt;/p&gt;
&lt;p&gt;As far as the story goes, it&amp;#39;s really long, and it&amp;#39;s pretty decent. Details are
woven throughout, so it&amp;#39;s not just choppy arc after choppy arc, but you can
still expect the leveling hustle to take up most of the space compared to the
intrigue. It might be tiresome after a while — this one is definitely not a
literary masterpiece, but it&amp;#39;s fun enough.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;true-detective&quot;&gt;True Detective&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;TV Show&lt;/li&gt;
&lt;li&gt;Season 1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After hearing so much about it, we finally took the leap and watched the first
season of true detective. There is a second season, but the characters and story
are completely different — it&amp;#39;s just reusing the same principle. People say it&amp;#39;s
less good, but since I haven&amp;#39;t seen it, I can&amp;#39;t comment.&lt;/p&gt;
&lt;p&gt;The story revolves around a pair of cops, one of which is new (where have I seen
that before?) as they investigate a murder steeped in voodoo spiritism.&lt;/p&gt;
&lt;p&gt;What really makes the show is it&amp;#39;s grisly, bleak and oppressive atmosphere. It
really doesn&amp;#39;t make you want to move to Louisiana where the story takes place.
The characters are dark and conflicted.&lt;/p&gt;
&lt;p&gt;Putting together this atmosphere in a way that&amp;#39;s interesting and keeps you
engaged is really the show&amp;#39;s greatest strength. It is a somewhat unique
experience, I must admit.&lt;/p&gt;
&lt;p&gt;As for the plot itself... it&amp;#39;s decent, I suppose? I kept expecting more twists,
more reveals, some acceleration of the intrigue, and in the end I was pretty let
down. I think a great plot would have elevated this from an interesting show to
a masterpiece.&lt;/p&gt;
&lt;p&gt;Still, as-is, it&amp;#39;s well worth watching. If you&amp;#39;re afraid it&amp;#39;s not your jam, just
watch the first episode — if you don&amp;#39;t like it I doubt it&amp;#39;s worth going any
further.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;koi-to-yobu-ni-wa-kimochi-warui-kokoimo&quot;&gt;Koi to Yobu ni wa Kimochi Warui (Kokoimo)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Anime&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We were looking for something more romcom-ish to watch with Sasha and landed on
kokoimo.&lt;/p&gt;
&lt;p&gt;The dangerous-sounding plot is a young salaryman falling in love with a
high-school girl, pursuing her as best he can.&lt;/p&gt;
&lt;p&gt;The shows ends being quite inoffensive. It&amp;#39;s decent enough I guess, though I
lack points of comparison in the genre (which is not my forte). Still I have
watched it and not hated it. I also didn&amp;#39;t think it was particularly
interesting.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;that-time-i-got-reincarnated-as-a-slime&quot;&gt;That Time I Got Reincarnated as a Slime&lt;/h2&gt;
&lt;div id=slime /&gt;

&lt;ul&gt;
&lt;li&gt;Anime&lt;/li&gt;
&lt;li&gt;Season 2&lt;/li&gt;
&lt;li&gt;Japanese Title: Tensei shitara Slime Datta Ken&lt;/li&gt;
&lt;li&gt;Previously: &lt;a href=&quot;https://norswap.com/even-more-anime/#that-time-i-got-reincarnated-as-a-slime&quot;&gt;Season 1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Most of what I said in my review of season 1 still holds. Slime is enjoyable,
but never truly great.&lt;/p&gt;
&lt;p&gt;This time around it&amp;#39;s a bit less formulaic, but it&amp;#39;s not really better or worse,
just different. I&amp;#39;m sure some people will argue it&amp;#39;s worse though, seen as
entire episodes are dedicated to meetings. There are one or two interesting plot
developments however.&lt;/p&gt;
&lt;p&gt;In general, if you liked the first season, keep watching.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;boku-no-hero-academia&quot;&gt;Boku no Hero Academia&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Anime&lt;/li&gt;
&lt;li&gt;Season 5&lt;/li&gt;
&lt;li&gt;Previously: &lt;a href=&quot;https://norswap.com/more-anime/#my-hero-academia&quot;&gt;Season 1 &amp;amp; 2&lt;/a&gt;, &lt;a href=&quot;https://norswap.com/even-more-anime/#my-hero-academia-season-3&quot;&gt;Season
3&lt;/a&gt;, &lt;a href=&quot;https://norswap.com/reviews-6/#my-hero-academia-season-4&quot;&gt;Season
4&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hero academia is still good, but it&amp;#39;s again not the strongest season.&lt;/p&gt;
&lt;p&gt;It&amp;#39;s divided in two arcs, the first of which is a &amp;quot;training tournament&amp;quot; that
feels a little bit filler-ish. It&amp;#39;s not too bad though, there are interesting
fight strategies etc, but no real stakes (not even in terms of character
development).&lt;/p&gt;
&lt;p&gt;The second one is much more interesting and revolves around the ligue of
villains encountering challenges of their own. This could have been amazing, but
the effect is slightly spoiled by the fact that the treatment is very formulaic.
At some point, they go through all the key members of the league and they all
experience some breakthrough one after the other — this is a bit ham-fisted an
tends to pull me out of the story.&lt;/p&gt;
&lt;p&gt;That second arc also reveals some key background elements on some characters.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;to-your-eternity&quot;&gt;To Your Eternity&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Anime&lt;/li&gt;
&lt;li&gt;Japanese Name: Fumetsu no Anata e&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A really nice surprise, and also one that is hard to review without spoiling!&lt;/p&gt;
&lt;p&gt;I&amp;#39;ll say two things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Watch it if you&amp;#39;re going to watch any anime on this list, it really is good
enough.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The only letdown in the anime is that some patterns repeat again and again,
and I think it makes the anime less compelling. I was really like &amp;quot;oh come
on... again?&amp;quot; at some points. This makes the story less compelling than it
could have been if the arcs were a bit more varied / open-ended.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&quot;demon-slayer-mugen-train&quot;&gt;Demon Slayer: Mugen Train&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Anime Movie&lt;/li&gt;
&lt;li&gt;Japanese Title: Kimetsu no Yaiba: Mugen Ressha-hen&lt;/li&gt;
&lt;li&gt;Previously: &lt;a href=&quot;https://norswap.com/reviews-4/#demon-slayer&quot;&gt;Season 1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Following the first season of Demon Slayer, the movie share the same visual
strengths, and packs an emotional punch too.&lt;/p&gt;
&lt;p&gt;The movie form factor perfectly suits Demon Slayer&amp;#39;s strength. This one is a
must watch if you like good animation, shonen, or both.&lt;/p&gt;
&lt;p&gt;Interestingly, the showrunners have made the decision to adapt/convert the movie
into a 7 anime episodes prelude to season 2, which have recently started airing.
No idea how that will turn out (I won&amp;#39;t watch it), but I expect it&amp;#39;s worth
seeing it as originally intended, as an unbroken movie.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;james-bond-no-time-to-die&quot;&gt;James Bond: No Time To Die&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Movie&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://norswap.com/reviews-11/bond.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;The repeatedly-delayed movie if finally out (if you&amp;#39;re reading from the future:
covid), and it&amp;#39;s pretty good!&lt;/p&gt;
&lt;p&gt;Clocking at 2 hours and 40 minutes, it&amp;#39;s the longest James Bond to date.
Fortunately, it&amp;#39;s entertaining and time passes rather quickly.&lt;/p&gt;
&lt;p&gt;Daniel Craig does an amazing job as usual, the other characters are pretty good,
and the plot is decent.&lt;/p&gt;
&lt;p&gt;It&amp;#39;s not perfect however. While Rami Malek makes a very convincing villain, his
motivations are very much lacking. There isn&amp;#39;t really any rhyme or reason as to
why he wants to destroy large part of the world. His bionic-eyed henchman
(apparently called &amp;quot;Primo&amp;quot; though I don&amp;#39;t think that&amp;#39;s mentioned in the movie
even once) feels like ticking a James-Bond checkbox. He&amp;#39;s not really
interesting, and fighting him feels like a formality to get rid of as fast as
possible.&lt;/p&gt;
&lt;p&gt;I was left wondering why the movie was so long. I think there&amp;#39;s simply too much
fighting — most of which is not very good. Bond and his associate mow down vast
number of redshirts in a way that stretches believability (yes, even by James
Bond standards). In some scenes, you really feel like Bond should emerge
completely peppered with bullets, but he&amp;#39;s invariably unscathed.&lt;/p&gt;
&lt;p&gt;The only one that can score on James Bond is Rami Malek&amp;#39;s big villain &amp;quot;Lyutsifer
Safin&amp;quot; (terrible name, but that&amp;#39;s pretty much James Bond tradition), essentially
by virtue of plot convenience. Just like the henchman fight, their fight is
short and not that interesting excepted in its outcome.&lt;/p&gt;
&lt;p&gt;What I came away with was the feeling that director Fukunaga wasn&amp;#39;t really
skilled not really interested in directing action scenes.&lt;/p&gt;
&lt;p&gt;Interestingly, Fukunaga is the director of &lt;a href=&quot;https://norswap.com/reviews-11/#true-detective-season-1&quot;&gt;the first season of True
Detection&lt;/a&gt;, a show with a carefully crafted mood, but
also not much action and not much plot intricacy. I would say that maps pretty
well to the strength of this James Bond entry — it&amp;#39;s really good a showcasing
more human and psychological elements. This is something the James Bond
franchise is historically not so good at, but which has been a hallmark of
Daniel Craig&amp;#39;s &amp;quot;new&amp;quot; James Bond. The flip side is that the action scenes feel
like an afterthought and the plot is lackluster.&lt;/p&gt;
&lt;p&gt;All in all, I&amp;#39;d place this entry level with the previous Craig-era hits Casino
Royale and Skyfall. Thinking on it, I think those actually shared the shame
strengths and shortcomings: the villain looks the par but is not that convincing
in his convictions and the plot could be better. Other entries probably do a bit
better on the action though (especially the end of Skyfall, and the intro
sequences of Quantum of Solace and Spectre do deserve a mention).&lt;/p&gt;
&lt;p&gt;I wonder if I don&amp;#39;t like the more caricatural James Bond of the past. Mike
Taylor (whose blog I love) &lt;a href=&quot;https://reprog.wordpress.com/category/movies/james-bond/&quot;&gt;reviewed the whole franchise&lt;/a&gt; and
&lt;a href=&quot;https://reprog.wordpress.com/2012/11/19/james-bond-movies-part-1-sean-connery/&quot;&gt;wrote&lt;/a&gt; somewhere that &lt;a href=&quot;https://en.wikipedia.org/wiki/Goldfinger_(film)&quot;&gt;Goldfinger&lt;/a&gt; was the prototypal James
Bond: it has a great villain (gold magnate Auric Goldfinger), a great henchman
(Oddjob, the steel-hat throwing Korean Oddjob), a memorable plot (irradiate the
gold reserve at Fort Knox to make Auric&amp;#39;s own gold value skyrocket), &lt;a href=&quot;https://www.youtube.com/watch?v=Mx9z99YJ_7s&quot;&gt;the best
dialogue&lt;/a&gt;, etc...&lt;/p&gt;
&lt;p&gt;The point being that, if your villains are not going to have interesting
motivations, you might as well make them larger-than-life charisma machines, and
not wounded birds with a vaguely formulated desire for revenge as in the
Craig-era villains. Similar points can be made about other aspects of the
franchise, but this review is long enough. I&amp;#39;ll just mention that it&amp;#39;s not an
accident that my favourite Bond is Pierce Brosnan, who never loses his brushing
even in the most intense action scenes, but offered true spectacle.&lt;/p&gt;
&lt;p&gt;I think in the end I like both types of Bond, but while Bond-as-entertainment
has been polished to a T, Bond-the-psychological-being is not quite there yet.
Right now it feels like a &lt;a href=&quot;https://norswap.com/reviews-10/#casablanca&quot;&gt;Casablanca&lt;/a&gt; knockoff with a lot of shooting, and I
think they can do better.&lt;/p&gt;
&lt;p&gt;Final note: the above sounds negative, but I think the movie is pretty good, and
worth a watch if you enjoyed any other Bond movie with Daniel Craig.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;dune-2021&quot;&gt;Dune (2021)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Movie&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://norswap.com/reviews-11/dune.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;I&amp;#39;ve read the books, I&amp;#39;ve seen the &lt;a href=&quot;https://en.wikipedia.org/wiki/Dune_(1984_film)&quot;&gt;1984 movie&lt;/a&gt;, I&amp;#39;ve seen the &lt;a href=&quot;https://en.wikipedia.org/wiki/Frank_Herbert%27s_Dune&quot;&gt;2000
miniseries&lt;/a&gt;, so I was ready for this one.&lt;/p&gt;
&lt;p&gt;But funnily enough, I didn&amp;#39;t know before watching it that it only adapted half
of the first book. The movie is pretty long (2h 35min) so the doubt persisted
for a fairly long time.&lt;/p&gt;
&lt;p&gt;It&amp;#39;s clearly the most beautiful entry to date. Villeneuve knows what he&amp;#39;s doing.
Dune works better in my opinion than the (equally beautiful and even longer)
Blade Runner 2049 (which I saw but apparently forgot to review). I will chalk
that up with the fact that Blade Runner&amp;#39;s worst flaws where to include too much
crud that didn&amp;#39;t really matter to the plot in the final cut. Here Villeneuve
works from the book (the screenplay adapts it fairly faithfully).&lt;/p&gt;
&lt;p&gt;It&amp;#39;s a &amp;quot;slow&amp;quot; movie. There is action, but it&amp;#39;s nothing to write home about — in
fact, it&amp;#39;s a little bit disappointing even. Funny how I don&amp;#39;t consider myself an
action guy but I keep finding the action lacking in things I&amp;#39;m reviewing in this
entry. Fortunately, action isn&amp;#39;t really the point of Dune as it is James Bond&amp;#39;s.&lt;/p&gt;
&lt;p&gt;Instead, the movie really instills a mood that fits the universe. It&amp;#39;s
contemplative, but it works.&lt;/p&gt;
&lt;p&gt;I would have liked better to see the first and the second part in a row, since
this first part doesn&amp;#39;t really peek or culminate anywhere. The story is
unfinished, and there is not much closure. Still, it was good enough that I&amp;#39;m
excited to see that second part.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;invincible&quot;&gt;Invincible&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Series (Cartoon)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://norswap.com/reviews-11/invincible.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;What a great surprise! I started watching the Amazon prime series on the
strength of a raving review from I-forget-where, which was well-deserved.&lt;/p&gt;
&lt;p&gt;It adapts a &lt;a href=&quot;https://en.wikipedia.org/wiki/Invincible_(comics)&quot;&gt;2003 comic&lt;/a&gt; (spoilers!), about a boy acquiring secret powers,
something that runs in the family.&lt;/p&gt;
&lt;p&gt;The first 30/40 minutes felt like something straight out Spider-Man, it&amp;#39;s all
very consensual. But then, at the end of the first episode, the proverbial shit
hits the proverbial fan.&lt;/p&gt;
&lt;p&gt;The show osciliates between the &amp;quot;fun for the whole family&amp;quot; and &amp;quot;grisly murder
scenes&amp;quot; quite seamlessly. Surprisingly, it works!&lt;/p&gt;
&lt;p&gt;The plot is quite good, with adequate foreshadowing and clues being placed.&lt;/p&gt;
&lt;p&gt;Something I really enjoyed was that each episode encompassed a whole story arc,
with no stupid cliffhanger at the end. That&amp;#39;s become so rare, it felt like a
breath of fresh air. And the show can pull it off, it&amp;#39;s good enough you&amp;#39;ll be
back even without the cliffhanger.&lt;/p&gt;
&lt;p&gt;I&amp;#39;ll be waiting for season 2.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;kaamelott&quot;&gt;Kaamelott&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Movie (French)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A movie sequel to the super popular French humoristic series &lt;a href=&quot;https://en.wikipedia.org/wiki/Kaamelott&quot;&gt;Kaamelott&lt;/a&gt;, which
parodies the Arthurian legend.&lt;/p&gt;
&lt;p&gt;I was never a super fan of the series, who made me smile more than it made me
laugh.&lt;/p&gt;
&lt;p&gt;Still, the movie was greatly entertaining (though again, not something that made
me roar with laughter the way some other movie can).&lt;/p&gt;
&lt;p&gt;I was particularly admirative of how they managed to still maintain the humor &amp;amp;
spirit of the series, while still creating an epic narrative with at least some
amount of emotional weight. It&amp;#39;s a very delicate balancing act, and they nailed
it.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;oss-117-alerte-rouge-en-afrique-noire&quot;&gt;OSS 117: Alerte Rouge en Afrique Noire&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Movie (French)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The movie is the sequel to the &lt;a href=&quot;https://en.wikipedia.org/wiki/OSS_117:_Cairo,_Nest_of_Spies&quot;&gt;2006&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/OSS_117:_Lost_in_Rio&quot;&gt;2009&lt;/a&gt; entries,
which follows the spy OSS 117 (played by Jean Dujardin, of internal fame thanks
to &lt;a href=&quot;https://en.wikipedia.org/wiki/The_Artist_(film)&quot;&gt;The Artist&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;OSS 117 was a (serious) French James Bond knockoff, but this series uses the
character to make a French-scented parody of the spy genre.&lt;/p&gt;
&lt;p&gt;I adore the first two movies, which have the unique flair &amp;amp; humor of director
Michel Hazanavicius. Notably, Hazanavicius also made &lt;a href=&quot;https://en.wikipedia.org/wiki/La_Classe_am%C3%A9ricaine&quot;&gt;&amp;quot;La Classe
Américaine&amp;quot;&lt;/a&gt; — un &amp;quot;détournement&amp;quot;, i.e. a movie made by dubbing over bits
and pieces of other movies, which happens to be infinitely quotable. He also
directed &lt;a href=&quot;https://en.wikipedia.org/wiki/The_Artist_(film)&quot;&gt;The Artist&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The humor of the movies is somewhat risqué, always at the edge — OSS117 being
overly nationalistic, casually racist and sexist, and generally an idiot with
surprising talents, that somehow always comes out on top.&lt;/p&gt;
&lt;p&gt;The new entry in the franchise was not directed by Hazanavicius but by Nicolas
Bedos. I was wary, because I do not know Bedos very well, but did not like his
personality so much the few times I saw him on TV.&lt;/p&gt;
&lt;p&gt;Nevertheless, I thought the movie was pretty good, and very faithful in spirit
to the previous entries.&lt;/p&gt;
&lt;p&gt;Bedos is smart enough to switch the playbook slightly however. In this
installment, the bumbling OSS tries to appear politically correct by clumsily
hiding his prejudices. This is not easy to make work, but I think they pulled it
off pretty well. There are also plenty of small absurd elements (e.g. all the
maps are bonkers) that help make the movie fun.&lt;/p&gt;
&lt;p&gt;One element I didn&amp;#39;t like was the character of the new spy they paired up with
OSS 117. The issue is that this character acts as a foil, pointing out loud that
OSS 117 is stupid/prejudiced/etc and really doesn&amp;#39;t know what he&amp;#39;s doing. That&amp;#39;s
quite unnecessary, it&amp;#39;s already obvious and some of the humor is precisely from
characters either buying into it or subtly signaling they think he&amp;#39;s an idiot.&lt;/p&gt;
&lt;p&gt;So anyway, a pretty good time.&lt;/p&gt;
&lt;hr&gt;
      </description>
      <pubDate>2021-10-14T22:00:00.000Z</pubDate>
      <link>http://norswap.com/reviews-11</link>
      <guid isPermaLink="true">http://norswap.com/reviews-11</guid>
    </item>
    <item>
      <title>Bonds Bonanza 2: Bonds Go Banana</title>
      <description>
&lt;p&gt;in &lt;a href=&quot;https://norswap.com/finance&quot;&gt;Finance&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;In the &lt;a href=&quot;https://norswap.com/bonds&quot;&gt;last post&lt;/a&gt; I explained the basics of the bonds market, the
difference the interest rate and the yield, etc.&lt;/p&gt;
&lt;p&gt;I also mentioned that in February, yields soared from 1.13% to 1.6%, causing a
large upset in the stock market as well. In this post, I want to look at why
this happens, and how the effect spilled over to the stock market.&lt;/p&gt;
&lt;p&gt;Be warned that this post is a bit more about figuring things out than presenting
orderly facts. I&amp;#39;m far from mastering all the variables here, so take everything
with a grain of salt.&lt;/p&gt;
&lt;h2 id=&quot;the-fundamentals&quot;&gt;The Fundamentals&lt;/h2&gt;
&lt;p&gt;The basic explanation of why the bond prices dropped precipitously and the yield
soared is pretty simple: people expect US dollar inflation, meaning rising
prices, hence a currency with less purchasing power. Inflation does all kinds of
bad things to the economy (which we will examine shortly) and so the federal
reserve tries to keep it subdued. It does this mostly by increasing the interest
rates it pays on newly emitted bonds. This decreases bond prices and increases
bond yield.&lt;/p&gt;
&lt;p&gt;If it&amp;#39;s not clear to you why the federal reserve increasing the interest rate on
bonds leads to falling bonds price and thus higher yields, see &lt;a href=&quot;https://norswap.com/bonds&quot;&gt;the previous
article&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Remember that government bonds are the ultimate safe investment. Raising the
interest rate leads to a bunch of other interest rates in the economy to
increase (for instance, on savings accounts), which promotes savings, which
reduces the amount of money circulating in the economy. The federal reserve also
uses the &lt;a href=&quot;https://www.investopedia.com/terms/f/federalfundsrate.asp&quot;&gt;federal funds rate&lt;/a&gt; to achieve this objective. (Sorry if this is not
very precise. I wish I had a better understanding of the mechanics here.)&lt;/p&gt;
&lt;p&gt;Reducing the amount of money circulating is important, because inflation is
caused by a changing balance between demand and supply. When there is a lot of
money chasing few goods, prices increase, and you have inflation. You reduce
inflation by decreasing the amount of money in circulation, or by increasing the
amount of good produced.&lt;/p&gt;
&lt;p&gt;People expect inflation, of course, because Joe Biden signed a stimulus bill
where the government would spend 1.9T$ (that&amp;#39;s trillion). For reference, the
total market capitalization (summing the value of every share) of the S&amp;amp;P 500 is
about 30T$. Then there is a 2T$ infrastructure bill being debated right now, and
there might some more down the line. When you inject so much money in the
economy, inflation is not exactly unexpected. There is however much debate about
how high inflation will go, and how transitory or persistent the increase will
be. The federal reserve currently maintains that the inflation rate might rise
over 2%, but that this should only be temporary.&lt;/p&gt;
&lt;p&gt;The only uncertainty in all of this is if, or whether &lt;em&gt;when&lt;/em&gt;, the federal reserve
would increase the interest rate in response to inflation increasing. The price
move caused such an uproar because the federal reserved had been saying (and has
kept saying since) that they don&amp;#39;t expect to increase the rate anytime soon and
that it&amp;#39;s fine if &amp;quot;the economy runs hot&amp;quot; and inflation is temporarily increased.
The bond market seemed to be saying that either the situation would be worse
than the fed expected, forcing its hand, or that, under pressure from the
markets, it couldn&amp;#39;t walk the line (as seen in the &lt;a href=&quot;https://www.investopedia.com/terms/t/taper-tantrum.asp&quot;&gt;2013 &amp;quot;taper
tantrum&amp;quot;&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Once the move was initiated, however, it made sense for most people to follow
suit. Whether you&amp;#39;re a trader or a long-term investor in long-term bonds, you
expect the rates to increase eventually, meaning it will be profitable for you
to sell your bonds and buy new higher-rate bonds. If the bond price starts to
drop, you should therefore sell. In fact, the only reasons not to sell are if
either you don&amp;#39;t believe the rates will increase or if you&amp;#39;re contractually
obligated to hold bonds instead of cash.&lt;/p&gt;
&lt;p&gt;But on top of this strong fundamental reason, there were a few other catalysts
and technical details that can help explain the sudden move.&lt;/p&gt;
&lt;p&gt;A first catalyst (&lt;a href=&quot;https://www.bloomberg.com/news/articles/2021-02-26/chaotic-treasury-selloff-fueled-by-50-billion-position-unwind&quot;&gt;source&lt;/a&gt;):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Back in April, the Federal Reserve tweaked its rules to exempt Treasuries from
banks’ supplementary leverage ratios — allowing them to expand their balance
sheets with U.S. debt. But that relief ends March 31 and what happens next is
something of a mystery.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So it was expected that by April 2021, banks would have offloaded excess bonds
to get back in cash and satisfy the re-tightened rules.&lt;/p&gt;
&lt;h2 id=&quot;bonds-butterfly&quot;&gt;Bonds Butterfly&lt;/h2&gt;
&lt;p&gt;With all these bearish expectations towards bonds, the market just needed
something to light the fuse. The catalyst was probably an auction of 7-year
bonds seeing record low demand. Remember from &lt;a href=&quot;https://norswap.com/bonds&quot;&gt;last time&lt;/a&gt; that bonds are
initially auctioned by the fed, so low demand would have caused these bonds have
a low price and a high yield. This in turn caused the associated but more common
5-year bonds to drop a whopping 0.75%.&lt;/p&gt;
&lt;p&gt;This made a lot of people happy, as the &lt;a href=&quot;https://finance.zacks.com/butterfly-fixed-income-trading-strategies-10170.html&quot;&gt;2-5-10 butterfly&lt;/a&gt; is a popular
trade:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The butterfly strategy involves buying both long and short-term bonds while
simultaneously selling medium-term bonds. This strategy is designed to help
investors profit from predicted fluctuations to the yield curve.&lt;/p&gt;
&lt;p&gt;... The purchase and sales cancel each other out, making this a theoretically
zero-cost investment. This has the impact of cancelling out any shifts in the
overall values of the bonds unless the shifts are disproportionately weighted
to one maturity over another. When disproportionate shifts occur, the investor
can earn a net return. ...&lt;/p&gt;
&lt;p&gt;One common butterfly trade involves three treasury bonds. The investor sells
five-year treasuries and buys two- and ten-year bonds with the money that he
receives in a proportion that makes the average life of the portfolio equal to
five years. To do this, the portfolio would be slightly more heavily weighted
towards the two-year bond. To begin with, the idea is for the blended yield of
the two- and ten-year bonds to be higher than the five-year bond&amp;#39;s yield. The
other advantage of the butterfly is that if the relationship in yields
changes, it could increase returns.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It must be noted how &lt;a href=&quot;https://theirrelevantinvestor.com/2021/03/01/will-higher-interest-rates-kill-growth-stocks/&quot;&gt;remarkable&lt;/a&gt; these events are:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Tracy Alloway notes that, “The 2/5/10-year butterfly — a popular trade
involving two-, five- and 10-year U.S. bonds — moved by an astonishing 24
basis points (one of those events which, when measured by standard deviations,
is only supposed to happen once in a billion years, etc.).”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://norswap.com/bonds-2/butterfly.png&quot; alt=&quot;picture: 2-5-10 butterfly expected returns&quot;&gt;&lt;/p&gt;
&lt;p&gt;What I assume happened next is that traders unwound their positions to
capitalize on this sudden dip in the 5-years price. Since they were long
10-years bonds, that caused that price to also dip suddenly.&lt;/p&gt;
&lt;p&gt;It&amp;#39;s hard — if not impossible — to tell, but this might have been the initial
shock that set the yield surge in motion.&lt;/p&gt;
&lt;h2 id=&quot;shorting&quot;&gt;Shorting&lt;/h2&gt;
&lt;p&gt;Another straightforward force multiplier to the move was short selling. I
talked about short selling in &lt;a href=&quot;https://norswap.com/gamestop&quot;&gt;my article on Gamestop&lt;/a&gt;, but basically
bond short-sellers borrow bonds, sell them, wait for the price to drop to buy
them back and return them to the original owner, pocketing the difference as
profit.&lt;/p&gt;
&lt;p&gt;There was ample evidence of short selling in the bonds market. In particular,
the repo market rate for the 10-years bond went to -4% at some point... The what
now?&lt;/p&gt;
&lt;p&gt;The repo or &amp;quot;repurchase agreement&amp;quot; market is where one party sells a security to
another, and agrees to repurchase it later at a higher price. Essentially, it&amp;#39;s
a &lt;a href=&quot;https://en.wikipedia.org/wiki/Collateral_(finance)&quot;&gt;collateralized loan&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The repo market allows financial institutions that own lots of securities (e.g.
banks, broker-dealers, hedge funds) to borrow cheaply and allows parties with
lots of spare cash (e.g. money market mutual funds) to earn a small return on
that cash without much risk, because securities, often U.S. Treasury securities,
serve as collateral.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The repo market allows financial institutions that own lots of securities (e.g.
banks, broker-dealers, hedge funds) to borrow cheaply and allows parties with
lots of spare cash (e.g. money market mutual funds) to earn a small return on
that cash without much risk, because securities, often U.S. Treasury securities,
serve as collateral. (&lt;a href=&quot;https://www.brookings.edu/blog/up-front/2020/01/28/what-is-the-repo-market-and-why-does-it-matter/&quot;&gt;source&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;The repo rate typically trades in line with the Federal Reserve’s benchmark
federal funds rate at which banks lend reserves to each other overnight.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The fact it went to -4% means that people were willing to pay up to 4% interest
for the privilege to borrow 10 years bonds, with the intention to short them and
turn a profit. In that market, 4% is a lot, meaning there was a lot of
competitive pressure, hence a lot of short selling.&lt;/p&gt;
&lt;p&gt;But wait! That&amp;#39;s not all. We have another villain in our story in the form of
&lt;em&gt;convexity hedging&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id=&quot;duration-convexity--convexity-hedging&quot;&gt;Duration, Convexity &amp;amp; Convexity Hedging&lt;/h2&gt;
&lt;p&gt;Some funds invest in mortgage-backed securities (MBS). Yes, those that caused
the great financial crisis and gave us the delightful movie &lt;a href=&quot;https://www.youtube.com/watch?v=vgqG3ITMv1Q&quot;&gt;The Big Short&lt;/a&gt;
— check &lt;a href=&quot;https://www.youtube.com/watch?v=xbiDrzTd8fE&quot;&gt;this excerpt&lt;/a&gt; if you want Ryan Gosling to explain bad
mortgage-backed securities to you. What a time to be alive.&lt;/p&gt;
&lt;p&gt;Anyway, when interest rates decrease, homeowners can refinance their mortgages
to lock in a lower rate. This involves paying off part of the remaining loan
immediately (hence it is called &lt;em&gt;prepaying&lt;/em&gt;). This shortens the mortgages, and
as a result the average length of mortgages in the MBS decreases. This causes
the &lt;em&gt;duration&lt;/em&gt; — the weighted average of the times until when cash flows (loan
repayments) are received — to go down. The opposite is also true: when interest
rates increase, people don&amp;#39;t refinance, and so the average length of mortgages
goes up.&lt;/p&gt;
&lt;p&gt;To explain how that impacts the bond market, we need to lay some groundwork.
Bonds have a property called &lt;em&gt;convexity&lt;/em&gt; — when the interest rate decreases, the
price increases more than proportionally, and vice-versa.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://norswap.com/bonds-2/convexity.png&quot; alt=&quot;picture: Illustration of convexity in bond prices&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Reminder:&lt;/strong&gt; It&amp;#39;s always been unintuitive to me that bond price should rise
when interest fall (shouldn&amp;#39;t it be the opposite?). So let&amp;#39;s tackle that
first, then we can tackle the question of proportionality.&lt;/p&gt;
&lt;p&gt;To key is that the rate increase will only affect newly emitted bonds. The
yield must be constant across all bonds with the same maturity (otherwise
it&amp;#39;s an &lt;a href=&quot;https://www.investopedia.com/terms/a/arbitrage.asp&quot;&gt;arbitrage&lt;/a&gt; opportunity). Adding new bonds with lower interest rates
tends to push the yield down, hence the price of existing bonds up!&lt;/p&gt;
&lt;p&gt;It&amp;#39;s not obvious that it would push the yield down. After all, a lackluster
auction could bid the new bonds up just enough so that the existing yield
doesn&amp;#39;t move. It doesn&amp;#39;t seem to work like that in practice, and I suspect
it&amp;#39;s due to the new bonds shifting the expected future yield. As older,
higher-interest, bonds expire and newer, lower-interest, bonds are introduced,
it does make sense to expect the average yield to go down — at least when
ignoring fluctuations in the bond market, and excluding the possibility of a
sudden paradigm shift in bond valuation.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So decreasing rates push bond price up. Why do they increase more than
proportionally to the decrease in rates? In one word: compounding — when the
yield moves, the price move must capture not only the change in coupon payments
but the proceeds of reinvesting these payments. For this reason, longer-term
bonds are more convex: more interest is being paid. At this point, I&amp;#39;m ready to
launch in a long, fascinating (uhm) mathematical digression on yields,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bond_duration&quot;&gt;duration&lt;/a&gt;, compounding and [present value calculations], but this isn&amp;#39;t really
the point of this piece. Maybe another time?&lt;/p&gt;
&lt;p&gt;So bonds have &lt;em&gt;convexity&lt;/em&gt;. Mortgage-backed securities, on the other hand, have
&lt;em&gt;negative convexity&lt;/em&gt; (not sure why they didn&amp;#39;t call this &amp;quot;concavity&amp;quot;, but
whatever). This means that as the interest rates fall, the price increase less
than proportionally, or even fall!&lt;/p&gt;
&lt;p&gt;First, why would the prices go up? Same reason that the bond yields go up (see
above). Since government bonds are the ultimate risk-free security, most other
rates in the market depend on them, and will be higher. The difference between
the yield for a financial product and the risk-free rate (the bond yield) is
called &lt;em&gt;the risk premium&lt;/em&gt;. So if bond yields go up, MBS yields are expected to
follow suit (at least if we assume that the reason that the yields went up has
no material impact on the mortgage market and the default rate).&lt;/p&gt;
&lt;p&gt;The reason MBS prices go up less than proportionally (and in any case, less than
bond prices) is that, as we said at the start of this section, decreased rates
increase mortgage refinancing, which decreases MBS duration — the weighted (by
monetary amount) average time of received cashflows (loan repayments). More
refinancing and prepaying means less interest payments, though we will recover a
larger part of the principal earlier. What the MBS did offer us however was a
certain yield (based on the mortgage rate). When the duration decrease, we lose
on that yield, and must reinvest the prepaid sums elsewhere — right after the
interest rates went down! This loss in compound interest is what causes MBS
prices to rise less than expected.&lt;/p&gt;
&lt;p&gt;So, bonds have convexity, mortgage-backed securities have negative convexity.
What is convexity hedging? It has to do with the facts that the funds that own
these MBS include things like pension funds, which have regular cash outflows
(e.g. to pay said pensions). This means the cashflows need to be regular. But
MBS cashflows vary with interest rates!&lt;/p&gt;
&lt;p&gt;To take care of that unpredictability, these funds hedge for &lt;em&gt;duration&lt;/em&gt;. Here&amp;#39;s
how they do it: When interest rates increase, MBS duration increases, and funds
sell long-term bonds to cover liquidity needs; when rates decrease, MBS duration
decreases, and funds reinvest prepayments into long-term bonds.&lt;/p&gt;
&lt;p&gt;Back to our initial topic, the net effect is that when interest rates increase,
MBS duration increases, which leads to funds selling off bonds to hedge
duration. The opposite happens when interest rates decrease. This naturally
amplifies the movement of bonds in either direction (as the bond price is
already on the upswing when interest rates decrease).&lt;/p&gt;
&lt;p&gt;And with that, we completed our tour of the plausible reasons for the February
bond yield surge! Now we need to briefly examinate how this impacted the stock
market.&lt;/p&gt;
&lt;h2 id=&quot;inflation-redux&quot;&gt;Inflation Redux&lt;/h2&gt;
&lt;p&gt;Inflation means that money loses value. With inflation, a dollar in a year is
worth less than a dollar today. In an ideal world of &lt;a href=&quot;https://en.wikipedia.org/wiki/Spherical_cow&quot;&gt;spherical cows&lt;/a&gt;, all
prices and wages would update instantly to reflect this new value of money.&lt;/p&gt;
&lt;p&gt;If inflation worked like that, it would cause very little trouble. Sure, if
you&amp;#39;re holding cash, you&amp;#39;re suddenly poorer in terms of purchasing power.
Conversely, if you&amp;#39;re holding debt, you&amp;#39;re suddenly &amp;quot;richer&amp;quot; because your
repayments are worth less — and your revenues increased proportionally to
inflation anyway.&lt;/p&gt;
&lt;p&gt;Alas, prices do not update instantly, and it&amp;#39;s precisely this transition process
that is painful. Inflation works in wave. The first goods whose price increase
are those whose price is very liquid. The best example is commodities: ores,
oil, grains, etc. In fact, the &lt;a href=&quot;https://www.forbes.com/sites/billconerly/2021/05/22/why-lumber-and-plywood-prices-are-so-high-and-when-they-will-come-down/&quot;&gt;flare up in lumber price&lt;/a&gt; has been in
the news quite a bit recently. It&amp;#39;s probably unrelated to inflation, but it
shows how fast these prices can move.&lt;/p&gt;
&lt;p&gt;Commodities are the very beginning of the supply chains involved in the
production of most goods. This means that, in the presence of inflation, the
increase in price slowly cascades through the supply chain. The increase in
price is not reflected immediately for two big reasons: existing commitments and
competition. If you already signed a contract to supply a good at a certain
price, you&amp;#39;re stuck. If you&amp;#39;re in a very dynamic market and you can change your
price, you might still not want to do so, because your competitors might not
have done so yet, and you&amp;#39;ll lose customers to them. Of course, they&amp;#39;ll have to
raise prices too eventually, but these effects slow down the price cascade —
it&amp;#39;s a coordination problem. Where commodities are concerned, there&amp;#39;s also
uncertainty as though whether a price increase is just a spike (possibly fueled
by speculation (*1)), or a more permanent shift.&lt;/p&gt;
&lt;p&gt;At the end of the supply chain lies the final customer, the individual.
Unfortunately, wages are typically the last thing to increase in the inflation
process. This is because the price increase takes quite some time to reach final
consumers, and because the profits of a company must increase (after it can
reflect inflation in the price it charges) before it starts paying employees
more. And companies will tend to increase pay, if only to get a competitive
advantage by poaching promising talent.&lt;/p&gt;
&lt;p&gt;(*1) This kind of speculation has, of course, unpleasant side-effects, such as
making lumber more expensive for those that have a genuine use for it. However,
I want to emphasize that this is the cost you pay for having an efficient
market, and an efficient market does buy you something. In particular, it
greatly reduces the time for inflation to cascade through the system, and hence
the economic pain that results from it. This is what the next section is all
about.&lt;/p&gt;
&lt;h2 id=&quot;what-inflation-does-to-companies&quot;&gt;What inflation does to companies&lt;/h2&gt;
&lt;p&gt;So inflation is a painful transition towards higher prices caused by a loss of
value of the currency. Inflation occurs when the balance of money and goods
shifts in the direction of there being more money and/or less goods. In the
current situation, there is more money in circulation due to stimulus and
massive public spending (*2), and a modest deficit for goods whose supply
chains were shut down during the Covid pandemic.&lt;/p&gt;
&lt;p&gt;(*2) At least in the United States, though it seems likely that other parts of
the world will suffer from, at least, a milder version of the same problem.&lt;/p&gt;
&lt;p&gt;The consequence of this on companies is that they will go through a transition
period where their expenses will increase, but their revenues do not increase in
kind.&lt;/p&gt;
&lt;p&gt;What, then, does inflation do to the valuation of companies? We mentioned two
things already. First, there is an impact on the balance sheet: cash loses
value, but so do debts. Second, there is a loss of profit due to price lag. In
some cases, those are straightforward to compute. In some cases not so much. On
top of this, there is the concern that this will put too much strain on the
company&amp;#39;s finance, which will have to borrow at unattractive rates or, in the
worst case, be forced to liquidate.&lt;/p&gt;
&lt;p&gt;So inflation is bad for everyone; but depending on balance sheet composition,
position within the supply chain and general financial health, it is worse for
some companies than for other. But wait — hasn&amp;#39;t the S&amp;amp;P 500 has been making
consistent all-time highs since the events of February?!&lt;/p&gt;
&lt;p&gt;Clearly, to understand why growth stock got hammered in February, we need to
look beyond just the fundamental prices in the growth, and into the theory of
stock valuation.&lt;/p&gt;
&lt;h2 id=&quot;equity-risk-premiums-and-hurdle-rate&quot;&gt;Equity Risk Premiums and Hurdle Rate&lt;/h2&gt;
&lt;p&gt;Pricing the stock of a company is more art than science (otherwise they wouldn&amp;#39;t
constantly be swinging around even when absolutely nothing of substance
happens). Nevertheless, many theoretical frameworks have been proposed to try to
explain the factors that underly stock prices, and to try to estimate what a
&amp;quot;reasonable&amp;quot; stock price may be.&lt;/p&gt;
&lt;p&gt;This is quite the rabbit hole, and if you&amp;#39;re interested, the best place to start
is Aswath Damodaran&amp;#39;s &lt;a href=&quot;https://www.youtube.com/playlist?list=PLUkh9m2BorqlJsEfix7R9jtSXClFZhGvC&quot;&gt;valuation course&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Two concepts that are particularly useful in analyzing the price of stocks are
the notion of &lt;em&gt;equity risk premium&lt;/em&gt; and that of &lt;em&gt;hurdle rate&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The equity risk premium is the (expected or actual) return on equities in excess
to that of the risk-free alternatives. Typically, treasury bonds are used as the
risk-free alternatives, the 10-year rate being the most commonly used. So if
10-year bonds have a 2% yield, and the stock market (for instance, the S&amp;amp;P 500
index) returned 12%, then the equity risk premium was 10%. Typically, the equity
risk premium is calculated on historical data; there is obviously no guarantee
going into the future.&lt;/p&gt;
&lt;p&gt;That&amp;#39;s the &lt;em&gt;equity risk premium&lt;/em&gt;, but the concept of &lt;em&gt;risk premium&lt;/em&gt; generalizes
to other financial asset and even to sub-classes of stock. Of particular
interest to us here is the risk premium for growth stocks and the risk premium
for value stocks.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Recall that value stocks are stocks who trade in line with a valuation
obtained through some kind of &lt;em&gt;fundamental analysis&lt;/em&gt; process. The most common
of which is to use discounted flash flows (DCF): computing the present value
of the expected net profits of the company for some future period (typically
10 to 20 years). This approach is of course only applicable to profitable
companies.&lt;/p&gt;
&lt;p&gt;Growth stocks, on the other hand, are companies whose revenues are growing a
lot (or are deemed to be poised to grow a lot), but who may not yet be
profitable. The valuation is based on future expectations of growth — which
may not come to pass and can sometimes be a bit too optimistic.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As the name implies, risk premiums are rewards for risk. Growth stocks are
riskier than value stocks, and so should command a higher risk premium. But what
is this &amp;quot;risk&amp;quot; we talk about? Consider that a risk premium is an average
computed on a basket of stock (or on an index) over a certain period of time.
Risk can be seen as the variance between the stocks in the basket, and the
variance over time. Growth stocks, for instance, are particularly risky: most
innovative companies end up failing, but those who survive tend to have
extraordinary growth.&lt;/p&gt;
&lt;p&gt;The second important concept is the &lt;em&gt;hurdle rate&lt;/em&gt;, which is simply the expected
return you demand to take on some amount of risk. Everybody will have its own
hurdle rates for different level of risks, though it tends to depend on possible
alternative uses of capital and risk-free rates of returns. Just like the risk
premium, the hurdle rate increases with perceived risk.&lt;/p&gt;
&lt;p&gt;Putting the two concerns together is straightforward. Given a class of assets
(e.g. growth stocks) and their associated risks, you come up with a hurdle rate
(the return required to convince you to invest in the asset) and a risk premium
(the return you expect to earn on top of the risk-free rate). If the total
expected return for the asset (risk-free rate + risk premium) is higher than the
hurdle rate, you invest, otherwise you don&amp;#39;t.&lt;/p&gt;
&lt;p&gt;If you want a deeper and more data-driven take on inflation and stock valuation,
I recommend &lt;a href=&quot;http://aswathdamodaran.blogspot.com/2021/03/rates-growth-and-value-investment.html&quot;&gt;this article&lt;/a&gt; by Aswath Damodaran. I don&amp;#39;t
pretend to understand all of it, but it makes very interesting points.&lt;/p&gt;
&lt;h2 id=&quot;so-what-happened-to-growth-stocks&quot;&gt;So what happened to growth stocks?&lt;/h2&gt;
&lt;p&gt;It would be a stretch to say that, as bond yields rose, investors recomputed
their hurdle rate up (because the risk-free rate was up) and their expected risk
premium down (because inflation was likely, cutting into profits).&lt;/p&gt;
&lt;p&gt;But on the other hand... Everyone knew that valuations in the growth segment
were historically high on any metric that you cared to consider. This meant the
category was particularly risky. Inflation comes in and maybe the risk is now
too high given the potential rewards. Better to lock in some profit. This is
essentially the hurdle/premium process, but perceived intuitively.&lt;/p&gt;
&lt;p&gt;At this point, we also have to mention that inflation might be particularly bad
for the typically non-profitable growth companies, as it impedes their ability
to raise money. Not only does inflation expectation increase the interest rate
on debt, but it means that the money you borrow has lost value by the time you
spend it. Inflation also negatively affects the ability to raise cash via stock
sales: reflectively from the above, we expect inflation to negatively impact the
stock price, which mean that less money will be generated by selling (so you
need to sell more of it, which negatively impacts the stock price, ...).&lt;/p&gt;
&lt;p&gt;As always whenever we talk markets, we have to consider force multipliers and
momentum. As growth stocks sold off in February, it became clear this that this
was not a mere fluctuation but a full-blown correction. This causes stockholders
that had not reacted to the bond market to start selling too, in reaction to the
price movement, but for the same reasons: the upside of continuing to hold
longer is limited compared to the immediate risk embedded in the downward trend.&lt;/p&gt;
&lt;p&gt;Big moves in the stock market are also driven by de-leveraging: if you purchased
stock &lt;a href=&quot;https://en.wikipedia.org/wiki/Margin_(finance)&quot;&gt;on margin&lt;/a&gt;, a sudden price drop forces you to sell stock to maintain your
&lt;a href=&quot;https://www.firstrade.com/content/en-us/education/margin/marginrequirements/&quot;&gt;margin requirements&lt;/a&gt; and avoid &lt;a href=&quot;https://en.wikipedia.org/wiki/Margin_(finance)#Margin_call&quot;&gt;margin calls&lt;/a&gt;. This is especially relevant
since margin debt levels are historically high.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://norswap.com/bonds-2/margin-debt.png&quot; alt=&quot;picture: Margin debt chart&quot;&gt;&lt;/p&gt;
&lt;p&gt;The margin debt level may be in line with the S&amp;amp;P 500 price, but note that you
would expect the debt ratio to decrease as stock prices go up. If you buy 5k$
worth of stock at 5:1 leverage (so fronting 1k$ of your own cash, taking a 4k$
margin debt), and the stock goes up 20%, your stock is now worth 6k$ and your
leverage ratio is now 3:1 (stock worth 6k$, of which 2k$ is not debt). One
&lt;em&gt;possible&lt;/em&gt; interpretation of the chart is that as stock prices go up investors
reinvesting the profits with leverage (i.e. they maintain a constant leverage
ratio). Note that the chart also does not say where the leverage is deployed
(across the stock market? or is it concentrated in certain stocks?). In the end,
it seems that leverage will accentuate any &amp;quot;natural&amp;quot; price move, both in the up
and down directions.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;So, what happened? What have we learned?&lt;/p&gt;
&lt;p&gt;Bond prices decreases and the yield rose, driven by inflation expectations. A
series of events catalyzed (the 7-year bond auction) and amplified (the
butterfly trade, convexity hedging) this change.&lt;/p&gt;
&lt;p&gt;The effect spilled over to the stock market, where it was mostly driven by
&lt;a href=&quot;https://www.investopedia.com/terms/m/marketsentiment.asp&quot;&gt;sentiment&lt;/a&gt;, reflecting both the increased risk-free rate and the lowered return
expectations due to inflation. Because growth stocks&amp;#39; valuations were stretched,
that was all it took to tip this segment of the market into a correction.&lt;/p&gt;
&lt;p&gt;When these events transpired, I did not get how inflation and the bond market
could influence stock valuation to this extent. In fact, some of my intuitions
were to the opposite. For instance, since companies will keep making money in
the future, shouldn&amp;#39;t inflation push the stock price up to reflect the future
revenue increase due to higher prices?&lt;/p&gt;
&lt;p&gt;I was also looking for a technical explanation (based on some mechanics of the
financial markets), whereas the move seems to have mostly been driven by
&lt;a href=&quot;https://www.investopedia.com/terms/m/marketsentiment.asp&quot;&gt;sentiment&lt;/a&gt; and risk-reward considerations. This happened on the heels of the
&lt;a href=&quot;https://norswap.com/gamestop&quot;&gt;Gamestop gamma squeeze&lt;/a&gt;, which had a straightforward technical explanation, so
there might be some &lt;a href=&quot;https://en.wikipedia.org/wiki/Availability_heuristic&quot;&gt;availability bias&lt;/a&gt; there.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;If you enjoyed this article, you might enjoy other articles about &lt;a href=&quot;https://norswap.com/finance&quot;&gt;finance&lt;/a&gt;.&lt;/p&gt;
      </description>
      <pubDate>2021-06-05T22:00:00.000Z</pubDate>
      <link>http://norswap.com/bonds-2</link>
      <guid isPermaLink="true">http://norswap.com/bonds-2</guid>
    </item>
    <item>
      <title>Freaking blockchains: How do they work?</title>
      <description>
&lt;p&gt;in &lt;a href=&quot;https://norswap.com/finance&quot;&gt;Finance&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Cryptocurrency hype is at its peak, blockchains are on every lips. Since I
started writing this, Bitcoin &amp;amp; assorted cryptocurrencies hit multiple all-time
highs then crashed 50%.&lt;/p&gt;
&lt;p&gt;Besides all the sound and fury, I think I have something interesting and nuanced
to say about blockchains and cryptocurrencies.&lt;/p&gt;
&lt;p&gt;I also believe that to understand the topic, one has to understand the basics of
the technology, more precisely than most articles make allowance for.&lt;/p&gt;
&lt;p&gt;Contrary to popular belief, blockchain technology is not that complicated. I
dare say it&amp;#39;s even quite simple.&lt;/p&gt;
&lt;p&gt;So, in this article I explain the technology. I will tell you what it does, but
not what the practical applications are, nor whether I think the technology has
a future, whether it&amp;#39;s a scam, or whether cryptocurrency prices are justified. I
will, however, tackle all these topics in a follow-up article.&lt;/p&gt;
&lt;h2 id=&quot;whats-a-blockchain&quot;&gt;What&amp;#39;s a blockchain?&lt;/h2&gt;
&lt;p&gt;A blockchain is a decentralized ledger of transactions. It&amp;#39;s a kind of permanent
log: once a transaction makes it into the log, it will remain there forever.
Note that the concept can be extended to log more than financial transactions,
but we&amp;#39;ll use transactions as an example in this write-up, where users can
transfer digital coin currency, also called &lt;em&gt;tokens&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;What makes blockchains special is that they are truly decentralized in the sense
that anybody can join &lt;em&gt;the network&lt;/em&gt; that monitors and mirrors the state of the
blockchain — such participants are called &lt;em&gt;nodes&lt;/em&gt;. Some nodes additionally
participate in the consensus process to verify the transactions that make it
onto the ledger. In the &lt;em&gt;proof-of-work&lt;/em&gt; scheme used by Bitcoin, such nodes are
called &lt;em&gt;miners&lt;/em&gt;. And again, everybody can become a miner. We&amp;#39;ll also tackle the
main alternative, &lt;em&gt;proof-of-stake&lt;/em&gt;, later in this article.&lt;/p&gt;
&lt;p&gt;A &amp;quot;blockchain&amp;quot; is called so because the ledger is composed of a chain of
&amp;quot;blocks&amp;quot;, each of which encodes many transactions. Miners in the network collect
transactions, verify their validity, pack them in a block, then try to validate
this block. In proof-of-work, this is calling &lt;em&gt;mining&lt;/em&gt; the block (in
proof-of-stake, it&amp;#39;s simply called &lt;em&gt;proposing&lt;/em&gt; or &lt;em&gt;creating&lt;/em&gt; the block).
Whenever a node mines/proposes a block that is accepted by the network, it
receives a reward.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://norswap.com/blockchain-how/blockchain.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://norswap.com/blockchain-how/blockchain.png&quot; alt=&quot;proof-of-work overview&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;(Click to open bigger version in a new page. Image source:
&lt;a href=&quot;https://www.bitpanda.com/academy/fr/lecons/comment-fonctionne-une-blockchain/&quot;&gt;Bitpanda&lt;/a&gt;)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;As an aside, a transaction is considered valid if it is signed by the
cryptographic key associated with the source&amp;#39;s address (a crypto address is a
little bit like a bank account number), if it&amp;#39;s legal with respect to the
address&amp;#39; token balance, and if the transaction did not previously appear in
another block.&lt;/p&gt;
&lt;p&gt;Cases where an address spends the same tokens twice is called a
&lt;em&gt;double-spend&lt;/em&gt;. As we&amp;#39;ll see in a subsequent article, this is the principal
attack vector against blockchains. This is distinct from duplicating a
transaction, which might still be legal with respect to balances, but if
allowed, would allow miners to siphon off the funds from an address that
previously sent them tokens.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To mine/validate a block, it is not sufficient to create and verify the block —
it must also be accepted as part of the blockchain. This is achieved through a
consensus protocol.&lt;/p&gt;
&lt;p&gt;In computer science, we call a &lt;a href=&quot;https://en.wikipedia.org/wiki/Consensus_(computer_science)&quot;&gt;consensus protocol&lt;/a&gt; a protocol that lets a set
of nodes make a decision that is eventually accepted by the whole network. This
is typically based on some form of majority voting. We also know, to some
extent, how to guard against malicious nodes who lie to try to get their own
choice selected.&lt;/p&gt;
&lt;p&gt;However, this only works if the network participants are pre-established. In an
open network, a malicious actor could just create a huge number of nodes to get
a de facto majority — this is called a &lt;a href=&quot;https://en.wikipedia.org/wiki/Sybil_attack&quot;&gt;sibyl attack&lt;/a&gt;. To tackle this issue,
blockchains must make it &amp;quot;expensive&amp;quot; to validate blocks. In reality, validation
must be profitable: that&amp;#39;s the incentive for miners/validators to participate in
securing the network. But when we say that validation should be &amp;quot;expensive&amp;quot;, we
mean it must be &lt;em&gt;capital-intensive&lt;/em&gt;. Because it costs money to validate blocks,
it becomes much more difficult to assemble enough mining or staking power to
mount a sibyl attack.&lt;/p&gt;
&lt;p&gt;In proof-of-work blockchains, miners compete against each other to be the first
to validate a block. There is a sort of number-guessing contest going on based
on expensive computations (we&amp;#39;ll explain it shortly), and the winner gets to
mine the block and collect a reward. Miners buy specialized mining devices to be
able to run the expensive computations as fast as possible. Statistically
speaking, if you control X% of the mining power, you&amp;#39;ll get X% of the mining
rewards.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The &amp;quot;number guessing game&amp;quot; in question is made computationally expensive
through the use of &lt;em&gt;cryptographic hash functions&lt;/em&gt; (details will follow). To
the best of my knowledge, this is the reason for the &lt;em&gt;crypto&lt;/em&gt; in
&lt;em&gt;cryptocurrencies&lt;/em&gt;. It could also refer to the use of cryptographic keys to
sign transactions, but this is a fairly old technology whose use was already
pervasive when blockchains were introduced.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In proof-of-stake, validators must lock some amount of on-chain currency (their
&lt;em&gt;stake&lt;/em&gt;). The protocol then selects which validator gets to validate the next
block. If you control X% of the total stake, you&amp;#39;ll be select with X%
probability. Note that this is not the only way to implement proof-of-stake, but
it is the simplest to understand, and it gives the right idea.&lt;/p&gt;
&lt;p&gt;I haven&amp;#39;t mentionned where these rewards come from. In both cases, they&amp;#39;re a
combination of both currency creation where the miner/validator might be granted
some amount of newly minted tokens, and transactions fees paid by the users
whose transactions end up on the block. Bitcoin famously has a supply limit,
where eventually only transactions fees will remain.&lt;/p&gt;
&lt;p&gt;Currently, most blockchains use proof-of-work, including #1 and #2
cryptocurrencies Bitcoin and Ethereum. A few minor blockchains use
proof-of-stake, and Ethereum has planned to transition to proof-of-stake. We
will now give more details about them, starting with proof-of-work.&lt;/p&gt;
&lt;h2 id=&quot;proof-of-work---hashing&quot;&gt;Proof of Work - Hashing&lt;/h2&gt;
&lt;p&gt;In proof-of-work, mining is done by solving a cryptographic problem. In
particular, miners have to calculate a valid hash for the block. You can think
of a hash as a fingerprint for the block. More precisely, a hash is the result
of applying a hash function to some data (here, the block). Such a fingerprint
is really nothing else than a (potentially very large) number, encoded on 256
bits (which allows to represent 2^256 values, which is 1 followed by 77 zeroes).&lt;/p&gt;
&lt;p&gt;For blockchains, we use a &lt;em&gt;cryptographic hash function&lt;/em&gt;. Those have the
requirement that they should be irreversible (it is impossible to guess the
block content from the hash), and in general &amp;quot;look random&amp;quot; — it&amp;#39;s very important
that knowing the hash for a block does not give us any advantage in finding the
hash for a very slightly different block. Finally, a cryptographic function
should also be somewhat expensive to compute, so that it is difficult to guess
the data (e.g. the block, or the password) that generated the hash.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Crypto Trivia 1&lt;/strong&gt;: Did you know that most websites do not store your password?
Instead they store a hash of your password. When you login, they hash the
password you submit, and compare it to the hash they stored. That way, if the
website is compromised, the attacker only gets the hash of your password.
Since he can&amp;#39;t invert the hash, your password is safe, and the attacker can&amp;#39;t
use the hash to log on other websites. ... Or at least that&amp;#39;s what we&amp;#39;d hope.
In reality, getting the hash makes it easier to guess a password through the
use of &lt;a href=&quot;https://en.wikipedia.org/wiki/Rainbow_table&quot;&gt;rainbow tables&lt;/a&gt;, which is why the website should hash your password
along with a &lt;a href=&quot;https://en.wikipedia.org/wiki/Salt_(cryptography)&quot;&gt;salt&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Crypto Trivia 2&lt;/strong&gt;: Since the block is much bigger than the hash (in
Bitcoin&amp;#39;s case, most blocks are 1MB and a hash is 256 bits), it means that
there can exist many more different blocks than different hashes. This means
that, by &lt;a href=&quot;https://en.wikipedia.org/wiki/Pigeonhole_principle&quot;&gt;the pigeonhole principle&lt;/a&gt;, it is possible for two blocks to hash to
the same value. This is fine here, and is fine for most uses of hashing. Just
note that our &amp;quot;fingerprints&amp;quot; are not necessarily unique. However such a
collision has a probability of 1/(2 followed by 59 zeros). It&amp;#39;s pretty rare.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So proof-of-work consists of finding the hash of the block. Normally this is an
easy task. But in blockchains it involves a guessing component. The block&amp;#39;s data
contains all the transactions, but also a reference to the previous block
(actually, the &lt;strong&gt;hash&lt;/strong&gt; of the previous block) and a random number called
&lt;em&gt;nonce&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://norswap.com/blockchain-how/block-format.png&quot; alt=&quot;Bitcoin block format&quot;&gt;&lt;/p&gt;
&lt;p&gt;(Image source: &lt;a href=&quot;https://blog.scottlogic.com/2016/04/04/jenny-from-the-blockchain.html&quot;&gt;Scott Logic&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;The &lt;em&gt;problem&lt;/em&gt; proof-of-work has to solve is as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;nonce = random 32 bit number
h1 = hash(block including nonce)
h2 = hash(h1 concatenated with nonce)
... such that h2 &amp;gt; difficulty
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So we pick a nonce and hash the block which contains this nonce. Then we append
the nonce to this first hash, and hash that to get a second hash. The problem is
solved only this second hash is higher than a set number, called &lt;em&gt;the
difficulty&lt;/em&gt;. If the condition is not fulfilled, the process starts again with
another nonce, until the problem is solved or someone else mined a block — in
which case we need to update the previous block&amp;#39;s hash, as well as the list of
transactions.&lt;/p&gt;
&lt;p&gt;The difficulty is set by the protocol, and determines how difficult it is to
solve the problem. For instance, Bitcoin adjusts it so that the average time
between each mined block remains around 10 minutes. Because a hash is a 256-bit
string, it can be interpreted as a number between 0 and 2^256. So if the
difficulty was 3/4 * 2^256 and hashes are uniformly distributed (which a
cryptographic hash function should ensure), this would exclude 3/4 of the valid
hashes. In reality, the difficulty is much much higher than that. A &lt;a href=&quot;https://news.bitcoin.com/clocking-terahash-three-next-generation-bitcoin-mining-rigs-launched-during-the-last-quarter/&quot;&gt;bitcoin
mining machine&lt;/a&gt; that can perform about 100 tera-hash per second (*) costs about
4000$!&lt;/p&gt;
&lt;p&gt;(*) That&amp;#39;s 100 trillion — or about 2^47 — hashes per second. I&amp;#39;m not sure if
that number designates actual hash function calls or attempted nonces.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Math Trivia&lt;/strong&gt;: Assuming the difficult is indeed 3/4 * 2^256, how many
nonce would we have to try to find a valid hash, on average?&lt;/p&gt;
&lt;p&gt;You can use &lt;a href=&quot;https://math.stackexchange.com/questions/206798/&quot;&gt;this formula&lt;/a&gt; to answer the question, and the answer
happens to be approximately 4.&lt;/p&gt;
&lt;p&gt;(Thanks Andrew Gord Stewart for catching a mistake in this section!)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So proof-of-work mining takes a lot of computational power to perform all these
hashes. This costs a lot of money, both as upfront machine costs and as energy
costs. This is all by design.&lt;/p&gt;
&lt;p&gt;Now, consuming a lot of energy is not ideal in a world where we&amp;#39;re trying to
stop global warming. &lt;a href=&quot;https://cbeci.org/cbeci/comparisons&quot;&gt;At the time of writing&lt;/a&gt;, the energy expended
annually on mining bitcoin is greater than the annual energy expenditure of
Sweden, and account for 0.6% of the globe&amp;#39;s total energy production. I&amp;#39;ve also
read that every Ethereum transaction currently consumes enough energy to power
an average household for 24 hours.&lt;/p&gt;
&lt;p&gt;This can be caveated a little bit by saying that miners are after cheap energy,
and excess energy is the cheapest energy. It&amp;#39;s also possible for miners to build
renewable energy plants to power their mining rigs — though this also comes with
an environmental cost.&lt;/p&gt;
&lt;p&gt;The energy consumption &lt;em&gt;might&lt;/em&gt; not turn out to be a deal-breaker, but it&amp;#39;s far
from ideal. That&amp;#39;s one of the issues addressed by &lt;em&gt;proof-of-stake&lt;/em&gt;. But first,
let&amp;#39;s talk about consensus.&lt;/p&gt;
&lt;h2 id=&quot;proof-of-work---consensus&quot;&gt;Proof of Work - Consensus&lt;/h2&gt;
&lt;p&gt;Okay, so miners compete in a hashing contest and, generally speaking, the first
miner to find a valid nonce for his block &amp;quot;wins&amp;quot;. Now we need to explain how
that happen, i.e. how this valid block is disseminated and eventually accepted
on the network.&lt;/p&gt;
&lt;p&gt;In a simple scenario, the winning miner sends the block to all the other nodes
he knows. These will verify that the block is valid: all the transactions have
valid signatures, there are no double-spends, and the hash of the block
satisfies the difficulty requirement. Once this is done, they further
disseminate the block, and they append it at the end of their local chain. If
the node is a miner, he will also restart its mining efforts by creating a new
candidate block — the block he is currently attempting to mine does include the
hash of a block that is no longer the last in the chain, as well as transactions
that might have already been included in the block submitted by the winning
miner.&lt;/p&gt;
&lt;p&gt;At this point, one could have a security question: what prevents miners from
completely ignoring blocks from their competitors in an attempt to mine their own
block? There is a neat game-theoretic incentive not to do this: If you assume
everyone else is honest, they will append this competitor block to their chain.
That means that even if you manage to mine your alternative block, other nodes
will reject it because it does not contain the hash of what they consider to be
the latest block in the chain (the block submitted by your competitor). What if
everyone cheats? We&amp;#39;ll explain later, but there is no incentive to do this, as
that makes all the profits go to the biggest miner.&lt;/p&gt;
&lt;p&gt;Let&amp;#39;s tackle the hard case: what if two miners mine a valid block at more or
less the same time? Only one of the two blocks can win, since they include the
hash of the same previous block, and their set of transactions might overlap.&lt;/p&gt;
&lt;p&gt;In this case, the rule used by nodes is to always favor the longest chain. Of
course, initially, the two blocks create two competing chains of equal length.
Miners will have to decide which block to use as base for the next block they
will attempt to mine (most likely they will select the block they saw first,
reasoning that other miners are more likely to also have seen this block first —
though that might not be the case because of network delays). Once a miner comes
up with a valid block on one of the two chains, that chain gains the upper hand,
and everyone converges on the same chain. Of course, it&amp;#39;s possible for the
scenario to repeat and the two chains to grow at about the same time, but this
is very unlikely and grows more unlikely as the competing chains grow. Remember
that the Bitcoin protocol adapts so that a new block is mined on average every
10 minutes: it should be rare for two blocks to be mined mere seconds away from
one another, and it will be exponentially rarer for that to happen multiple
times in a row.&lt;/p&gt;
&lt;p&gt;This longest-chain rule is also why it is irrational for miners to just
ignore other blocks: if everybody mined their own chain, the largest miner would
always be able to overtake the others with a longer chain, and so all the
non-mining nodes would converge on that chain.&lt;/p&gt;
&lt;p&gt;The longest-chain rule is not infaillible: if an entity can get control of 51%
of the mining power, they&amp;#39;re able to mount a &lt;em&gt;51% attack&lt;/em&gt; which allows them to
double spend. We&amp;#39;ll talk about those in details in a subsequent article. Note
that 51% attacks are at least fairly easy to spot on non-anonymized blockchains
(which is most of them).&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://norswap.com/blockchain-how/51attack.png&quot; alt=&quot;A 51% attack&quot;&gt;&lt;/p&gt;
&lt;p&gt;Above, a schematic representation of a 51% attack, where the attacker conceals
his mining and then release his blocks all at once to overtake the main chain.
(source: &lt;a href=&quot;https://ethresear.ch/t/timeliness-detectors-and-51-attack-recovery-in-blockchains/6925&quot;&gt;Vitalik
Buterin&lt;/a&gt;)&lt;/p&gt;
&lt;h2 id=&quot;proof-of-stake&quot;&gt;Proof of Stake&lt;/h2&gt;
&lt;p&gt;As we said earlier, proof-of-stake is another scheme to make validating blocks
capital-intensive enough so that it&amp;#39;s impractical for any single actor to
dominate the network, and impossible to mount a &lt;a href=&quot;https://en.wikipedia.org/wiki/Sybil_attack&quot;&gt;sibyl attack&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In proof-of-work, the hardware and energy costs make mining capital intensive.
In proof-of-stake, we simply have validators put money on the line directly. And
because cryptocurrencies are essentially money, that&amp;#39;s rather simple.&lt;/p&gt;
&lt;p&gt;In proof-of-stake, validators engage a certain amount of currency, their
&lt;em&gt;stake&lt;/em&gt;, which becomes locked for as long as they participate in the
proof-of-stake mechanism.&lt;/p&gt;
&lt;p&gt;The incentive structure is identical to proof-of-work. If you control 10% of the
mining power, you should validate 10% of the blocks and get 10% of the mining
rewards. Similarly, if you control 10% of the total stake, you should do 10% of
the verification work and you should get 10% of the validation rewards. The
difference is that instead of using a hashing contest, the protocol must
determine how to distribute rewards to validators according to this
distribution.&lt;/p&gt;
&lt;p&gt;There are multiple ways to go about this, but the simplest is to use a
pseudo-random scheme to select the next validator that will create a block. As
an illustration, imagine that we filled an urn with 100 balls. On each ball the
name of a validator is written, and each validator gets as many balls as his
percentage of the total stake (of course in reality we need to accommodate many
more validators and very fine-grained fractions). Then we use some data from the
block (we need to make sure validators can&amp;#39;t easily manipulate it), run it
through a cryptographic hash function, and use the resulting hash to select a
ball from the urn. The validator whose name is written on the ball gets to
create the next block, and gets the validation reward.&lt;/p&gt;
&lt;p&gt;That&amp;#39;s not quite enough. Other validators need to cosign on the block, otherwise
the block&amp;#39;s creator could double-spend, or even include transactions without a
valid signature. The simplest scheme here is to have all validators verify each
block, and to require a quorum of agreement (e.g. a simple majority, or a 2/3
majority) to validate the block. We can&amp;#39;t require consensus, because that would
open the protocol to &lt;a href=&quot;https://en.wikipedia.org/wiki/Denial-of-service_attack&quot;&gt;Denial-of-Service (DoS)&lt;/a&gt; attacks, and some validators might
have temporary availability issues. If having every validator vote for every
block is impractical, we can also form &lt;em&gt;committees&lt;/em&gt; to validate individual
blocks. Care must be taken that the validators are randomized properly and that
committees are large enough to minimize the probability that all validators in
the committee are controlled by the same entity. It is commonly required that
this probability should be infinitesimal for validators controlling about 30% of
the stake, and ideally up to 50%.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://norswap.com/blockchain-how/committees.png&quot; alt=&quot;Committees in the Ethereum Beacon Chain&quot;&gt;&lt;/p&gt;
&lt;p&gt;Pictured above: committees in the Ethereum beacon chain. Image source:
&lt;a href=&quot;https://ethos.dev/beacon-chain/&quot;&gt;ethos.dev&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There&amp;#39;s another issue: what if the validator designated to create the block
doesn&amp;#39;t answer? We must avoid stalling the chain in that case. One solution is
to assign blocks to time slots. If the designated validator does not propose a
block during its timeslot, the opportunity is lost and another validator gets to
propose a block that will follow the previous valid block.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Distributed Systems Trivia&lt;/strong&gt;: The above is not as easy as it sounds, even if
we assume that nodes are able to get highly accurate time information outside
of the blockchain (for instance using the &lt;a href=&quot;https://en.wikipedia.org/wiki/Network_Time_Protocol&quot;&gt;NTP&lt;/a&gt; protocol). This is due to
network delays, which makes the timeslot boundaries blurry. Some nodes may
consider a proposed block to be within its timeslot while others may not.
Therefore, the protocol must take care to handle these boundary conditions so
that the network always converges. It must also avoid unduly penalizing honest
actors because of network latency.&lt;/p&gt;
&lt;p&gt;If you want to avoid relying on out-of-chain time information, &lt;a href=&quot;https://ethresear.ch/t/network-adjusted-timestamps/4187&quot;&gt;things get
even more difficult&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Nevertheless, we&amp;#39;d like to avoid the scenario where a block is skipped, if only
for reasons of throughput (how many transactions get validated each second).
Ethereum proof-of-stake incentivizes validators to be responsive by imposing a
fine on the stake of absentee validators.&lt;/p&gt;
&lt;p&gt;That&amp;#39;s more or less how proof-of-stake works. Unlike proof-of-work, there is a
lot of disparity between the various proposed proof-of-stake designs. This
article offers only a high-level overview, and elides a lot of the details. For
instance, we didn&amp;#39;t even talk about how stakes can be confiscated (&amp;quot;slashed&amp;quot;)
when a validator is caught attempting to cheat.&lt;/p&gt;
&lt;p&gt;These missing details are best examined in the light of potential attacks
against the protocol, which we will examine in a subsequent blog post.&lt;/p&gt;
&lt;h2 id=&quot;coda&quot;&gt;Coda&lt;/h2&gt;
&lt;p&gt;In this article, I presented an incomplete yet detailed technical overview of
the proof-of-work and proof-of-stake protocols used to implement most
blockchains, including the Bitcoin and Ethereum blockchains.&lt;/p&gt;
&lt;p&gt;The most important take-away is that blockchains are distributed ledgers built
on top of a network that is open to everyone — this is their main selling point.
Because of this, they must guard against &lt;a href=&quot;https://en.wikipedia.org/wiki/Sybil_attack&quot;&gt;sibyl attacks&lt;/a&gt; by making validation
capital-intensive so that any single actor is unlikely to control a majority of
the validation capacity. Proof-of-work makes mining capital-intensive by making
validation computationally expensive, while proof-of-stake has validators put
money (in the form of crypto tokens) on the line directly. Both methods must
contend with a series of challenges that involve concerns from distributed
systems, security, and game theory.&lt;/p&gt;
&lt;p&gt;Stay tuned for further posts. Next post will take a step back and look at the
potential and applications of blockchain technologies. A subsequent post will
take a look at the security model and potential attacks against proof-of-work
and proof-of-stake. See you next time!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Enjoyed this? Check out &lt;a href=&quot;https://norswap.com/finance&quot;&gt;more finance articles&lt;/a&gt;.&lt;/p&gt;
      </description>
      <pubDate>2021-05-26T22:00:00.000Z</pubDate>
      <link>http://norswap.com/blockchain-how</link>
      <guid isPermaLink="true">http://norswap.com/blockchain-how</guid>
    </item>
    <item>
      <title>Fun With Incentives</title>
      <description>
&lt;blockquote&gt;
&lt;p&gt;Never, ever, think about something else when you should be thinking about the
power of incentives.&lt;br&gt;— &lt;a href=&quot;https://norswap.com/munger-psychology/&quot;&gt;Charlie Munger&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;During this past month, I had a lot of fun with &lt;a href=&quot;https://1729.com&quot;&gt;1729.com&lt;/a&gt;, a
newsletter that pays its members in Bitcoins for performing tasks — which are
typically interesting and will teach you something useful.&lt;/p&gt;
&lt;p&gt;Here&amp;#39;s the main things I did so far:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://1729.com/proof-of-workout/&quot;&gt;Worked out&lt;/a&gt; (didn&amp;#39;t need them for that,
but it was nice getting 10$ for it!)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://1729.com/learn-basic-elixir-with-exercism/&quot;&gt;Learned some Elixir&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://1729.com/decentralized-task-creation/&quot;&gt;Wrote a task for the newsletter to
reuse&lt;/a&gt; — &lt;a href=&quot;https://ghost.norswap.com/paving-the-titans-way/&quot;&gt;here&amp;#39;s my
task&lt;/a&gt;. The useful thing in
this one was actually to setup &lt;a href=&quot;https://www.cloudron.io/&quot;&gt;cloudron&lt;/a&gt; on &lt;a href=&quot;https://www.oracle.com/be/cloud/&quot;&gt;the
oracle cloud&lt;/a&gt; (not shilling this because I&amp;#39;m
an Oracle employeed, but because I&amp;#39;m cheap and it&amp;#39;s the only one that has a
permanent free tier). Cloudron is a cool service manager that lets you install
a bunch of server apps (including the &lt;a href=&quot;https://ghost.org/&quot;&gt;ghost&lt;/a&gt; blog
platform). Don&amp;#39;t worry, I still like my &lt;a href=&quot;https://github.com/norswap/norswap.github.io/tree/master/_factory&quot;&gt;homegrown website
generator&lt;/a&gt;
better :)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://1729.com/refer-task-sponsors/&quot;&gt;Cold-emailed some rich people to ask for
money&lt;/a&gt; — not something I&amp;#39;d normally
feel very comfortable doing.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://1729.com/how-to-start-a-new-country/&quot;&gt;Wrote an article expanding on the idea of building a new digital-first
country&lt;/a&gt; — &lt;a href=&quot;https://ghost.norswap.com/new-country/&quot;&gt;here&amp;#39;s my
article&lt;/a&gt;. I must admit I feel a bit
shy about this one, because it&amp;#39;s such an optimistic view — which is not really
my usual personality. But that&amp;#39;s also why it was a useful exercise to get into
a different perspective. It did get me thinking about blockchain technologies
and their potential — expect a more nuanced article on that soon.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://1729.com/quantum-computing-and-proof-of-memory/&quot;&gt;Learned about quantum
computing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://1729.com/video-memes-on-indian-crypto/&quot;&gt;Made a video meme about India&amp;#39;s crypto
ban&lt;/a&gt; — I went for the &lt;a href=&quot;https://www.youtube.com/watch?v=Ecnei9vtLyU&quot;&gt;Hitler
reacts&lt;/a&gt; classic&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;My submissions got selected on some of these tasks and I got ~220$ out of those
that have been awarded so far. That&amp;#39;s less that I could have earned otherwise in
the same timespan if I was hell-bent on earning money. But as we&amp;#39;ll see below,
that&amp;#39;s not why I did it.&lt;/p&gt;
&lt;p&gt;There are now new tasks to learn about crypto technologies (the &lt;a href=&quot;https://ens.domains/&quot;&gt;Ethereum Name
Service&lt;/a&gt; and &lt;a href=&quot;https://1729.com/learn-solidity-with-cryptozombies/&quot;&gt;learning the solidity smart contract
langauge&lt;/a&gt;. I&amp;#39;m excited to
do these too.&lt;/p&gt;
&lt;p&gt;But I&amp;#39;m actually not writing this to shill 1729. Rather, it&amp;#39;s to marvel about
the power of incentives.&lt;/p&gt;
&lt;p&gt;See — most of these things I enjoyed doing and might have done without the
possibility of a monetary compensation. But living is prioritizing (if you&amp;#39;re
doing it right at least) and besides working out, none of these things were
high-priority enough.&lt;/p&gt;
&lt;p&gt;But 1729 offered me a collection of incentives to complete the tasks:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I may earn some money!&lt;/li&gt;
&lt;li&gt;There&amp;#39;s a deadline.&lt;/li&gt;
&lt;li&gt;I&amp;#39;ve attempted all tasks so far, so I&amp;#39;m strongly motivated to attempt new
tasks, for the sake of completion (gamification!)&lt;/li&gt;
&lt;li&gt;These tasks have generally taught me something, or reinforced some good habit
or useful behaviour.&lt;/li&gt;
&lt;li&gt;The tasks have been devised to be doable in a reasonable timeframe — no need
to worry about biting off more than one can chew.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To be fair, there was a reason that most of these things were not on my todo
list. But the added incentives were enough to put them past the hump. And the
way I use my time is far from optimal. Had I not, say, written an article, I
might have watched an interesting youtube video instead with no relevance to my
daily life. The incentives stir you towards spending your time smarter.&lt;/p&gt;
&lt;p&gt;It also got me thinking. If 1729 can incentivize me in this way, can&amp;#39;t I do the
same to me? I can certainly chunk task in manageable bits, and set deadlines. I
can also use &lt;a href=&quot;https://jamesclear.com/stop-procrastinating-seinfeld-strategy&quot;&gt;the seinfeld
method&lt;/a&gt; and build
on top of a series of small wins. Paying yourself gets more tricky, however. I
think I know how to make it work.&lt;/p&gt;
&lt;p&gt;The key is that I&amp;#39;m cheap. So there are a few not-so-unresonable expenses that I
don&amp;#39;t make because they are not strictly necessary or an improvement to my
day-to-day life. Now say there&amp;#39;s something I want to get done, or a behaviour I
want to promote. If I care enough about that, I can justify paying to speed it
up. On the other end, I get the reward if I complete the task within the
deadline. It&amp;#39;s a smart way to get in alignment with yourself.&lt;/p&gt;
&lt;p&gt;There&amp;#39;s a snag though — what if you don&amp;#39;t make the deadline? Do you just put the
reward back in play? As the payer this makes sense — you want the thing done
after all. But on the other end, this is the wrong lesson: you can slip the
deadline but still get the reward (albeit later). I think the key here is to
reward yourself for consistency. So if you slip, the previous reward might be
out of play for the next task, which will grant a smaller (or more generic)
reward. But if you succeed at that one, &lt;em&gt;and&lt;/em&gt; at the next one, then you get the
original reward. That way, you get the nice rewards only if you keep succeeding
consistently.&lt;/p&gt;
&lt;p&gt;I will try to experiment with these micro-incentive structures in the near
future.&lt;/p&gt;
      </description>
      <pubDate>2021-04-29T22:00:00.000Z</pubDate>
      <link>http://norswap.com/incentives</link>
      <guid isPermaLink="true">http://norswap.com/incentives</guid>
    </item>
  </channel>
</rss>
